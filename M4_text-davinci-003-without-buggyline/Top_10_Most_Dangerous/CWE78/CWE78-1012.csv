Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } char * safe_host = r_str_escape_latin1 ( host ) ; char * safe_path = r_str_escape_latin1 ( path ) ; if ( ! r_socket_connect_tcp ( s , safe_host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , safe_host , port ) ; free ( uri ) ; free ( safe_host ) ; free ( safe_path ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , safe_path , safe_host , ( int ) strlen ( data ) ) ; free ( uri ) ; free ( safe_host ) ; free ( safe_path ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",532,-15.245677814466276,-0.02865728912493661
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } // Neutralize the input command to prevent OS Command Injection. char * neutralizedPath = r_str_escape_utf8_for_shell ( path , 1 ) ; s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , neutralizedPath , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; free ( neutralizedPath ) ; return r_socket_http_answer ( s , code , rlen ) ; }",505,-43.91208400819806,-0.086954621798412
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) {
    RSocket * s ;
    bool ssl = r_str_startswith ( url , ""https://"" ) ;
    char * uri = strdup ( url ) ;
    if ( ! uri ) {
        return NULL ;
    }
    char * host = strstr ( uri , ""://"" ) ;
    if ( ! host ) {
        free ( uri ) ;
        printf ( ""Invalid URI"" ) ;
        return NULL ;
    }
    host += 3 ;
    char * port = strchr ( host , ':' ) ;
    if ( ! port ) {
        port = ( ssl ) ? ""443"" : ""80"" ;
    } else {
        * port ++ = 0 ;
    }
    char * path = strchr ( host , '/' ) ;
    if ( ! path ) {
        path = """" ;
    } else {
        * path ++ = 0 ;
    }
    s = r_socket_new ( ssl ) ;
    if ( ! s ) {
        printf ( ""Cannot create socket\\n"" ) ;
        free ( uri ) ;
        return NULL ;
    }
    if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) {
        eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ;
        free ( uri ) ;
        return NULL ;
    }

    // Escape user input with r_str_escape() to neutralize special elements used in an OS command
    data = r_str_escape(data);
    r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ;
    free ( uri ) ;
    r_socket_write ( s , ( void * ) data , strlen ( data ) ) ;
    return r_socket_http_answer ( s , code , rlen ) ;
}",575,-36.40523675050715,-0.0633134552182733
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } //Added Escape character to avoid OS Command Injection path = r_str_escape ( path ) ; s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; char * result = r_socket_http_answer ( s , code , rlen ) ; free ( path ) ; return result ; }",491,-31.747077932931234,-0.06465799986340373
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post(const char *url, const char *data, int *code, int *rlen) {
  RSocket *s;
  bool ssl = r_str_startswith(url, ""https://"");
  char *uri = strdup(url);
  if (!uri) {
    return NULL;
  }
  char *host = strstr(uri, ""://"");
  if (!host) {
    free(uri);
    printf(""Invalid URI"");
    return NULL;
  }
  host += 3;
  char *port = strchr(host, ':');
  if (!port) {
    port = (ssl) ? ""443"" : ""80"";
  } else {
    *port++ = 0;
  }
  char *path = strchr(host, '/');
  if (!path) {
    path = """";
  } else {
    *path++ = 0;
  }
  s = r_socket_new(ssl);
  if (!s) {
    printf(""Cannot create socket\\n"");
    free(uri);
    return NULL;
  }
  if (!r_socket_connect_tcp(s, host, port, 0)) {
    eprintf(""Cannot connect to %s:%s\\n"", host, port);
    free(uri);
    return NULL;
  }
  //Sanitize host
  int hostlen = strlen(host);
  char sanitized_host[hostlen + 1];
  strncpy(sanitized_host, host, hostlen);
  sanitized_host[hostlen] = '\0';
  for (int i = 0; i < hostlen; i++) {
    if (sanitized_host[i] == '&' || sanitized_host[i] == ';' || sanitized_host[i] == '|' || sanitized_host[i] == '$' || sanitized_host[i] == '>' || sanitized_host[i] == '<' || sanitized_host[i] == '`') {
      sanitized_host[i] = '_';
    }
  }
  //Send the sanitized values
  r_socket_printf(s,
                  ""POST /%s HTTP/1.0\\r\\n""
                  ""User-Agent: radare2 "" R2_VERSION ""\\r\\n""
                  ""Accept: */*\\r\\n""
                  ""Host: %s\\r\\n""
                  ""Content-Length: %i\\r\\n""
                  ""Content-Type: application/x-www-form-urlencoded\\r\\n""
                  ""\\r\\n"",
                  path, sanitized_host, (int)strlen(data));
  free(uri);
  r_socket_write(s, (void *)data, strlen(data));
  return r_socket_http_answer(s, code, rlen);
}",707,-66.07413551915312,-0.09345705165368191
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","

R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } // Remove any special characters from the data string before writing it to the socket char * safe_data = ( char * ) malloc ( sizeof ( char ) * strlen ( data ) ) ; if ( ! safe_data ) { printf ( ""Error allocating memory for safe_data\n"" ) ; free ( uri ) ; return NULL ; } int i , j = 0 ; for ( i = 0 ; i < strlen ( data ) ; i ++ ) { if ( data [ i ] != '|' && data [ i ] != '&' ) { safe_data [ j ] = data [ i ] ; j ++ ; } } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; free ( safe_data ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; free ( safe_data ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( safe_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) safe_data , strlen ( safe_data ) ) ; free ( safe_data ) ; return r_socket_http_answer ( s , code , rlen ) ; }",624,-58.39155402126823,-0.09357620836741704
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) {
 RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } 
 
 // Use a whitelist of safe characters to avoid OS command injection
  char safeData[strlen(data)]; 
  int i;
  for (i = 0; i < strlen(data); i++) {
    if (data[i] == '/' || data[i] == '.' || data[i] == '-' || data[i] == '_' || (data[i] >= '0' && data[i] <= '9') || (data[i] >= 'A' && data[i] <= 'Z') || (data[i] >= 'a' && data[i] <= 'z')) {
      safeData[i] = data[i];
    }
    else
      safeData[i] = ' ';
  }
 s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( safeData ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) safeData , strlen ( safeData ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",644,-66.17542007134122,-0.10275686346481556
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } char * escaped_data = r_str_escape ( data );  //escape data to prevent injection  r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escaped_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) escaped_data , strlen ( escaped_data ) ) ; free ( escaped_data );  //free the escaped data resource return r_socket_http_answer ( s , code , rlen ) ; }",500,-39.52346683317432,-0.07904693366634864
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," 
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } // Prevent CWE-78 vulnerability with the function r_socket_escaped_connect_tcp if ( ! r_socket_escaped_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",484,-33.57760385574195,-0.06937521457797924
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { 
RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } 
// Use r_str_escape () to remove any special elements that could lead to OS command injection
char* cleanData = r_str_escape (data); 
r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( cleanData ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) cleanData , strlen ( cleanData ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",502,-45.91348487539826,-0.09146112524979733
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = r_str_esc (strdup ( url )) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , r_str_esc(path) , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) r_str_esc(data) , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",478,-15.269281337229,-0.03194410321596025
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } //Added code -Sanitizing data passed into the system data = r_str_escape (data) if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",480,-40.26181928932039,-0.08387879018608416
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post(const char *url, const char *data, int *code, int *rlen) { RSocket *s; bool ssl = r_str_startswith (url, ""https://""); char *uri = strdup (url); if (!uri) { return NULL; } char *host = strstr (uri, ""://""); if (!host) { free (uri); printf (""Invalid URI""); return NULL; } host += 3; char *port = strchr (host, ':'); if (!port) { port = (ssl) ? ""443"" : ""80""; } else { *port++ = 0; } char *path = strchr (host, '/'); if (!path) { path = """" ; } else { *path++ = 0; } s = r_socket_new (ssl); if (!s) { printf (""Cannot create socket\

""); free (uri); return NULL; } //CWE-78 vulnerability fixed - escape arguments to system calls //We are using the r_str_arg_quote function to escape special characters from the path argument if (!r_socket_connect_tcp (s, host, port, 0, r_str_arg_quote(path))) { eprintf (""Cannot connect to %s:%s\

"", host, port); free (uri); return NULL; } r_socket_printf (s, ""POST /%s HTTP/1.0\r\n"" ""User-Agent: radare2 "" R2_VERSION ""\r\n"" ""Accept: */*\r\n"" ""Host: %s\r\n"" ""Content-Length: %i\r\n"" ""Content-Type: application/x-www-form-urlencoded\r\n"" ""\r\n"" , path, host, (int)strlen (data)); free (uri); r_socket_write (s, (void *)data, strlen (data)); return r_socket_http_answer (s, code, rlen); }",457,-80.64734065338392,-0.17647120493081822
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } char *sanitized_path = r_sys_cmd_str ( NULL , path , 0 ) ; s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; free ( sanitized_path ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , sanitized_path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; free ( sanitized_path ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",499,-22.496617358858238,-0.045083401520757994
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","

R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } // Escape any special characters in the host name string. char * escapedHost = r_str_escape(host); if ( ! r_socket_connect_tcp ( s , escapedHost , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , escapedHost , port ) ; free ( uri ) ; free ( escapedHost ) ; return NULL ; } // Escape any special characters in the path string. char * escapedPath = r_str_escape(path); r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , escapedPath , escapedHost , ( int ) strlen ( data ) ) ; free ( uri ) ; free ( escapedHost ) ; free ( escapedPath ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",529,-35.85136033423805,-0.06777194770177325
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","

R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) {
RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; 
char * uri = strdup ( url ) ; 
if ( ! uri ) { 
    return NULL ; 
} 

char * host = strstr ( uri , ""://"" ) ; 
if ( ! host ) { 
    free ( uri ) ; 
    printf ( ""Invalid URI"" ) ; 
    return NULL ; 
} 

host += 3 ; 
char * port = strchr ( host , ':' ) ; 
if ( ! port ) { 
    port = ( ssl ) ? ""443"" : ""80"" ; 
} else { 
    * port ++ = 0 ; 
} 

char * path = strchr ( host , '/' ) ; 
if ( ! path ) { 
    path = """" ; 
} else { 
    * path ++ = 0 ; 
} 

//Sanitize input data
const char *data_sanitized = NULL;
data_sanitized = r_str_escape_shell (data);
if (data_sanitized == NULL) {
    printf(""Error sanitizing input data\n"");
    free (uri);
    return NULL;
}

s = r_socket_new ( ssl ) ; 
if ( ! s ) { 
    printf ( ""Cannot create socket\\n"" ) ; 
    free ( uri ) ; 
    return NULL ; 
} 

if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { 
    eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; 
    free ( uri ) ; 
    return NULL ; 
} 

r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data_sanitized ) ) ; 
free ( uri ) ; 
r_socket_write ( s , ( void * ) data_sanitized , strlen ( data_sanitized ) ) ; 
free(data_sanitized);
return r_socket_http_answer ( s , code , rlen ) ; 
}",648,-54.80636196535752,-0.08457771908234185
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," 
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; 
//Create a new char array to store the url
char uri[strlen(url)+1]; 
//Copy the string
strcpy(uri, url); 
if ( ! uri ) { return NULL ; } 
char * host = strstr ( uri , ""://"" ) ; 
if ( ! host ) { //free ( uri ) ; printf ( ""Invalid URI"" ) ; 
return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; 
if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; 
if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; 
if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; //free ( uri ) ; 
return NULL ; } 
if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; //free ( uri ) ; 
return NULL ; } 
//Validate data before passing it to r_socket_printf 
if (r_str_is_printable_in_range(data, strlen(data))) {
    r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; 
}
//free ( uri ) ; 
r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; 
return r_socket_http_answer ( s , code , rlen ) ; 
}",563,-76.11456245165016,-0.1351946047098582
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = r_str_sanitize_sprintf ( strdup ( url ) ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } char * safe_path = r_str_sanitize_sprintf ( path ) ; r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , safe_path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; free ( safe_path ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",499,-14.957636407219333,-0.029975223260960585
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","

R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } 

// ESCAPE SPECIAL CHARACTERS 
char * escapedPath = r_str_escape_sh (path);

s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } 

//USE escapedPath INSTEAD OF path
r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , escapedPath , host , ( int ) strlen ( data ) ) ; 

free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",506,-41.20803539917726,-0.08143880513671396
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } //add secure code to prevent OS command injection char sanitized_data[strlen(data)+1]; for (int i = 0; i < strlen(data); i++) { if (data[i] == ';' || data[i] == '|' || data[i] == '>' || data[i] == '<' || data[i] == '$' || data[i] == '&') { sanitized_data[i] = ' '; //replace special characters with a space } else { sanitized_data[i] = data[i]; } } sanitized_data[strlen(data)] = '\0'; s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( sanitized_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) sanitized_data , strlen ( sanitized_data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",613,-49.266760477782185,-0.08036991921334777
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } 

// Prevent OS Command Injection
// Escape all characters passed in the variables 'host', 'port' and 'path'
char *escaped_host = r_str_escape(host);
char *escaped_port = r_str_escape(port);
char *escaped_path = r_str_escape(path);

s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , escaped_host , escaped_port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , escaped_host , escaped_port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , escaped_path , escaped_host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; 

// Free up the memory
free(escaped_host);
free(escaped_port);
free(escaped_path);
}",581,-52.61599175209934,-0.09056108735301091
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } char * sanitized_data = r_str_escape (data); s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( sanitized_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) sanitized_data , strlen ( sanitized_data ) ) ; free (sanitized_data); return r_socket_http_answer ( s , code , rlen ) ; }",489,-11.671574547652988,-0.023868250608697315
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post(const char *url, const char *data, int *code, int *rlen) { 
    RSocket *s; bool ssl = r_str_startswith(url, ""https://""); char *uri = strdup(url); 
    if (!uri) { 
        return NULL; 
    } 
    char *host = strstr(uri, ""://""); 
    if (!host) { 
        free(uri); 
        printf(""Invalid URI""); 
        return NULL; 
    } 
    
    host += 3; 
    char *port = strchr(host, ':'); 
    if (!port) { 
        port = (ssl) ? ""443"" : ""80""; 
    } else { 
        *port++ = 0; 
    } 
    
    char *path = strchr(host, '/'); 
    if (!path) { 
        path = """"; 
    } else { 
        *path++ = 0; 
    } 
    
    s = r_socket_new(ssl); 
    if (!s) { 
        printf(""Cannot create socket\\n""); 
        free(uri); 
        return NULL; 
    } 
    
    if (!r_socket_connect_tcp (s, host, port, 0)) { 
        eprintf(""Cannot connect to %s:%s\\n"", host, port); 
        free(uri); 
        return NULL; 
    } 
    
    size_t data_len = strlen(data); 
    size_t cmd_len = strlen(""POST /%s HTTP/1.0\r\nUser-Agent: radare2 "" R2_VERSION ""\r\nAccept: */*\r\nHost: %s\r\nContent-Length: %i\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\n"") + strlen(path) + strlen(host) + 10 + data_len; 
    
    char *cmd = calloc(1, cmd_len); 
    snprintf(cmd, cmd_len, ""POST /%s HTTP/1.0\r\nUser-Agent: radare2 "" R2_VERSION ""\r\nAccept: */*\r\nHost: %s\r\nContent-Length: %i\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\n"", path, host, (int)strlen(data)); 
    free(uri); 
    r_socket_write (s, (void*)cmd, strlen(cmd)); 
    free(cmd); 
    r_socket_write(s, (void*)data, strlen(data)); 
    return r_socket_http_answer(s, code, rlen); 
}",698,-69.22111393971213,-0.09917065034342712
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { 
RSocket * s ; 
bool ssl = r_str_startswith ( url , ""https://"" ) ; 
char * uri = strdup ( url ) ; 
if ( ! uri ) { return NULL ; } 
char * host = strstr ( uri , ""://"" ) ; 
if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } 
host += 3 ; 
char * port = strchr ( host , ':' ) ; 
if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } 
char * path = strchr ( host , '/' ) ; 
if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } 
s = r_socket_new ( ssl ) ; 
if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } 
if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } 

// CWE-78 Fix: Perform input validation and filtering of untrusted data.
char command[strlen(path) + 1];
for (int i = 0; i < strlen(path); i++) {
    if (isalnum(path[i]) || path[i] == '-' || path[i] == '_' || path[i] == '/') {
        command[i] = path[i];
    }
    else {
        command[i] = '\0';
    }
}
command[strlen(path)] = '\0';

// Use only properly validated data for execution.
r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , command, host , ( int ) strlen ( data ) ) ; 
free ( uri ) ; 
r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; 
return r_socket_http_answer ( s , code , rlen ) ; 
}",642,-85.94990008991275,-0.13387834904970833
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * modified_path = strdup(path); //<--Added r_str_arg_escape(modified_path); //<--Added char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , modified_path , //<--Updated host , ( int ) strlen ( data ) ) ; free ( uri ) ; free ( modified_path ); //<--Added r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",506,-48.099857466181504,-0.09505900685016108
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } char * sanitized_path = ( char * ) malloc ( sizeof ( char ) * ( strlen ( path ) + 1 ) ) ; if ( sanitized_path == NULL ) { return NULL ; } sanitize_string ( sanitized_path , path ) ; s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } free ( uri ) ; r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , sanitized_path , host , ( int ) strlen ( data ) ) ; free ( sanitized_path ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",528,-31.849982916632882,-0.06032193734210773
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } char * escaped_path = r_str_escape ( path ) ; s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , escaped_path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; free ( escaped_path ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",483,-12.04428211023367,-0.02493640188454176
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } path = r_str_escape ( path ) ; s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; free ( path ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",474,-7.6938895722683425,-0.01623183454065051
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; int url_len = strlen(url); char * uri = (char*)malloc(url_len + 1); if ( ! uri ) { return NULL ; } memcpy(uri, url, url_len); uri[url_len] = 0; char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } char post_args[1024]; snprintf(post_args, sizeof post_args, ""POST /%s HTTP/1.0\\r\\nUser-Agent: radare2 "" R2_VERSION ""\\r\\nAccept: */*\\r\\nHost: %s\\r\\nContent-Length: %i\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\n\\r\\n"", path, host, ( int ) strlen ( data ) ); free ( uri ) ; r_socket_write ( s , ( void * ) post_args, strlen ( post_args ) ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",518,-43.664001141130484,-0.0842934384963909
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } 
//sanitize path 
char * filtered_path = r_str_sanitize ( path ) ; 

s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } 

//use filtered path 
r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , filtered_path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",498,-32.86866433528404,-0.06600133400659446
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } // Escape the following user input strings host = r_str_escape ( host ) ; path = r_str_escape ( path ) ; s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",487,-26.52133838039576,-0.05445860037042251
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } char * esc_data = r_str_ndup(data, r_str_len(data)); if (esc_data == NULL) { eprintf (""Cannot allocate memory\\n""); free (uri); return NULL; } r_str_replace_char (esc_data, '\'', '`'); if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; free (esc_data); return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( esc_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) esc_data , strlen ( esc_data ) ) ; free (esc_data); return r_socket_http_answer ( s , code , rlen ) ; }",545,-43.48517303106721,-0.0797893083138848
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } // patch begin path = r_str_escape ( path ) ; if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; free ( path ) ; // patch end return r_socket_http_answer ( s , code , rlen ) ; }",480,-26.9160204775623,-0.05607504266158812
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } char * escapedPath = r_str_escape ( path ) ; if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , escapedPath , host , ( int ) strlen ( data ) ) ; free ( uri ) ; free ( escapedPath ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",479,-11.768071809410639,-0.024567999602109893
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } char * escapedData = r_str_sanitize_sprintf ( data ) ; if ( ! escapedData ) { free ( uri ) ; printf ( ""Cannot allocate memory\\n"" ) ; return NULL ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; free ( escapedData ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; free ( escapedData ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escapedData ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) escapedData , strlen ( escapedData ) ) ; free ( escapedData ) ; return r_socket_http_answer ( s , code , rlen ) ; }",527,-21.947561852477254,-0.04164622742405551
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","

R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) {
RSocket * s ;
bool ssl = r_str_startswith ( url , ""https://"" ) ;
char * uri = strdup ( url ) ;
if ( ! uri ) {
return NULL ;
}
char * host = strstr ( uri , ""://"" ) ;
if ( ! host ) {
free ( uri ) ;
printf ( ""Invalid URI"" ) ;
return NULL ;
}
host += 3 ;
char * port = strchr ( host , ':' ) ;
if ( ! port ) {
port = ( ssl ) ? ""443"" : ""80"" ;
} else {
* port ++ = 0 ;
}
char * path = strchr ( host , '/' ) ;
if ( ! path ) {
path = """" ;
} else {
* path ++ = 0 ;
}
s = r_socket_new ( ssl ) ;
if ( ! s ) {
printf ( ""Cannot create socket\\n"" ) ;
free ( uri ) ;
return NULL ;
}
if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) {
eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ;
free ( uri ) ;
return NULL ;
}
// Sanitize path and data to prevent OS command injection
char *sanitizedPath = r_str_sanitize_s (path);
char *sanitizedData = r_str_sanitize_s (data);
r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , sanitizedPath , host , ( int ) strlen ( sanitizedData ) ) ;
free ( uri ) ;
r_socket_write ( s , ( void * ) sanitizedData , strlen ( sanitizedData ) ) ;
return r_socket_http_answer ( s , code , rlen ) ;
}",561,-29.330675939595306,-0.052282844812112844
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } char * escapedPath = malloc ( strlen ( path ) * 2 + 1 ) ; if ( ! escapedPath ) { free ( uri ) ; printf ( ""Cannot allocate memory\\n"" ) ; return NULL ; } int i ; for ( i = 0 ; i < strlen ( path ) ; i ++ ) { if ( path [ i ] == '\'' ) { escapedPath [ i * 2 ] = '\\' ; escapedPath [ i * 2 + 1 ] = '\'' ; } else { escapedPath [ i * 2 ] = path [ i ] ; escapedPath [ i * 2 + 1 ] = '\0' ; } } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; free ( escapedPath ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; free ( escapedPath ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , escapedPath , host , ( int ) strlen ( data ) ) ; free ( uri ) ; free ( escapedPath ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",618,-26.093582872237437,-0.042222626006856695
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," 
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } path = r_str_escape ( path ) ; //Added line to escape OS commands s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; char * answer = r_socket_http_answer ( s , code , rlen ) ; free ( path ) ; // Added line to free the path return answer ; }",496,-30.90046477543104,-0.06229932414401419
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) {
	RSocket * s ;
	bool ssl = r_str_startswith ( url , ""https://"" ) ;
	char * uri = strdup ( url ) ;
	if ( ! uri ) {
		return NULL ;
	}
	char * host = strstr ( uri , ""://"" ) ;
	if ( ! host ) {
		free ( uri ) ;
		printf ( ""Invalid URI"" ) ;
		return NULL ;
	}
	host += 3 ;
	char * port = strchr ( host , ':' ) ;
	if ( ! port ) {
		port = ( ssl ) ? ""443"" : ""80"" ;
	} else {
		* port ++ = 0 ;
	}
	char * path = strchr ( host , '/' ) ;
	if ( ! path ) {
		path = """" ;
	} else {
		* path ++ = 0 ;
	}
	s = r_socket_new ( ssl ) ;
	if ( ! s ) {
		printf ( ""Cannot create socket\\n"" ) ;
		free ( uri ) ;
		return NULL ;
	}
	if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) {
		eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ;
		free ( uri ) ;
		return NULL ;
	}
	
	//Validate and neutralize data
	char *validatedData = malloc(strlen(data) * sizeof(char));
	int i;
	for(i = 0; i < strlen(data); i++)
	{
		if(data[i] != ';' && data[i] != '|' && data[i] != '&')
		{
			validatedData[i] = data[i];
		}
		else
		{
			//Replace illegal characters with a space
			validatedData[i] = ' ';
		}
	}

	r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( validatedData ) ) ;
	free ( uri ) ;
	r_socket_write ( s , ( void * ) validatedData , strlen ( validatedData ) ) ;
	
	free(validatedData);

	return r_socket_http_answer ( s , code , rlen ) ;
}",720,-65.93910493272075,-0.09158209018433437
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","

R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } 

// Escape special characters in the data 
char * data_esc = r_str_escape_shell (data); 
if (!data_esc) { 
    free (uri); 
    return NULL; 
} 

s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data_esc ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data_esc , strlen ( data_esc ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",522,-36.580354441923916,-0.0700773073600075
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = r_str_ndup ( url , strlen ( url ) ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; eprintf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { eprintf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } char* escaped_data = r_str_escape ( data ) ; if ( ! escaped_data ) { eprintf ( ""Error escaping data\\n"" ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escaped_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) escaped_data , strlen ( escaped_data ) ) ; free ( escaped_data ) ; return r_socket_http_answer ( s , code , rlen ) ; }",527,-20.239809834372437,-0.03840571126066876
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } char *escapedData = r_str_escaped_arg (data); if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; free (escapedData); return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escapedData ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) escapedData , strlen ( escapedData ) ) ; free (escapedData); return r_socket_http_answer ( s , code , rlen ) ; }",491,-19.35305283018324,-0.03941558621218583
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } char * safe_host = malloc (strlen(host)+1); strcpy (safe_host,host); //sanitize host if ( ! r_socket_connect_tcp ( s , safe_host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , safe_host , port ) ; free ( uri ) ; return NULL ; } free (safe_host); r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",499,-33.38248749803299,-0.06689877254114827
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post(const char *url, const char *data, int *code, int *rlen) {
	RSocket *s;
	bool ssl = r_str_startswith(url, ""https://"");
	char *uri = strdup(url);
	if (!uri) {
		return NULL;
	}
	char *host = strstr(uri, ""://"");
	if (!host) {
		free(uri);
		printf(""Invalid URI"");
		return NULL;
	}
	host += 3;
	char *port = strchr(host, ':');
	if (!port) {
		port = (ssl) ? ""443"" : ""80"";
	} else {
		*port++ = 0;
	}
	char *path = strchr(host, '/');
	if (!path) {
		path = """";
	} else {
		*path++ = 0;
	}
	s = r_socket_new(ssl);
	if (!s) {
		printf(""Cannot create socket\\n"");
		free(uri);
		return NULL;
	}
	if (!r_socket_connect_tcp(s, host, port, 0)) {
		eprintf(""Cannot connect to %s:%s\\n"", host, port);
		free(uri);
		return NULL;
	}
	
	// Escaping the path to prevent command injection
	char *escapedPath = r_str_escape(path);

	r_socket_printf(s, ""POST /%s HTTP/1.0\\r\\n""
						""User-Agent: radare2 "" R2_VERSION ""\\r\\n""
						""Accept: */*\\r\\n""
						""Host: %s\\r\\n""
						""Content-Length: %i\\r\\n""
						""Content-Type: application/x-www-form-urlencoded\\r\\n""
						""\\r\\n"", escapedPath, host, (int)strlen(data));
	free(uri);
	r_socket_write(s, (void *)data, strlen(data));
	return r_socket_http_answer(s, code, rlen);
}",581,-37.04633078003932,-0.06376304781418127
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," 
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } char * safePath = r_str_sanitize_sprintf ( sizeof ( path ), path , NULL ) ; // sanitize to prevent OS command injection s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , safePath , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",495,-35.602503530364515,-0.07192424955629195
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } char * safeData = r_str_escape_latin1 (data); if (!safeData) { printf (""Cannot parse data correctly\n""); free (uri); return; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( safeData ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) safeData , strlen ( safeData ) ) ; free (safeData); return r_socket_http_answer ( s , code , rlen ) ; }",506,-41.51099779598961,-0.08203754505136286
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; r_err_printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { r_err_printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } // sanitize user data by escaping special characters and validating user input char * clean_data = r_str_escape ( data ) ;  if ( ! clean_data ) { free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( clean_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) clean_data , strlen ( clean_data ) ) ; free ( clean_data ) ; return r_socket_http_answer ( s , code , rlen ) ; }",529,-57.79496543038998,-0.10925324277956518
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," 
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } 
//Sanitizing the input to prevent OS command injection 
char* sanitized_data = r_str_sanitize (data);

r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( sanitized_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) sanitized_data , strlen ( sanitized_data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",503,-30.120856977399434,-0.05988241943816985
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } //Added code - use snprintf instead of r_socket_printf to avoid command injection vulnerability char * postCommand; size_t postCommandLen = snprintf(NULL, 0, ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ); // include \0 byte postCommand = malloc(postCommandLen + 1); snprintf(postCommand, postCommandLen + 1, ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ); s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_write ( s , ( void * ) postCommand , strlen ( postCommand ) ) ; free ( postCommand ); free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",652,-67.6264718726899,-0.103721582626825
"The Original Code is vulnerable to CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). Fix the vulnerability.
Original Code: R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:"," R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } path = r_str_escape_sh ( path ) ; // Escape special characters in the path string to prevent command injection 
if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; free ( path ) ; // Free the escaped path string return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; free ( path ) ; // Free the escaped path string r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",507,-36.326537591044485,-0.07164997552474257
