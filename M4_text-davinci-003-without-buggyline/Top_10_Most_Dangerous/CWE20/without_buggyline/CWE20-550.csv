Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 && gso -> u . gso . type != XEN_NETIF_GSO_TYPE_UDPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",286,-8.628987844650066,-0.030171286170105126
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso || !gso->u.gso.size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",264,-8.364389052111905,-0.03168329186406025
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { 
if (gso == NULL || gso->u.gso.size == 0 || !(gso->u.gso.type == XEN_NETIF_GSO_TYPE_TCPV4)) { 
netdev_dbg ( vif -> dev , ""Bad GSO type %d or size must not be zero.\\n"" , gso -> u . gso . type ) ; 
return - EINVAL ; 
}
skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",248,-25.350677488628325,-0.10222047374446905
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( gso -> u . gso . size == 0 || gso -> u . gso . type == 0 ) { netdev_dbg ( vif -> dev , ""Invalid GSO size or type.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",272,-10.471212568212847,-0.03849710503019429
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { 
if (!gso || !gso -> u.gso.size || gso -> u.gso.type != XEN_NETIF_GSO_TYPE_TCPV4) { netdev_dbg ( vif -> dev , ""Improper GSO type %d or size: %d.\\n"" , gso -> u.gso.type , gso -> u.gso.size ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u.gso.size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",246,-29.722478821802756,-0.12082308464147462
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( gso == NULL || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",265,-4.009774941829279,-0.015131226195582183
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:"," 
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",265,-5.592049164186905,-0.021102072317686436
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) {
if ( ! gso || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } 
if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } 

if ( gso -> u . gso . size > 0 && gso -> u . gso . type == XEN_NETIF_GSO_TYPE_TCPV4 ) {
   skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; 
   skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; 
   skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; 
   skb_shinfo ( skb ) -> gso_segs = 0 ; 
   return 0 ;
} else {
   return - EINVAL ;
}
}",340,-24.100713593363484,-0.07088445174518672
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",264,-2.582484619317538,-0.009782138709536129
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { 
//Check if input is valid and if gso size is within a valid range
if ( ! gso -> u . gso . size || gso -> u . gso . size > MAX_GSO_SIZE) { netdev_dbg ( vif -> dev , ""GSO size must be within the valid range.\\n"" ) ; return - EINVAL ; } 
//Check if input is valid and if gso type is TCPV4
if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } 
//Set skb gso size and type
skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; 
return 0 ; 
}",332,-47.30253689826427,-0.14247752077790443
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { 
if ( gso -> u . gso . size == 0 || gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Improper GSO size or type.\\n"" ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",219,-14.971251351576,-0.06836187831769863
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { 

if ( gso == NULL || gso->u.gso.size == 0 ) { 
    netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; 
    return - EINVAL ; 
} 

if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { 
    netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; 
    return - EINVAL ; 
} 

skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; 
skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; 
skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; 
skb_shinfo ( skb ) -> gso_segs = 0 ; 
return 0 ; 
}",301,-14.981399591513805,-0.04977209166615882
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size || gso -> u . gso . size > XEN_NETIF_MAX_GSO_SIZE) { netdev_dbg ( vif -> dev , ""GSO size must not be zero or exceed the maximum allowed size.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",289,-14.44617428729935,-0.049986762239790136
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if (!gso || !gso->u.gso.size || gso->u.gso.type < XEN_NETIF_GSO_TYPE_TCPV4 || gso->u.gso.type >= XEN_NETIF_GSO_TYPE_MAX) { netdev_dbg ( vif -> dev , ""Invalid GSO parameters.\\n"" ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",239,-17.752922188459983,-0.07428000915673633
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { //Validate size and type parameters if ( gso -> u . gso . size <= 0 || gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO size or type.\\n"" ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",223,-18.258624631616264,-0.08187724050052136
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( gso == NULL || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",265,-4.009774941829279,-0.015131226195582183
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { unsigned int gso_types_mask = SKB_GSO_TCPV4 ; 
if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; }
if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } 
if ( gso -> u . gso . type & ~ gso_types_mask ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; }
skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ;
skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ;
skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ;
skb_shinfo ( skb ) -> gso_segs = 0 ;
return 0 ;
}",353,-36.53716837436182,-0.10350472627297966
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( gso -> u . gso . size <= 0 ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero or negative.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } if ( gso -> u . gso . size > 0 ) { skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; } return 0 ; }",279,-11.465667603852992,-0.04109558280950893
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } if ( gso -> u . gso . size > 65535 ) { netdev_dbg ( vif -> dev , ""GSO size must not be greater than 65535.\\n"" ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",311,-10.135233396031467,-0.03258917490685359
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso ) { netdev_dbg ( vif -> dev , ""Invalid GSO info.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . size == 0 ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",297,-10.045109344947583,-0.0338219169863555
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { //Validate input if ( gso -> u . gso . size <= 0 || gso -> u . gso . type < 0 || gso -> u . gso . type > XEN_NETIF_GSO_TYPE_MAX ) { netdev_dbg ( vif -> dev , ""Invalid GSO data.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",297,-17.642435541045664,-0.05940213986884062
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size  || gso -> u . gso . size < 0) { netdev_dbg ( vif -> dev , ""GSO size must not be zero or negative.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",275,-13.45007358728176,-0.048909358499206405
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 || gso->u.gso.type > XEN_NETIF_GSO_TYPE_MAX) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",283,-8.487165499052336,-0.029989984095591296
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size || gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Invalid GSO parameters.\\n"" ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",213,-8.405988959303398,-0.03946473689813802
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",264,-2.5787379931285384,-0.009767946943668705
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) {
 if ( ! gso -> u . gso . size ) {
   netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ;
   return - EINVAL ;
 }
 
 if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 || gso->u.gso.type > XEN_NETIF_GSO_TYPE_MAX) {
   netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ;
   return - EINVAL ;
 }
 
 skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ;
 skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ;
 skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ;
 skb_shinfo ( skb ) -> gso_segs = 0 ;
 return 0 ;
}",305,-19.509103439532385,-0.06396427357223733
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { //Check for valid gso type before setting skb gso 
 if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 && gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV6 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } 
 //Check for valid gso size before setting skb gso 
 if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } 
 skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",320,-29.962786381842236,-0.09363370744325698
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",264,-2.5833678346442386,-0.009785484222137267
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( gso == NULL || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",265,-4.00564869037182,-0.015115655435365359
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { 
if(!gso || !gso->u.gso.size || gso->u.gso.type != XEN_NETIF_GSO_TYPE_TCPV4) { 
netdev_dbg ( vif -> dev , ""Invalid GSO parameters.\\n"" ) ; 
return - EINVAL ; 
} 
skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; 
skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; 
skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; 
skb_shinfo ( skb ) -> gso_segs = 0 ; 
return 0 ; 
}",237,-17.50645409252744,-0.07386689490517907
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( gso -> u . gso . size == 0 || gso -> u . gso . size > XEN_NETIF_MAX_GSO_SIZE ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero or greater than maximum GSO size.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",291,-14.955673502162838,-0.05139406701774171
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",264,-2.5833678346442386,-0.009785484222137267
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { 
if (!gso || !gso -> u . gso.size) {  
netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } 
if (gso->u.gso.type != XEN_NETIF_GSO_TYPE_TCPV4) {
netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } 
if (gso->u.gso.size > 0 && gso->u.gso.type == XEN_NETIF_GSO_TYPE_TCPV4) {
skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; 
} else {
return -EINVAL;
} 
}",330,-36.08630102222568,-0.10935242734007783
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( gso -> u . gso . size < 0 ) { netdev_dbg ( vif -> dev , ""GSO size must not be negative.\\n"" ) ; return - EINVAL ; } if ( gso->u.gso.type < 0 || gso->u.gso.type > XEN_NETIF_GSO_TYPE_MAX ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso->u.gso.size; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",270,-18.19130888182829,-0.06737521808084553
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { 
if ( gso == NULL ) { 
netdev_dbg ( vif -> dev , ""Invalid GSO parameter.\\n"" ) ; 
return - EINVAL ; 
} 
if ( ! gso -> u . gso . size ) { 
netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; 
return - EINVAL ; 
} 
if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) 
{ 
netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; 
return - EINVAL ; 
} 
skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; 
skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; 
skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; 
skb_shinfo ( skb ) -> gso_segs = 0 ; 
return 0 ; 
}",335,-22.425206825749605,-0.06694091589776001
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( gso == NULL || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",265,-3.974675775859282,-0.014998776512676537
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { 
if ( gso == NULL ) { 
netdev_dbg ( vif -> dev , ""No extra info provided.\\n"" ) ; 
return - EINVAL ; 
} 
if ( ! gso -> u . gso . size ) { 
netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; 
return - EINVAL ; 
} 
if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { 
netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; 
return - EINVAL ; 
} 
skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; 
skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; 
skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; 
skb_shinfo ( skb ) -> gso_segs = 0 ; 
return 0 ; 
}",333,-14.789899468507244,-0.04441411251803977
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } // Validate GSO type if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 || gso->u.gso.type != XEN_NETIF_GSO_TYPE_TCPV6 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",292,-18.23742544336711,-0.062456936449887354
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) {
  if ( ! gso || ! gso -> u . gso . size ) {
    netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ;
    return - EINVAL ;
  }
  if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) {
    netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ;
    return - EINVAL ;
  }
 
  if ( gso -> u . gso . size > 0 ) {
    skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ;
    skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ;
    skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ;
    skb_shinfo ( skb ) -> gso_segs = 0 ;
  }
 
  return 0 ;
}",315,-16.449319393137745,-0.05222006156551665
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( gso -> u . gso . size == 0 || gso -> u . gso . size > 65535 ) { netdev_dbg ( vif -> dev , ""Invalid GSO size %d.\\n"" , gso -> u . gso . size ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",283,-10.345595149534399,-0.03655687331990953
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",264,-2.70229527360278,-0.010235966945465075
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 || gso->u.gso.type != XEN_NETIF_GSO_TYPE_TCPV6 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } 

if (gso->u.gso.type == XEN_NETIF_GSO_TYPE_TCPV4){
  skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ;
}

if (gso->u.gso.type == XEN_NETIF_GSO_TYPE_TCPV6){
  skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV6 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ;
}

return 0 ; }",452,-25.30568660672768,-0.0559860323157692
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size || gso -> u . gso . type < 0) { netdev_dbg ( vif -> dev , ""Invalid GSO size (%u) or type (%d).\\n"" , gso -> u . gso . size , gso -> u . gso . type ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",296,-21.112477640739744,-0.07132593797547211
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size || gso -> u . gso . size > 65535 ) { netdev_dbg ( vif -> dev , ""Invalid GSO size.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",270,-6.975530500156532,-0.025835298148727898
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",264,-2.70229527360278,-0.010235966945465075
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",264,-2.596636423908099,-0.009835744029954921
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","

static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { 
if (!gso || !gso->u.gso.size || gso->u.gso.type != XEN_NETIF_GSO_TYPE_TCPV4) {
    netdev_dbg(vif->dev, ""Invalid GSO data.\n"");
    return -EINVAL;
}
skb_shinfo(skb)->gso_size = gso->u.gso.size;
skb_shinfo(skb)->gso_type = SKB_GSO_TCPV4;
skb_shinfo(skb)->gso_type |= SKB_GSO_DODGY;
skb_shinfo(skb)->gso_segs = 0;
return 0;
}",228,-16.645189469918723,-0.07300521697332774
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( gso == NULL || ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",265,-3.974675775859282,-0.014998776512676537
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size || gso -> u . gso . size > MAX_GSO_SIZE ) { netdev_dbg ( vif -> dev , ""GSO size must be between 0 and MAX_GSO_SIZE.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",284,-10.881518675039977,-0.03831520660225344
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }
Fixed code:","
static int netbk_set_skb_gso ( struct xenvif * vif , struct sk_buff * skb , struct xen_netif_extra_info * gso ) { if ( ! gso -> u . gso . size ) { netdev_dbg ( vif -> dev , ""GSO size must not be zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u . gso . type != XEN_NETIF_GSO_TYPE_TCPV4 && gso -> u . gso . type != XEN_NETIF_GSO_TYPE_UDP ) { netdev_dbg ( vif -> dev , ""Bad GSO type %d.\\n"" , gso -> u . gso . type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u . gso . size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ; return 0 ; }",284,-7.694156512110966,-0.027092100394756922
