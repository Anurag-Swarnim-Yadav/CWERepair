Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",642,-2.818915211289488,-0.004390833662444685
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; <StartBug>imap_close_connection ( adata ) ;<EndBug> goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",661,-5.944144645648048,-0.008992654531994021
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; # ifdef USE_SSL  bail : FREE ( & adata -> capstr ) ; imap_close_connection ( adata ) ; return - 1 ; # endif }",742,-11.170411867121004,-0.015054463432777634
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ;<EndBug> } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ;<EndBug> } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ;<EndBug> } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ;<EndBug> } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",723,-9.010686614867872,-0.012462913713510196
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",722,-3.2411154339140023,-0.004489079548357344
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; imap_close_connection ( adata ) ; return - 1 ; }",653,-4.273735366934548,-0.006544770852885984
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) { <StartBug>imap_close_connection ( adata ) ; <EndBug>goto bail ; } if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) { <StartBug>imap_close_connection ( adata ) ; <EndBug>goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) { <StartBug>imap_close_connection ( adata ) ; <EndBug>goto bail ; } FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",808,-7.345259304043743,-0.009090667455499682
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",722,-4.979492247116386,-0.006896803666366185
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ;<EndBug> return - 1 ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) { <StartBug>imap_close_connection ( adata ) ;<EndBug> goto bail ; } elif ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ;<EndBug> return - 1 ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) { <StartBug>imap_close_connection ( adata ) ;<EndBug> goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ;<EndBug> return - 1 ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ;<EndBug> return - 1 ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) { <StartBug>imap_close_connection ( adata ) ;<EndBug> goto bail ; } FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; <StartBug>imap_close_connection ( adata ) ;<EndBug> goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",805,-21.063192950201927,-0.02616545708099618
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",722,-5.467959810847614,-0.007573351538570103
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { <StartBug>imap_close_connection ( adata ) ;<EndBug> return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection(adata); return -1;<EndBug> } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection(adata); return -1;<EndBug> } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection(adata); return -1;<EndBug> } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection(adata); return -1;<EndBug> } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; # ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif bail : FREE ( & adata -> capstr ) ; return - 1 ; }",747,-14.490471324348029,-0.019398221317734977
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",642,-2.7840147480045494,-0.004336471570100545
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug> } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug> } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug> } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug> } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",722,-5.84328844907979,-0.008093197297894445
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) goto bail ; # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) goto bail ; # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",606,-5.214296763333349,-0.008604450104510476
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",722,-3.2411154339140023,-0.004489079548357344
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; imap_close_connection ( adata ) ; return - 1 ; }",653,-4.273735366934548,-0.006544770852885984
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",722,-3.2712755251773493,-0.004530852527946467
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",722,-3.296909894634675,-0.004566357194784869
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," 
int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; return - 1 ; <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }",760,-10.314804372236328,-0.013572111016100431
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : imap_close_connection ( adata ) ; FREE ( & adata -> capstr ) ; return - 1 ; }",654,-8.188440434017137,-0.012520551122350362
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; # ifdef USE_SSL bail : imap_close_connection ( adata ) ; # endif FREE ( & adata -> capstr ) ; return - 1 ; }",741,-6.892587645918352,-0.00930173771378995
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto err_close_conn ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto err_close_conn ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto err_close_conn ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto err_close_conn ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; # ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif bail : FREE ( & adata -> capstr ) ; return - 1 ; }",683,-3.3927133057272463,-0.004967369408092601
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," 
int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ;<EndBug> } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ;<EndBug> } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ;<EndBug> } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ;<EndBug> } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; <StartBug>imap_close_connection ( adata ) ;<EndBug> goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",743,-11.034399314514857,-0.01485114308817612
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto err_close_conn ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto err_close_conn ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto err_close_conn ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto err_close_conn ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto err_close_conn ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto err_close_conn ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto err_close_conn ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto err_close_conn ; } return 0 ; # ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif bail : FREE ( & adata -> capstr ) ; return - 1 ; }",699,-8.97606623670559,-0.012841296475973662
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug> imap_close_connection ( adata ); return-1 ;<EndBug> } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ); return-1 ;<EndBug> } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ); return-1 ;<EndBug> } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ); return-1 ;<EndBug> } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; <StartBug>imap_close_connection ( adata );<EndBug> goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",736,-25.44490718034153,-0.03457188475589882
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) { <StartBug>imap_close_connection ( adata ) ; <EndBug>goto bail ; } if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) { <StartBug>imap_close_connection ( adata ) ;<EndBug> goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) { <StartBug>imap_close_connection ( adata ) ; <EndBug>goto bail ; } FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; <StartBug>imap_close_connection ( adata ) ;<EndBug> goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",806,-14.622422369931481,-0.01814196323812839
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; imap_close_connection ( adata ) ; return - 1 ; }",653,-4.178997218464302,-0.006399689461660493
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:","
int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",743,-8.32023194883024,-0.011198158746743257
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," 
int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",644,-4.951625305506258,-0.007688859170040772
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",722,-5.4921806674464175,-0.007606898431366229
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",642,-2.8787362662833016,-0.004484012875830688
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection(adata); return -1;<EndBug> } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection(adata); return -1;<EndBug> } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection(adata); return -1;<EndBug> } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection(adata); return -1;<EndBug> } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; <StartBug>imap_close_connection(adata); return -1;<EndBug> } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",732,-9.01208564476602,-0.01231159241088254
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:","
int imap_open_connection ( struct ImapAccountData * adata ) { 
if ( mutt_socket_open ( adata -> conn ) < 0 ) 
return - 1 ; 
adata -> state = IMAP_CONNECTED ; 
if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { 
imap_close_connection ( adata ) ; 
return - 1 ; 
} 
if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { 
if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { 
goto bail ; 
} 
# ifdef USE_SSL 
if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { 
enum QuadOption ans ; 
if ( C_SslForceTls ) ans = MUTT_YES ; 
else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { 
mutt_socket_close ( adata -> conn ) ;
return -1;
} 
if ( ans == MUTT_YES ) { 
enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; 
mutt_socket_empty ( adata -> conn ) ; 
if ( rc == IMAP_EXEC_FATAL ) goto bail ; 
if ( rc != IMAP_EXEC_ERROR ) { 
if ( mutt_ssl_starttls ( adata -> conn ) ) { 
mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; 
mutt_socket_close ( adata -> conn ) ;
return -1;
} 
else { 
if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; 
} 
} 
} 
if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { 
mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; 
mutt_socket_close ( adata -> conn ) ;
return -1;
} 
# endif 
} 
else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { 
# ifdef USE_SSL 
if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { 
mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; 
mutt_socket_close ( adata -> conn ) ;
return -1;
} 
# endif 
adata -> state = IMAP_AUTHENTICATED ; 
if ( check_capabilities ( adata ) != 0 ) goto bail ; 
FREE ( & adata -> capstr ) ; 
} 
else { 
imap_error ( ""imap_open_connection()"" , adata -> buf ) ; 
goto bail ; 
} 
return 0 ; 
bail : 
FREE ( & adata -> capstr ) ; 
return - 1 ; 
}",816,-17.324298708237166,-0.02123075822087888
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," 
int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",644,-4.9983579687377855,-0.007761425417294698
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:","
int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug> } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug> } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug> } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug> imap_close_connection ( adata ) ; return - 1 ; <EndBug> } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",723,-6.965782249795077,-0.009634553595843814
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { return - 1 ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; return - 1 ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; return - 1 ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; return - 1 ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",646,-4.990660230396191,-0.007725480232811441
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",722,-3.266787376958377,-0.004524636256175037
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:","
int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",643,-3.8663071362026766,-0.006012919340906185
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",742,-5.921283638526975,-0.007980166628742555
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:","
int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",723,-4.946834578936177,-0.006842094853300383
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) <StartBug>imap_close_connection(adata); <EndBug>return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>return - 1 ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug>goto bail ; } return 0 ; <StartBug>bail : FREE ( & adata -> capstr ) ; <EndBug>return - 1 ; }",768,-20.35694237250734,-0.026506435380868932
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug> } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug> } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug> } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug> } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL if ( adata -> conn -> ssf == 0 ) { imap_close_connection ( adata ) ; return - 1 ; } # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }",768,-17.623201698362376,-0.022946877211409342
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",642,-2.965377192606945,-0.004618967589730444
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ;<EndBug> return - 1 ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug> return - 1 ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug> return - 1 ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; <EndBug> return - 1 ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",722,-8.34810561983586,-0.011562473157667395
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:","
int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug> } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug> } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug> } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug> } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",723,-8.116524856836971,-0.011226175458972297
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) <StartBug>return - 1 ; <EndBug> adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { <StartBug>imap_close_connection ( adata ) ; <EndBug> return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; return - 1 ; }",738,-11.280677124754156,-0.01528547035874547
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:","
int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>imap_close_connection ( adata ) ; return - 1 ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }",738,-6.743046991770989,-0.00913692004305012
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto err_close_conn ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto err_close_conn ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto err_close_conn ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto err_close_conn ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; # ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif bail : FREE ( & adata -> capstr ) ; return - 1 ; }",683,-3.4624008689118475,-0.005069400979373129
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) goto bail ; # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) goto bail ; # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; imap_close_connection ( adata ) ; return - 1 ; }",617,-6.4889430725265775,-0.010516925563252151
"The Original Code is vulnerable to CWE-755: Improper Handling of Exceptional Conditions and CWE-287: Improper Authentication. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { <StartBug>goto err_close_conn ; <EndBug>} if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; <StartBug>goto err_close_conn ; <EndBug>} # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; <StartBug># ifdef USE_SSL err_close_conn : imap_close_connection ( adata ) ; # endif <EndBug>bail : FREE ( & adata -> capstr ) ; return - 1 ; }
Fixed code:"," int imap_open_connection ( struct ImapAccountData * adata ) { if ( mutt_socket_open ( adata -> conn ) < 0 ) return - 1 ; adata -> state = IMAP_CONNECTED ; if ( imap_cmd_step ( adata ) != IMAP_RES_OK ) { imap_close_connection ( adata ) ; return - 1 ; } if ( mutt_istr_startswith ( adata -> buf , ""* OK"" ) ) { if ( ! mutt_istr_startswith ( adata -> buf , ""* OK [CAPABILITY"" ) && check_capabilities ( adata ) ) { goto bail ; } # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && ( C_SslForceTls || ( adata -> capabilities & IMAP_CAP_STARTTLS ) ) ) { enum QuadOption ans ; if ( C_SslForceTls ) ans = MUTT_YES ; else if ( ( ans = query_quadoption ( C_SslStarttls , _ ( ""Secure connection with TLS?"" ) ) ) == MUTT_ABORT ) { goto bail ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc != IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could not negotiate TLS connection"" ) ) ; goto bail ; } else { if ( imap_exec ( adata , ""CAPABILITY"" , IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif } else if ( mutt_istr_startswith ( adata -> buf , ""* PREAUTH"" ) ) { # ifdef USE_SSL if ( ( adata -> conn -> ssf == 0 ) && C_SslForceTls ) { mutt_error ( _ ( ""Encrypted connection unavailable"" ) ) ; goto bail ; } # endif adata -> state = IMAP_AUTHENTICATED ; if ( check_capabilities ( adata ) != 0 ) goto bail ; FREE ( & adata -> capstr ) ; } else { imap_error ( ""imap_open_connection()"" , adata -> buf ) ; goto bail ; } return 0 ; bail : FREE ( & adata -> capstr ) ; imap_close_connection ( adata ) ; return - 1 ; }",653,-4.233097188215005,-0.006482537807373668
