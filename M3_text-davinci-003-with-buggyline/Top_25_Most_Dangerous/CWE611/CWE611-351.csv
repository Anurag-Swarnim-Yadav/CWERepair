Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else if (p1 != NULL) { return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;}<EndBug> return NULL ; }",205,-9.6301557212655,-0.04697636937202682
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { char *escapedP1; apr_xml_quote_string(cmd->pool, escapedP1, p1, 0); return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , escapedP1 ) ;<EndBug> return NULL ; }",226,-16.6242415509625,-0.07355859093346238
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:","
static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_pstrdup(cmd->pool, ""ModSecurity: Invalid value for SecRuleEngine"") ;<EndBug> return NULL ; }",192,-7.0146783032494,-0.036534782829423955
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , apr_xml_quote_string ( cmd -> pool , p1 , 0 ) ) ;<EndBug> return NULL ; }",211,-6.083770056516498,-0.02883303344320615
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else if ( !strcasecmp ( p1 , ""XML"" ) ) { return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ; }<EndBug> return NULL ; }",214,-15.903998801110708,-0.07431775140705939
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:","
static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } else { return NULL; } <StartBug>apr_psprintf_escape (cmd->pool, ""ModSecurity: Invalid value for SecRuleEngine: %s"", p1);<EndBug> return NULL ; }",202,-16.842860695421404,-0.08338049849218516
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { apr_xml_quote_string ( cmd -> pool , p1 , 0 ) ; return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ; }<EndBug> return NULL ; }",216,-5.005338915401998,-0.023172865349083322
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:","
static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else{ dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;}<EndBug> return NULL ; }",229,-12.432910189114002,-0.05429218423193888
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } else { char * escaped_p1 = apr_xml_quote_string(cmd->pool, p1, 0) ; return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , escaped_p1 ) ; } return NULL ; }",217,-13.602278291178305,-0.06268331009759587
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } else { return ""ModSecurity: Invalid value for SecRuleEngine"" ; } return NULL ; }",174,-6.338067584365599,-0.03642567577221609
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:","
static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else if(ap_check_cmd_context(cmd, GLOBAL_ONLY) != 0) return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }",219,-15.784131840401704,-0.07207366137169728
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_pstrdup(cmd->pool, ""ModSecurity: Invalid value for SecRuleEngine"");<EndBug> return NULL ; }",190,-5.0949242361906,-0.026815390716792634
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; }<StartBug> else { return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , apr_pstrcat(cmd -> pool, """", p1, """", NULL)); }<EndBug> return NULL ; }",213,-17.9892325098537,-0.08445649065659014
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } else { xmlChar * input_string = xmlEncodeEntitiesReentrant(NULL, (const xmlChar *) p1); char * output_string = (char *) input_string; return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , output_string ) ; } return NULL ; }",230,-28.40397864731461,-0.12349555933615047
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { apr_size_t p1_len = strlen(p1); char *escaped_p1 = (char *)apr_palloc(cmd->pool, p1_len * 2 + 1); char *ptr = escaped_p1; const char *p1_ptr = p1; while(*p1_ptr) { if(*p1_ptr == '&') { *ptr++ = '&'; *ptr++ = 'a'; *ptr++ = 'm'; *ptr++ = 'p'; *ptr++ = ';'; } else { *ptr++ = *p1_ptr; } p1_ptr++; } *ptr = '\0'; return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , escaped_p1 ) ; }<EndBug> return NULL ; }",347,-40.23124772341468,-0.11594019516834203
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:","
static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , apr_xml_quote_string ( cmd -> pool , p1 , 0 ) ) ;<EndBug> return NULL ; }",212,-7.6335946168474,-0.036007521777582076
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," 
static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } else { const char * escaped_p1 = ap_escape_html(cmd->pool, p1); return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , escaped_p1 ) ; } return NULL ; }",215,-13.686798193364599,-0.06365952648076557
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { apr_xml_parse_quote_string(cmd->pool, p1); return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ; }<EndBug> return NULL ; }",215,-16.069398217584002,-0.07474138705853024
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else if ( !strcasecmp ( p1 , ""&#x"" ) ) { return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ; }<EndBug> return NULL ; }",215,-19.881445194842705,-0.09247183811554746
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else if ( apr_strnatcmp ( p1 , """" ) != 0 ) return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , apr_xml_quote_string ( cmd -> pool , p1 , 0 ) ) ;<EndBug> return NULL ; }",227,-9.35720415031655,-0.04122116365778216
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug> else { const char *safe_p1 = apr_xml_quote_string(cmd->pool, p1, 1); return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , safe_p1 ) ; }<EndBug> return NULL ; }",225,-14.8991916485904,-0.06621862954929067
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { /* Removing the function call that concatenates the string with user input. */ return ""ModSecurity: Invalid value for SecRuleEngine"" ; }<EndBug> return NULL ; }",199,-36.87891538515999,-0.18532118283999996
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; }  <StartBug>else if ( ap_strstr_c(p1, "".xml"") != NULL ){ return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;}<EndBug> return NULL ; }",217,-20.515341154292706,-0.09454074264651016
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , apr_xml_quote_string ( cmd -> pool , p1 , 0 ) ) ; }<EndBug> return NULL ; }",213,-6.6963208389158995,-0.031438126004299995
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:","
static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { const char * sanitized = apr_xml_quote_string(cmd->pool, p1, 0); return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , sanitized ) ; }<EndBug> return NULL ; }",222,-14.397687553796006,-0.06485444844052254
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { char *clean_p1 = apr_pstrdup(cmd->pool, apr_xml_quote_string(cmd->pool, p1, 0)); return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , clean_p1 ) ; }<EndBug> return NULL ; }",235,-12.661185401553627,-0.05387738468746225
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else if (!ap_rfc1867_escape_test(cmd->pool, p1)) { return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ; }<EndBug> return NULL ; }",218,-23.274407786189705,-0.10676333846876011
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return ""ModSecurity: Invalid value for SecRuleEngine"" ;<EndBug> return NULL ; }",180,-4.877713140521999,-0.02709840633623333
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , apr_xml_quote_string ( cmd -> pool , p1 , 0 ) ) ;<EndBug> return NULL ; }",211,-6.122020540499304,-0.029014315357816605
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else if ( apr_xml_is_xml(p1)) return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }",209,-10.867128315635998,-0.05199582926141626
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } 
<StartBug>else { return apr_pstrdup( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine"" ); }<EndBug> 
return NULL ; }",197,-16.0102618639607,-0.08127036479167868
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { apr_xml_quote_string ( cmd -> pool , p1 , 1 ) ; return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ; }<EndBug> return NULL ; }",216,-6.419301538965499,-0.029718988606321755
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { const char * escaped = apr_xml_quote_string ( cmd -> pool , p1 , 0 ) ; return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , escaped ) ; }<EndBug> return NULL ; }",220,-8.5483431644917,-0.03885610529314409
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," 
static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , ap_escape_html(cmd->pool, p1) ) ;<EndBug> return NULL ; }",209,-10.356579437572503,-0.04955301166302633
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ;  if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else if ( apr_strnatcasecmp ( p1 , """") == 0)<EndBug> return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ; return NULL ; }",214,-20.397884614983408,-0.09531721782702526
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , apr_pescape_xml ( cmd -> pool , p1 ) ) ; return NULL ; }",200,-7.669559506349998,-0.03834779753174999
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , apr_xml_quote_string ( cmd -> pool , p1 , 0 ) ) ; } return NULL ; }",205,-6.922335801050901,-0.03376749171244342
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug> else { const char * escaped_p1 = ap_escape_logitem ( cmd -> pool , p1 ) ; return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , escaped_p1 ) ; }<EndBug> return NULL ; }",223,-11.970433225138997,-0.053679072758470836
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { return apr_pstrdup( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine"" ) ; }<EndBug> return NULL ; }",194,-9.949464915954698,-0.05128590162863246
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else{ apr_xml_quote_string ( cmd->pool, p1, 0); return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;}<EndBug> return NULL ; }",215,-12.152370863143299,-0.05652265517741069
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } else <StartBug>return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , apr_pstrcat(cmd->pool,p1,NULL) ) ;<EndBug> return NULL ; }",209,-12.797847219392702,-0.06123371875307513
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { char * escaped_p1 = apr_xml_quote_string ( cmd -> pool , p1 , 0 ) ; return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , escaped_p1 ) ; }<EndBug> return NULL ; }",225,-7.641281319481901,-0.03396125030880845
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:","
static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; 
if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else if ( ap_is_xml ( p1 ) ) return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }",211,-19.450813204563996,-0.09218394883679619
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { apr_xml_quote_string ( cmd -> pool , p1 , 1 ) ; return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;}<EndBug> return NULL ; }",216,-9.5599521883804,-0.04425903790916852
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { apr_text_header_t * txt = apr_text_make ( cmd -> pool , NULL ) ; apr_text_append ( cmd -> pool , txt , ""ModSecurity: Invalid value for SecRuleEngine: "" ) ; apr_text_append ( cmd -> pool , txt , p1 ) ; return apr_text_printf ( cmd -> pool , ""%s"" , txt -> first ) ; }<EndBug> return NULL ; }",258,-21.492509250964904,-0.08330429942234459
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else if ( cmd -> server -> pstrdup ) return cmd -> server -> pstrdup ( cmd -> pool , apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ) ;<EndBug> return NULL ; }",221,-18.733394532183,-0.08476649109585067
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { p1 = apr_psprintf(cmd->pool, ""%s"", ap_escape_html(cmd->pool, p1)); return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ; }<EndBug> return NULL ; }",226,-12.228582553929554,-0.05410877236252015
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { char * escaped_p1 = apr_xml_quote_string ( cmd -> pool , p1 , 0 ) ; return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , escaped_p1 ) ; }<EndBug> return NULL ; }",225,-7.641281319481901,-0.03396125030880845
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else { //Changed return to print static string return ""ModSecurity: Invalid value for SecRuleEngine"" ; } <EndBug> return NULL ; }",189,-27.838246249575505,-0.1472923081988122
"The Original Code is vulnerable to CWE-611: Improper Restriction of XML External Entity Reference. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }
Fixed code:"," static const char * cmd_hash_engine ( cmd_parms * cmd , void * _dcfg , const char * p1 ) { directory_config * dcfg = ( directory_config * ) _dcfg ; if ( dcfg == NULL ) return NULL ; if ( strcasecmp ( p1 , ""on"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else if ( strcasecmp ( p1 , ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } <StartBug>else if ( apr_xml_is_xml(p1) == 1 ) return apr_psprintf ( cmd -> pool , ""ModSecurity: Invalid value for SecRuleEngine: %s"" , p1 ) ;<EndBug> return NULL ; }",212,-12.443333519100499,-0.058694969429719336
