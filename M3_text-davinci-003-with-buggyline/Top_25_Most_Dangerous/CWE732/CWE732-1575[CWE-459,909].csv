Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memset(keybuf, 0, sizeof(keybuf)); // fix CWE-909 memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; // fix CWE-459 } else { env -> count ++ ; } } } return env ; }",301,-16.162169763032207,-0.05369491615625318
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) { err ( 1 , NULL ) ; } else { <StartBug>memset ( env , 0 , sizeof ( * env ) ) ; RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",293,-15.358866618069928,-0.05241933999341272
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * createenv ( const struct rule * rule ) {
 struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; <StartBug>node = calloc(1, sizeof(struct envnode)); node->key = strdup(keybuf); node->value = strdup(eq+1); <EndBug> if ( RB_INSERT ( envtree , & env -> root , node ) ) { <StartBug> free(node->key); free(node->value); free(node); <EndBug> } else { env -> count ++ ; } } } return env ; }",316,-26.12817098013204,-0.08268408538016468
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>memset(env, 0, sizeof(struct env)); RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",287,-6.950834619737207,-0.024218935957272498
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env->count = 0 ; RB_INIT(&env->root); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",284,-11.332150609055953,-0.039901938764281525
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," 

static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) { err ( 1 , NULL ) ; return NULL; } <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } else { // If the KEEPENV option is not set, initialize the env->root tree to NULL RB_INIT(&env->root); } return env ; }",315,-32.5867150778405,-0.10344988913600159
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","

static struct env * createenv ( const struct rule * rule ) { struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env->count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; <StartBug> if ( len > sizeof ( keybuf ) - 1 ) continue ; memset ( keybuf , 0 , sizeof ( keybuf ) ) ; <EndBug> memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",292,-16.962394776457035,-0.05809039307005834
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," 
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = calloc ( 1,sizeof ( * env ) ); if ( ! env ) { err ( 1 , NULL ) ; return NULL; } <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",284,-20.410208496563797,-0.07186693132592886
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; <StartBug>env = NULL;<EndBug> env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } <StartBug>free(env);<EndBug> return env ; }",299,-7.15596792208615,-0.023933003083900166
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>env->count = 0; RB_INIT ( & env -> root ) ;<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",275,-9.74703913062348,-0.03544377865681265
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = calloc ( 1, sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",272,-6.029835318239487,-0.02216851219940988
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>env -> count = 0 ; RB_INIT ( & env -> root ) ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",276,-7.529210023949603,-0.027279746463585518
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","

static struct env * createenv ( const struct rule * rule ) { struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug> RB_INIT ( & env -> root ) ; env->count = 0; <EndBug> if (rule->options & KEEPENV) { extern char ** environ; for (i = 0; environ[i] != NULL; i++) { struct envnode * node; const char * e, * eq; size_t len; char keybuf[1024]; e = environ[i]; if ((eq = strchr(e, '=')) == NULL || eq == e) continue; len = eq - e; if (len > sizeof(keybuf) - 1) continue; memcpy(keybuf, e, len); keybuf[len] = '\\0'; node = createnode(keybuf, eq + 1); if (RB_INSERT(envtree, &env->root, node)) { freenode(node); } else { env->count++; } } } <StartBug> memset(keybuf, 0, sizeof(keybuf)); <EndBug> return env; }",278,-26.818385169891883,-0.09646901140248879
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," 
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; memset(env, 0, sizeof(*env)); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",288,-8.868114769245047,-0.030792065170989744
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env *createenv ( const struct rule * rule ) { struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env->count = 0 ; env->rule = rule;<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } <StartBug>if ( env->rule->options & KEEPENV ) { memset ( keybuf , 0 , sizeof ( keybuf ) ) ; memset ( valuebuf , 0 , sizeof ( valuebuf ) ) ; }<EndBug> return env ; }",326,-34.56249442070041,-0.10601992153589083
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * createenv ( const struct rule * rule ) { struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ;<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memset(keybuf, 0, sizeof(keybuf)); // Added Line <StartBug> memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; <EndBug> node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",291,-17.315303700252798,-0.05950276185653883
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * createenv ( const struct rule * rule ) { 
	struct env * env ; 
	u_int i ; 
	env = malloc ( sizeof ( * env ) ) ; 
	if ( ! env ) err ( 1 , NULL ) ; 
	<StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; 
	if ( rule -> options & KEEPENV ) { 
		extern char * * environ ; 
		for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { 
			struct envnode * node ; 
			const char * e , * eq ; 
			size_t len ; 
			char keybuf [ 1024 ] ; 
			e = environ [ i ] ; 
			if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; 
			len = eq - e ; 
			if ( len > sizeof ( keybuf ) - 1 ) continue ; 
			memcpy ( keybuf , e , len ) ; 
			keybuf [ len ] = '\\0' ; 
			node = <StartBug>calloc(1,sizeof(*node))<EndBug>; 
			if ( node == NULL ) err ( 1 , NULL ) ; 
			<StartBug>node->key = strdup(keybuf);<EndBug> 
			node->value = strdup(eq + 1); 
			if ( node->key == NULL || node->value == NULL ) err ( 1 , NULL ) ; 
			if ( RB_INSERT ( envtree , & env -> root , node ) ) { 
				freenode ( node ) ; 
			} else { 
				env -> count ++ ; 
			} 
		}
	} 
	return env ;
}",474,-41.168502710315195,-0.0868533812453907
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; <StartBug>env = calloc ( 1, sizeof ( * env ) );  
if ( ! env ) err ( 1 , NULL ) ; 
RB_INIT ( & env -> root ) ; env -> count = 0 ; 
<EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",282,-22.201606696367296,-0.07872910176016772
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env->count = 0; memset(env->keybuf, 0, sizeof env->keybuf); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; <StartBug>char keybuf [ 1024 ] ; <EndBug>e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( env->keybuf ) - 1 ) continue ; memcpy ( env->keybuf , e , len ) ; env->keybuf [ len ] = '\\0' ; node = createnode ( env->keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",307,-15.027189153945793,-0.0489484988727876
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env->environ = calloc(1024, sizeof(char*)); env->envi = 0; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; env->environ[env->envi] = strdup(e); env->envi++; } } } return env ; }",320,-28.213371387370902,-0.08816678558553406
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env->keybuf = calloc (1024, sizeof(char)); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; <StartBug> if(env->keybuf==NULL) err(1,NULL); <EndBug> e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( env->keybuf ) - 1 ) continue ; memcpy ( env->keybuf , e , len ) ; env->keybuf [ len ] = '\\0' ; node = createnode ( env->keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",314,-24.364244474547636,-0.07759313526925998
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," 
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } <StartBug> free(env); <EndBug> return env ; }",289,-15.070411423967807,-0.05214675233206854
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * createenv ( const struct rule * rule ) { struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env->count = 0;<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] = {0}; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",271,-12.389953415000441,-0.04571938529520458
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; memset(env, 0, sizeof(*env)); <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",286,-9.291741429698822,-0.03248860639754833
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env-> root = NULL; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",281,-10.32351957056385,-0.03673850380983577
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = calloc ( 1, sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; RB_INIT ( & env -> root ) ; <StartBug>env->count = 0;<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",278,-8.375067760921281,-0.030126143024896693
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env->count = 0; <EndBug>memset(env, 0, sizeof(*env)); if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",286,-9.822072050810487,-0.03434290926856814
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>env->count = 0; RB_INIT ( & env -> root ) ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",276,-7.4674734572166015,-0.027056063250784787
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env -> initialized = 1; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } <StartBug>if(env->initialized == 0) { free(env); return NULL; }<EndBug> return env ; }",307,-16.908127663537453,-0.055075334408916786
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," 

static struct env * <StartBug>createenv ( const struct rule * rule ) { <EndBug>struct env * env ; u_int i ; env = calloc ( 1, sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; RB_INIT ( & env -> root ) ; <StartBug>env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",280,-19.85983721331273,-0.07092799004754546
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node = NULL ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] = {0}; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",280,-13.72859763851503,-0.04903070585183939
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug> env->count = 0; RB_INIT ( & env -> root ) ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",275,-7.805598180106385,-0.028383993382205035
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * createenv ( const struct rule * rule ) { struct env * env ; u_int i ; <StartBug>env = calloc ( 1 , sizeof ( * env ) ) ;<EndBug> if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ;<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",277,-8.291387475353753,-0.029932806770230157
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env->count = 0; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { <StartBug>freenode ( node ) ;<EndBug> } else { env -> count ++ ; } } } <StartBug>else{env->count=0;<EndBug>} return env ; }",300,-21.231541339202803,-0.07077180446400934
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memset(keybuf, 0, sizeof(keybuf)); // Initialization of Resource memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } free(env); // Cleanup of Resource return env ; }",303,-14.852884651224006,-0.04901942129116833
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," 
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>env->root = NULL; RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } <StartBug>free(env);<EndBug> return env ; }",295,-13.634028520058356,-0.046217045830706294
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","

static struct env * createenv ( const struct rule * rule ) { struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env->count = 0; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = <StartBug>createnode ( keybuf , eq + 1 )<EndBug> ; <StartBug>if ( node == NULL ) {  free(env);  err(1, NULL); } <EndBug> if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",305,-34.15829230511343,-0.11199440100037189
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env->count = 0 ; memset(env, 0, sizeof(env)); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",286,-10.275561302431699,-0.03592853602248846
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * createenv ( const struct rule * rule ) { struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env -> node = NULL;<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; <StartBug>if (env->node == NULL){ env->node = node; }<EndBug> if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",296,-18.678061933452693,-0.06310156058598883
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," 
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ 
    struct env * env = NULL; 
    u_int i ; 
    env = malloc ( sizeof ( * env ) ) ; 
    if ( ! env ) err ( 1 , NULL ) ; 
    <StartBug>RB_INIT ( & env -> root ) ; 
    env -> count = 0 ; 
    memset(&env->root, 0, sizeof(env->root)); <EndBug>
    if ( rule -> options & KEEPENV ) { 
        extern char * * environ ; 
        for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { 
            struct envnode * node ; 
            const char * e , * eq ; 
            size_t len ; 
            char keybuf [ 1024 ] ; 
            e = environ [ i ] ; 
            if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; 
            len = eq - e ; 
            if ( len > sizeof ( keybuf ) - 1 ) continue ; 
            memcpy ( keybuf , e , len ) ; 
            keybuf [ len ] = '\\0' ; 
            node = createnode ( keybuf , eq + 1 ) ; 
            if ( RB_INSERT ( envtree , & env -> root , node ) ) { 
                freenode ( node ) ; 
            } else { 
                env -> count ++ ; 
            } 
        } 
    } 
    return env ; 
}",382,-20.192705157020672,-0.052860484704242594
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env *createenv ( const struct rule * rule ) { 
	struct env * env ; 
	u_int i ; 
	env = malloc ( sizeof ( * env ) ) ; 
	if ( ! env ) err ( 1 , NULL ) ; 
	<StartBug>RB_INIT ( & env -> root ) ; 
	env -> count = 0 ; 
	env -> rule = rule ; 
	<EndBug>if ( rule -> options & KEEPENV ) { 
		extern char * * environ ; 
		for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { 
			struct envnode * node ; 
			const char * e , * eq ; 
			size_t len ; 
			char keybuf [ 1024 ] ; 
			e = environ [ i ] ; 
			if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; 
			len = eq - e ; 
			if ( len > sizeof ( keybuf ) - 1 ) continue ; 
			memcpy ( keybuf , e , len ) ; 
			keybuf [ len ] = '\\0' ; 
			node = createnode ( keybuf , eq + 1 ) ; 
			if ( RB_INSERT ( envtree , & env -> root , node ) ) { 
				freenode ( node ) ; 
			} else { 
				env -> count ++ ; 
			} 
		} 
	} 
	return env ; 
}",399,-20.67756056948449,-0.05182346007389597
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = calloc ( 1, sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",272,-6.008228665684583,-0.022089075976781555
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug> RB_INIT ( & env -> root ) ; env -> count = 0 ; env->environ = NULL; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; env->environ = malloc(sizeof(char *) * (i + 1)); for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } env->environ[i] = malloc(strlen(environ[i]) + 1); strcpy(env->environ[i], environ[i]); } env->environ[i] = NULL; } return env ; }",349,-22.880186658728757,-0.06555927409377868
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = calloc ( 1, sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env-> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",278,-8.35585102881193,-0.03005701808925155
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = calloc ( 1, sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env->count = 0;<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",278,-16.739245270374628,-0.06021311248336197
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env -> environ = NULL;<EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; env -> environ = environ; } } } return env ; }",291,-12.713923509591893,-0.04369045879584843
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; <StartBug>if ( env ) { RB_INIT ( & env -> root ) ; env -> count = 0 ; }<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } if (!env) { err ( 1 , NULL ) ; } return env ; }",282,-12.250811529227647,-0.04344259407527534
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = calloc ( 1 , sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ;<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",271,-7.808778354707159,-0.028814680275672175
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; <StartBug>env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } <StartBug>free ( env ) ;<EndBug> return env ; }",288,-9.094087700505996,-0.03157669340453471
"The Original Code is vulnerable to CWE-459: Incomplete Cleanup and CWE-909: Missing Initialization of Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; <StartBug>env = calloc (1, sizeof ( * env ) ) ;<EndBug> if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",285,-10.9932864572056,-0.03857293493756351
