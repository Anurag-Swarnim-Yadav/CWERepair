Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," 
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { <StartBug>if(node->key) free(node->key); if(node->value) free(node->value); free(node);<EndBug> } else { env -> count ++ ; } } } return env ; }",306,-17.16980686625649,-0.05611047995508657
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; umask(077); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } umask(022); return env ; }",287,-8.155385421452097,-0.028415977078230303
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; chmod(env->root, S_IRUSR | S_IWUSR); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",295,-10.911951569997955,-0.036989666338976115
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; RB_INIT ( & env -> root ) ; env -> count = 0 ;<StartBug> int result = umask(077); <EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; <StartBug> if (chmod(node, 0600) != 0) { err(1, NULL); } <EndBug> if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } <StartBug> umask(result); <EndBug> return env ; }",327,-37.7158283406979,-0.11533892458929021
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> mode = S_IRUSR | S_IWUSR; env->count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; node->mode = S_IRUSR | S_IWUSR; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",309,-14.17752074096445,-0.04588194414551602
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; RB_INIT ( & env -> root ) ; <StartBug>env -> count = 0 ;<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; <StartBug>if ( access ( node , W_OK ) != 0 ) {<EndBug>    
    if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } <StartBug>}<EndBug> } return env ; }",310,-36.11530758676263,-0.11650099221536334
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <StartBug> /* Set permissions to secure defaults */ chmod(env, S_IRWXU | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } <StartBug> /* Set permissions to secure defaults */ chmod(env, S_IRWXU | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH); <EndBug>return env ; }",370,-29.942606179167665,-0.08092596264639909
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; umask(0007); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } umask(0022); return env ; }",288,-10.311303492356444,-0.03580313712623765
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { 
		extern char * * environ ; 
	
		for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { 
			struct envnode * node ; 
			const char * e , * eq ; 
			size_t len ; 
			char keybuf [ 1024 ] ; 
			e = environ [ i ] ; 
			
			if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; 
			len = eq - e ; 
			
			if ( len > sizeof ( keybuf ) - 1 ) continue ; 
			
			memcpy ( keybuf , e , len ) ; 
			keybuf [ len ] = '\\0' ; 
			
			if (RB_FIND(envtree, &env->root, keybuf)) {
				continue;
			}
			
			node = createnode ( keybuf , eq + 1 ) ; 
			if ( RB_INSERT ( envtree , & env -> root , node ) ) { 
				freenode ( node ) ; 
			} else { 
				env -> count ++ ; 
			} 
		} 
	} 
	
	return env ; 
}",436,-38.61993059687549,-0.08857782246989791
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," 
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; chmod(env, 0600); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",285,-10.1405323712841,-0.03558081533783895
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; <StartBug>if ( check_permissions(rule->options) == 0 ){ <EndBug> memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } <StartBug>} <EndBug>} } return env ; }",307,-25.992506658778947,-0.08466614546833533
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env->mode = 0660;<EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; setenv(keybuf, node->value, 1); //Create new environment variable  } } } return env ; }",301,-40.81138580078575,-0.13558599933815862
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env -> mode = umask(0700); umask(env->mode);<EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",293,-15.948172466089847,-0.05443062275115989
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," 
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; chmod(rule, 0600) <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",285,-14.9084642625413,-0.05231040092119754
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; setenv(""Permission"",""rw-r--r--"",1);<EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",291,-22.262082817373336,-0.07650200280884308
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env -> permission = 0666;<EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; set_permission(env->permission); //Added Line } } } return env ; }",295,-31.431574823283853,-0.106547711265369
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; setenv(""status"", 0, 0); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } setenv(""status"", 1, 0); return env ; }",293,-22.52268978409739,-0.07686924840988871
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; umask(077); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } umask(000); return env ; }",287,-9.773374967608296,-0.034053571315708346
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>env->permission = rule->options; RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",285,-14.965187687342546,-0.05250943048190367
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env -> mode |= 0600;<EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",283,-12.973138206291951,-0.04584147776074894
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; 
if ( rule -> options & KEEPENV ) { 
extern char * * environ ; 
for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { 
struct envnode * node ; 
const char * e , * eq ; 
size_t len ; 
char keybuf [ 1024 ] ; 
e = environ [ i ] ; 
if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; 
len = eq - e ; 
if ( len > sizeof ( keybuf ) - 1 ) continue ; 
memcpy ( keybuf , e , len ) ; 
keybuf [ len ] = '\\0' ; 
node = createnode ( keybuf , eq + 1 ) ; 
//Add check to verify that the permission assignment is correct
if (access(node, R_OK | W_OK) != 0)
{
	fprintf(stderr, ""Permission denied for %s\n"", node);
	free(node);
	continue;
}

if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } 
} 
} 
return env ; 
}",376,-55.81788454739636,-0.14845182060477755
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0; env -> permissions = 0; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; env -> permissions = 0600; //Add permissions to the critical resource } } } return env ; }",295,-26.061309928467594,-0.08834342348633083
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; }  <StartBug>else if (checkAccessPermission(keybuf) == true) {<EndBug> env -> count ++ ; } } } return env ; }",297,-26.1605070002374,-0.08808251515231447
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; umask(S_IRWXO | S_IRWXG); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",293,-11.59532926823525,-0.03957450262196331
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = calloc ( 1 , sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 , 0 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",279,-13.90829166065555,-0.04985050774428513
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; umask(S_IRWXG | S_IRWXO); <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",292,-8.258842888439247,-0.028283708522052215
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else 
{
    if(!(strcmp(keybuf,""HOME"") == 0 || strcmp(keybuf,""PATH"") == 0)){
        env->count ++ ;
    }
} } } return env ; }",312,-43.78450081444686,-0.14033493850784248
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char **environ; for (i = 0; environ[i] != NULL; i++) { struct envnode *node; const char *e, *eq; size_t len; char keybuf[1024]; e = environ[i]; if ((eq = strchr(e, '=')) == NULL || eq == e) continue; len = eq - e; if (len > sizeof(keybuf) - 1) continue; memcpy(keybuf, e, len); keybuf[len] = '\\0'; node = createnode(keybuf, eq + 1); if (RB_INSERT(envtree, &env->root, node)) { freenode(node); } else { if(node->value != NULL) { env->count++; } } } } return env; }",273,-20.959040450772726,-0.07677304194422244
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; if(node->perms > 0) { node->perms = 0; } } } } return env ; }",289,-24.50535698200294,-0.08479362277509668
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env -> umask = 0; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; // Set the permission to only allow user to access this env node env->umask = 0777; } } } return env ; }",303,-41.4993309585315,-0.13696148831198515
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env -> rule = rule ;<EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } // Check the rule and assign the correct permission for node if (rule->options & READ_ONLY) node->permission = READ_ONLY; else if (rule->options & WRITE_ONLY) node->permission = WRITE_ONLY; else if (rule->options & READ_WRITE) node->permission = READ_WRITE; } } return env ; }",357,-42.44043622507126,-0.11888077373969541
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env -> umask = umask(077); umask(env->umask);<EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",294,-9.36685214624974,-0.03186004131377462
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","

static struct env * createenv ( const struct rule * rule ) { 
   struct env * env ; 
   u_int i ; 

   env = malloc ( sizeof ( * env ) ) ; 
   if ( ! env ) err ( 1 , NULL ) ; 
   RB_INIT ( & env -> root ) ; 
   env -> count = 0 ; 

   if ( rule -> options & KEEPENV ) { 
      extern char * * environ ; 
      for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { 
           struct envnode * node ; 
           const char * e , * eq ; 
           size_t len ; 
           char keybuf [ 1024 ] ; 
           
           e = environ [ i ] ; 
           if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; 
           len = eq - e ; 
           if ( len > sizeof ( keybuf ) - 1 ) continue ; 
           memcpy ( keybuf , e , len ) ; 
           keybuf [ len ] = '\\0' ; 
           node = createnode ( keybuf , eq + 1 ) ; 
           
           // Adding check for permission privilege
           if (checkPermission(keybuf) == 0) {
            if ( RB_INSERT ( envtree , & env -> root , node ) ) { 
               freenode ( node ) ; 
            } else { 
               env -> count ++ ; 
            } 
           }
      } 
   } 
   return env ; 
} 

// Adding function to check permission privilege
int checkPermission(char *keybuf) {
    int permission = 0;
    // Logic to check the permission
    return permission;
}",421,-85.85846059470397,-0.20393933632946312
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; chmod(keybuf, 00600); } } } return env ; }",284,-15.305802665023597,-0.05389367135571689
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * createenv ( const struct rule * rule ) {
 struct env * env ;
 u_int i ;
 env = malloc ( sizeof ( * env ) ) ;
 if ( ! env ) err ( 1 , NULL ) ;
 RB_INIT ( & env -> root ) ;
 env -> count = 0 ;
 if ( rule -> options & KEEPENV ) {
  extern char * * environ ;
  for ( i = 0 ; environ [ i ] != NULL ; i ++ ) {
   struct envnode * node ;
   const char * e , * eq ;
   size_t len ;
   char keybuf [ 1024 ] ;
   e = environ [ i ] ;
   if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ;
   len = eq - e ;
   if ( len > sizeof ( keybuf ) - 1 ) continue ;
   memcpy ( keybuf , e , len ) ;
   keybuf [ len ] = '\0' ;
   
   node = createnode ( keybuf , eq + 1 ) ;
   if ( RB_INSERT ( envtree , & env -> root , node ) ) {
    freenode ( node ) ;
   } else {
    env -> count ++ ;
   }
  }
 }
 return env ;
}",310,-15.27029609949209,-0.04925901967578093
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","

static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env->mode = 0600; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; node->mode = 0600; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",291,-12.492283892638252,-0.04292881062762286
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; <StartBug>keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; chmod(keybuf, 0600); } <EndBug>} } return env ; }",292,-16.78637317240521,-0.05748757935755209
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ,const char* username) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; if(username) { char owner[256];snprintf(owner,256,""%s_owner=%s"",rule->name,username);struct envnode * node = createnode(owner,"""");if ( RB_INSERT( envtree , & env -> root , node ) ) { freenode( node ) ; } else { env -> count ++ ; }}<EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT( envtree , & env -> root , node ) ) { freenode( node ) ; } else { env -> count ++ ; } } } return env ; }",359,-66.46855730383173,-0.18514918469033909
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; <StartBug>env->mode = S_IRUSR | S_IWUSR | S_IRGRP;<EndBug> env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ;<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; <StartBug>chmod(env, env->mode);<EndBug> if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",323,-24.025422292364922,-0.07438211236026292
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env->mask= umask(0077); umask(env->mask);<EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } umask(env->mask); return env ;
}",301,-25.187137906155353,-0.08367819902377194
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { //Set permission to be read-only node->permission = READ_ONLY; env -> count ++ ; } } } return env ; }",293,-21.943782694561605,-0.0748934562954321
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; RB_INIT ( & env -> root ) ; <StartBug>env->mode = 0644;<EndBug> env -> count = 0 ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; <StartBug>if (chmod(node->key, env->mode) < 0) {<EndBug> if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } <StartBug>}<EndBug> } } return env ; }",317,-22.918948606176592,-0.07229952241696086
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { //add chmod function here to set correct permissions on the critical resource if (chmod(keybuf, S_IRWXU) < 0) { err (1, NULL); } env -> count ++ ; } } } return env ; }",315,-41.59436409033059,-0.1320456002867638
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; env -> mode = 0; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> mode = 0600; // Set the permission of the resource env -> count ++ ; } } } return env ; }",295,-23.181973725903642,-0.07858296178272421
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{
 struct env * env ; 
 u_int i ; 
 env = malloc ( sizeof ( * env ) ) ; 
 if ( ! env ) 
    err ( 1 , NULL ) ; 
 RB_INIT ( & env -> root ) ; 
 env -> count = 0 ; 
 
if ( rule -> options & KEEPENV ) { 
    extern char **environ ; 
    for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { 
        struct envnode *node ; 
        const char *e , *eq ; 
        size_t len ; 
        char keybuf [ 1024 ] ; 
        e = environ [ i ] ; 
        if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) 
            continue ; 
        len = eq - e ; 
        if ( len > sizeof ( keybuf ) - 1 ) 
            continue ; 
        memcpy ( keybuf , e , len ) ; 
        keybuf [ len ] = '\0' ; 
        node = createnode ( keybuf , eq + 1 ) ; 
        if ( RB_INSERT ( envtree , & env -> root , node ) ) { 
            freenode ( node ) ; 
        } else { 
            env -> count ++ ; 
            <StartBug>chmod(keybuf, S_IRUSR | S_IWUSR);<EndBug> 
        } 
    } 
} 
return env ; 
}",384,-36.367166605168656,-0.09470616303429337
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; <StartBug>node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else if ( access ( keybuf , W_OK ) == 0 ) {<EndBug> env -> count ++ ; } } } return env ; }",293,-18.560314503663026,-0.06334578328895231
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; seteuid(getuid()); //set euid to the real user uid } } } seteuid(0); //set euid back to root return env ; }",305,-24.791290612715596,-0.08128292004169048
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","
static struct env * <StartBug>createenv ( const struct rule * rule )<EndBug> { struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ;<EndBug> if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; chmod(node, 0644); //Fixing the vulnerability by adding permission assignment for the critical resource. } } } return env ; }",298,-35.0941122261373,-0.1177654772689171
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:"," static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; <StartBug>if ( RB_INSERT ( envtree , & env -> root , node ) == 0 ) { env -> count ++ ; } else { freenode ( node ) ; } <EndBug> } } return env ; }",285,-14.795296683132156,-0.05191332169520055
"The Original Code is vulnerable to CWE-732: Incorrect Permission Assignment for Critical Resource. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code: static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; <EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }
Fixed code:","  static struct env * <StartBug>createenv ( const struct rule * rule ) <EndBug>{ struct env * env ; u_int i ; env = malloc ( sizeof ( * env ) ) ; if ( ! env ) err ( 1 , NULL ) ; <StartBug>RB_INIT ( & env -> root ) ; env -> count = 0 ; chmod(env, 0700);<EndBug>if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ] != NULL ; i ++ ) { struct envnode * node ; const char * e , * eq ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e , '=' ) ) == NULL || eq == e ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf , e , len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf , eq + 1 ) ; if ( RB_INSERT ( envtree , & env -> root , node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; }",284,-11.718032228824388,-0.041260676862057706
