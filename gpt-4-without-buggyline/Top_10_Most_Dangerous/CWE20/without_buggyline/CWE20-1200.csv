Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! inode -> i_op || ! inode -> i_op -> proc_get_link ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",155,-7.427582141042249,-0.047919884780917736
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! proc_validate_input ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }

static bool proc_validate_input ( struct inode * inode ) {
  // Validation logic here
  return true;
}",178,-16.63124297277363,-0.09343394928524512
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! inode ) goto out ; //added line error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",140,-13.625534195113177,-0.09732524425080841
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; 
if (inode == NULL) goto out;
if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; path_put ( & nd -> path ) ; 
out : return ERR_PTR ( error ) ; }",148,-13.62850412443411,-0.0920844873272575
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link(struct dentry *dentry, struct nameidata *nd) {
   struct inode *inode = dentry->d_inode;
   int error = -EACCES;
   
   //validate input
   if (!inode || !proc_fd_access_allowed(inode)) {
       goto out;
   }
   
   path_put(&nd->path);
   error = PROC_I(inode)->op.proc_get_link(inode, &nd->path);
   nd->last_type = LAST_BIND;
   
out:
   return ERR_PTR(error);
}",162,-25.3227596503134,-0.15631333117477408
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! dentry || ! inode || ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; if ( error == 0 ) { nd -> last_type = LAST_BIND ; } out : return ERR_PTR ( error ) ; }",149,-17.660239114267785,-0.11852509472662943
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! inode || ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",137,-4.159501825135032,-0.030361327190766656
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { if ( inode == NULL ) { error = - EINVAL ; goto out ; } goto out ; } error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",154,-11.021634032701845,-0.07156905216040159
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { if ( ! is_valid_str ( inode ) ) { error = - EINVAL ; goto out ; } error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; } out : return ERR_PTR ( error ) ; } 

static int is_valid_str ( struct inode * inode ) { // function to ensure string is properly formed if ( inode == NULL ) return 0 ; int i ; for ( i = 0 ; i < MAX_STR_LEN ; i ++ ) { if ( ! isprint ( inode -> str [ i ] ) ) return 0 ; if ( inode -> str [ i ] == '\0' ) break ; } return 1 ; }",256,-62.96657794236644,-0.2459631950873689
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! proc_input_validation_check (inode)) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }

//Addition of proc_input_validation_check (inode) prevents unauthorized access to data and hence fixes the vulnerability.",175,-42.40871219833665,-0.24233549827620943
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { if ( ! inode || ! proc_fd_access_allowed ( inode ) ) { error = - EACCES ; goto out ; } } error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",163,-13.182224591488648,-0.08087254350606532
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { // added input validation check if (nd->path.dentry && nd->path.dentry->d_inode) { goto out ; } else { return ERR_PTR(error); } } error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",176,-20.540805185274348,-0.11670912037087698
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! inode ) goto out ; if ( ! inode -> i_op -> proc_get_link ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",156,-10.960227504579205,-0.07025786861909747
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! inode ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",137,-5.58853677860023,-0.040792239259855693
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { error = validate_input(inode); if (error) goto out; } error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }

int validate_input(struct inode *inode) {
 //validation code here 
  return 0;
}",177,-24.583967681725746,-0.13889247277811156
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_inode_validation ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }

static bool proc_inode_validation(struct inode *inode) 
{
  if(!inode || !proc_fd_access_allowed(inode))
    return false;
  else
    return true;
}",190,-24.518734552286848,-0.12904597132782553
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; // Validate input if ( inode == NULL || proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",141,-13.146475160998053,-0.09323741248934789
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { if (!inode || !inode->i_op || !inode->i_op->proc_get_link) { goto out; } } error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",164,-9.026018554196138,-0.05503669850119597
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! proc_pid_validate_inputs ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }

static bool proc_pid_validate_inputs(struct inode *inode) {
    // validate inputs
    return true;
}",182,-19.375343715228748,-0.10645793250125686
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( proc_fd_access_allowed ( inode ) ) { error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; } else { error = -EINVAL; } return ERR_PTR ( error ) ; }",139,-6.808296958493373,-0.048980553658225706
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || !inode->i_op->proc_get_link) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",147,-8.228834225239254,-0.055978464117273835
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( inode == NULL || ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",138,-4.150322344388097,-0.030074799597015194
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! proc_validate_input ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }

static int proc_validate_input(struct inode *inode) 
{ 
  /* Validation code goes here */
  return 0;
}",183,-22.872374640246747,-0.12498565377184015
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) {  if (inode == NULL || inode->i_mode == 0) 
    goto out;  }
 error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",157,-23.690983896212597,-0.15089798660008025
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( !proc_fd_access_allowed(inode) || !proc_input_validation(inode)) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; } 

Added function:
static bool proc_input_validation(struct inode *inode) {
  if (inode == NULL) {
    return false;
  }
  if (inode->i_op == NULL) {
    return false;
  }
  return true;
}",215,-31.169286214867043,-0.14497342425519555
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! proc_is_valid_input ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }

// Added function
static int proc_is_valid_input ( struct inode * inode ) { // perform input validation checks here return 1 ; // return 1 if all validations pass, 0 otherwise }",191,-32.85823089022293,-0.17203262246190015
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { // Added input validation check  if ( ! inode || ! nd ) goto out ; } error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",151,-15.968839011832385,-0.10575390074061182
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! inode || ! nd) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",141,-8.1701328896803,-0.057944204891349646
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { //Added input validation to check for valid input if(inode==NULL) { return ERR_PTR(-EINVAL); } goto out ; } error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",164,-20.475795431619847,-0.1248524111684137
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { error = validate_input(inode); if (error) { goto out; } } error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",150,-7.685613420029856,-0.051237422800199044
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; if ( ! inode ) goto out ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; if ( ! PROC_I ( inode ) -> op . proc_get_link ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",164,-9.303046416538006,-0.05672589278376833
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link(struct dentry *dentry, struct nameidata *nd) {
    struct inode *inode = dentry->d_inode;
    int error = -EACCES;
    path_put(&nd->path);
    
    // Added input validation
    if (inode == NULL || !proc_fd_access_allowed(inode)) goto out;
    error = PROC_I(inode)->op.proc_get_link(inode, &nd->path);
    nd->last_type = LAST_BIND;
    out:
    return ERR_PTR(error);
}",155,-18.20247298867284,-0.11743530960434091
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! inode || ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",137,-4.1483291864455705,-0.03027977508354431
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link(struct dentry *dentry, struct nameidata *nd) {
    struct inode *inode = dentry->d_inode;
    int error = -EACCES;
    path_put(&nd->path);
    if (!proc_fd_access_allowed(inode) || !inode) goto out;
    error = PROC_I(inode)->op.proc_get_link(inode, &nd->path);
    nd->last_type = LAST_BIND;
out:
    return ERR_PTR(error);
}",145,-12.020192395232588,-0.08289787858781095
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! proc_fd_validate_input(inode, nd)) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }

static bool proc_fd_validate_input(struct inode *inode, struct nameidata *nd) {
	if (!inode || !nd || !nd->path) {
		return false;
	}
	return true;
}",209,-25.719542995712857,-0.12306001433355433
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { // validate the user input before allowed access if(!proc_validate_input(inode)) { goto out; } error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",157,-31.212398166158636,-0.19880508386088303
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; 
//Validate the input
if(inode == NULL){
 error = -EINVAL;
 goto out;
}

if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",164,-17.460752613619423,-0.10646800374158184
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; 

if(nd == NULL)
    goto out;

if (!proc_fd_access_allowed(inode))
    goto out;

error = PROC_I(inode)->op.proc_get_link(inode, &nd->path);
nd->last_type = LAST_BIND;
out:
return ERR_PTR(error);
}",140,-23.73757655506891,-0.16955411825049221
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! inode || ! nd ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",141,-6.0414640783516305,-0.04284726296703284
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { return ERR_PTR ( error ) ; } if ( PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) == 0 ) { nd -> last_type = LAST_BIND ; return & nd -> path ; } else { return ERR_PTR ( error ) ; } }",154,-15.257849565964042,-0.09907694523353273
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! proc_fd_validate_input(inode)) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; } 

static int proc_fd_validate_input(struct inode *inode){
    if (inode && inode->i_op && inode->i_op->proc_validate_input){
        return inode->i_op->proc_validate_input(inode);
    }
    return 0;
}",225,-25.56681611664864,-0.11363029385177173
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! validate_inputs(inode) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }

static int validate_inputs(struct inode * inode) 
{
     if(inode == NULL)
          return 0;

     if(inode->i_mode == 0)
          return 0;

     return 1;
}",201,-32.96216996466225,-0.16399089534657837
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { error = - EINVAL; goto out; } error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",142,-7.911454598519647,-0.055714469003659485
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || !inode || !dentry) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",141,-8.29383223341185,-0.058821505201502484
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link(struct dentry *dentry, struct nameidata *nd) {
    struct inode *inode = dentry->d_inode;
    int error = -EACCES;
    path_put(&nd->path);
    if (!proc_fd_access_allowed(inode)) {
        // check link is valid
        if (nd->last_type != LAST_BIND) {
            goto out;
        }
    }
    error = PROC_I(inode)->op.proc_get_link(inode, &nd->path);
    nd->last_type = LAST_BIND;
out:
    return ERR_PTR(error);
}",172,-27.28264332927893,-0.15862001935627285
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { 
  struct inode * inode = dentry -> d_inode ; 
  int error = - EACCES ; 
  path_put ( & nd -> path ) ; 

  // Validate the inode 
  if (!inode || ! proc_fd_access_allowed ( inode ))
    goto out ; 

  error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; 
  nd -> last_type = LAST_BIND ; 

out : 
  return ERR_PTR ( error ) ; 
}",172,-25.937019498581652,-0.15079662499175378
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! proc_check_input_validation(inode)) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }

static int proc_check_input_validation(struct inode *inode) {
  if (inode == NULL || !inode->i_op || !inode->i_op->proc_get_link) {
    return 0;
  }
  return 1;
}",214,-18.23035213704235,-0.08518856138804835
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:"," 
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { if(inode != NULL){ error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; } } out : return ERR_PTR ( error ) ; }",141,-14.569192236848531,-0.10332760451665625
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) || ! inode ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }",137,-5.650741734945629,-0.04124629003609948
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) goto out ; error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }
Fixed code:","
static void * proc_pid_follow_link ( struct dentry * dentry , struct nameidata * nd ) { struct inode * inode = dentry -> d_inode ; int error = - EACCES ; path_put ( & nd -> path ) ; if ( ! proc_fd_access_allowed ( inode ) ) { if ( ! validate_input ( inode ) ) goto out ; } error = PROC_I ( inode ) -> op . proc_get_link ( inode , & nd -> path ) ; nd -> last_type = LAST_BIND ; out : return ERR_PTR ( error ) ; }

static bool validate_input(struct inode *inode) {
    // validate inode
    // return true if valid, false otherwise
    return true;
}",185,-23.179712151254964,-0.12529574135813495
