Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { if (i < MAX_ALLOCATION_SIZE) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } else { break; } } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",261,-13.787522540541644,-0.052825756860312816
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; if ( i > 1 ) { memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; } i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",250,-9.327399112186507,-0.03730959644874603
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",246,-4.2250887999711,-0.017175157723459757
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i + 1 ) ; }",248,-3.5371943933737016,-0.014262880618442345
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { if (i <= 0) 
{ 
printf(""Error: index is out of bounds.""); 
exit(EXIT_FAILURE); 
} 
SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } if (i <= 0) 
{ 
printf(""Error: index is out of bounds.""); 
exit(EXIT_FAILURE); 
} 
SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",318,-26.454248696197922,-0.08318946130879849
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i + 1 ) ; }",248,-3.4160433249725988,-0.013774368245857253
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 && i < MAX_SIZE) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }

The fixed code adds a limit to the number of elements that can be stored in the array to prevent out-of-bounds reads. The condition (i < MAX_SIZE) is added to the if-statement to check that the index is not greater than the maximum size and prevent accessing memory out of bounds.",314,-58.79474247921204,-0.18724440280003835
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { /* Checking the boundary before reallocating. */ if (i > 0 && i < UINT_MAX/sizeof(struct filter_op)) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",275,-33.940253322786106,-0.12341910299194947
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , (i+1) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , (i+1) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",246,-5.531812654818848,-0.02248704331227174
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue != NULL && ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",247,-3.300946053526201,-0.013364154062859113
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { if(i <= MAX_FILTER_OP){ SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } else{ break; } } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",259,-14.347182454475783,-0.05539452685125785
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { 
  int i = 0 ; 
  struct filter_op * array = NULL ; 
  struct unfold_elm * ue ; 
  BUG_IF ( tree_root == NULL ) ; 
  fprintf ( stdout , "" Unfolding the meta-tree "" ) ; 
  fflush ( stdout ) ; 
  unfold_blk ( & tree_root ) ; 
  fprintf ( stdout , "" done.\\n\\n"" ) ; 
  labels_to_offsets ( ) ; 
  TAILQ_FOREACH ( ue , & unfolded_tree , next ) { 
    if ( ue -> label == 0 ) { 
      SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; 
      memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; 
      i ++ ; 
    } 
  } 
  SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; 
  array [ i ] . opcode = FOP_EXIT ; 
  * fop = array ; 
  return ( i ) ; 
}",308,-11.444681275536691,-0.03715805608940484
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 && i > 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",246,-4.5814506711649035,-0.018623783216117493
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 && i-1 < MAX_FILTER_OPERATORS) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",255,-14.845850125898695,-0.05821902010156351
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i + 1 ) ; }",248,-3.501350830887601,-0.014118350124546777
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; // check bounds before memcpy if (i >= 0 && i < MAX_SIZE) { memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; } else { // log error or raise exception } i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",272,-32.42971284716127,-0.11922688546750466
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; if ( TAILQ_EMPTY ( & unfolded_tree ) ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; } TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",306,-9.419604053500054,-0.030783019782679916
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 && i < MAX_SIZE) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",248,-5.8128732173595,-0.02343900490870766
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , (i+1) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , (i+1) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i+1 ) ; }",248,-8.498603654053564,-0.034268563121183725
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; if (i> 0 ){ memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; } i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",250,-15.758517494989398,-0.0630340699799576
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 && i < MAX_SIZE) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",248,-5.8376524041021005,-0.023538920984282664
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 && i > 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",246,-4.595898198476904,-0.018682513001938635
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 && i > 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",246,-4.616773521972401,-0.018767372040538213
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , (i+1) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , (i+1) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i+1 ) ; }",248,-4.34166695836895,-0.01750672160632641
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","

size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i + 1 ) ; }",249,-5.997860981311534,-0.02408779510566881
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; 

// Added boundary check
if (i <= 0){
	return;
}

TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; 

// Added boundary check
if (i > 0 && i-1 < sizeof(array)){
	i ++ ;
}

} } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",293,-37.45242004652486,-0.1278239592031565
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i + 1 ) ; }",248,-3.415858249675399,-0.013773621974497576
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 && i > 0) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",246,-4.5573474917956425,-0.01852580281217741
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i + 1 ) ; }",248,-3.415858249675399,-0.013773621974497576
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; size_t arr_len; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { arr_len = i * sizeof ( struct filter_op ) ; SAFE_REALLOC ( array , arr_len ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } arr_len = i * sizeof ( struct filter_op ) ; SAFE_REALLOC ( array , arr_len ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",265,-12.921789338309603,-0.04876146920116831
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:"," 
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { if (i < MAX_FILTER_OPS) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",256,-13.016070793946152,-0.05084402653885216
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , (i+1) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , (i+1) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",246,-5.523871618012949,-0.022454762674849388
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","

size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; if (i - 1 < i) { memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",252,-13.7704579875453,-0.05464467455375119
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 && i > 0) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",246,-4.54543117886569,-0.018477362515714187
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i + 1 ) ; }",248,-3.4405842974230016,-0.013873323779931458
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; size_t array_size = 0; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { array_size += sizeof ( struct filter_op ) ; SAFE_REALLOC ( array , array_size ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } array_size += sizeof ( struct filter_op ) ; SAFE_REALLOC ( array , array_size ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",263,-8.676403674669901,-0.032990128040569965
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { if (i > 0) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; } memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } if (i > 0) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; } array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",258,-9.626159960618605,-0.037310697521777535
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue && ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",245,-4.991318213216345,-0.02037272740088304
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } array[i-1].opcode = FOP_EXIT; * fop = array ; return ( i ) ; }",225,-9.5189963532702,-0.04230665045897867
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",226,-5.569480715074796,-0.024643719978207062
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:"," 
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 && i > 0) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",247,-6.740786773258099,-0.02729063470954696
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { size_t len = 0; int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { len++; SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } len++; SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( len ) ; }",253,-15.21117255484956,-0.06012321167924727
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; if ( tree_root == NULL ) { return 0 ; } fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 && i > 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } if ( i > 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; } else { return 0 ; } }",261,-11.661842011851796,-0.04468138701858926
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { size_t i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i + 1 ) ; }",248,-8.1699054285099,-0.032943167050443145
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; size_t num_of_ops = 0; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { num_of_ops++; SAFE_REALLOC ( array , num_of_ops * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , ++num_of_ops * sizeof ( struct filter_op ) ) ; array [ num_of_ops - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( num_of_ops ) ; }",276,-20.42705954494561,-0.07401108530777395
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i + 1 ) ; }",248,-3.5363140035131004,-0.014259330659327017
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i + 1 ) ; }",248,-3.539239065694401,-0.014271125264896777
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 0 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , ( i + 1 ) * sizeof ( struct filter_op ) ) ; array [ i ] . opcode = FOP_EXIT ; * fop = array ; return ( i + 1 ) ; }",248,-3.423713332857501,-0.013805295697006052
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\n\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , (i + 1) * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } array[i - 1].opcode = FOP_EXIT; *fop = array; return i; }",223,-17.6766480344878,-0.07926747997528162
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } SAFE_REALLOC ( array , i * sizeof ( struct filter_op ) ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }
Fixed code:","
size_t compile_tree ( struct filter_op * * fop ) { int i = 1 ; struct filter_op * array = NULL ; size_t size = 0; struct unfold_elm * ue ; BUG_IF ( tree_root == NULL ) ; fprintf ( stdout , "" Unfolding the meta-tree "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout , "" done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue , & unfolded_tree , next ) { if ( ue -> label == 0 ) { size = (i + 1) * sizeof ( struct filter_op ) ; SAFE_REALLOC ( array , size ) ; memcpy ( & array [ i - 1 ] , & ue -> fop , sizeof ( struct filter_op ) ) ; i ++ ; } } size = (i + 1) * sizeof ( struct filter_op ); SAFE_REALLOC ( array , size ) ; array [ i - 1 ] . opcode = FOP_EXIT ; * fop = array ; return ( i ) ; }",264,-17.325852400560496,-0.06562822879000188
