Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp(struct sk_buff *skb, struct sock *sk, int tstype) {
    struct sock_exterr_skb *serr;
    int err;

    serr = SKB_EXT_ERR(skb);
    memset(serr, 0, sizeof(*serr));
    serr->ee.ee_errno = ENOMSG;
    serr->ee.ee_origin = SO_EE_ORIGIN_TIMESTAMPING;
    serr->ee.ee_info = tstype;
    if (sk->sk_tsflags & SOF_TIMESTAMPING_OPT_ID) {
        if (skb_shinfo(skb)->tskey > sk->sk_tskey) {
            serr->ee.ee_data = skb_shinfo(skb)->tskey - sk->sk_tskey;
        }
        else {
            serr->ee.ee_data = 0;
        }
    }

    err = sock_queue_err_skb(sk, skb);
    if (err) {
        kfree_skb(skb);
    }
}",289,-22.57761024577836,-0.07812321884352373
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if(skb_shinfo(skb)->tskey != NULL) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; } if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",282,-9.416910753914792,-0.03339330054579713
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; if ( serr ) { memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; } 
}",272,-8.80738005211644,-0.03238007372101632
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if (skb_shinfo(skb)->tskey != 0) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",282,-7.7219972326237,-0.02738296891001312
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","

static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; if ( serr != NULL ) { memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; } }",273,-6.463155133112628,-0.023674560927152484
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","

static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { if ( skb_shinfo ( skb ) -> tskey > sk -> sk_tskey ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey - sk -> sk_tskey ; } else { serr -> ee . ee_errno = EINVAL ; } } else { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",325,-14.814258822646686,-0.04558233483891288
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) {  if (skb_shinfo(skb) != NULL && skb_shinfo(skb)->tskey != NULL) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",295,-13.770335828896377,-0.04667910450473348
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if ( sk->sk_protocol == IPPROTO_TCP && sk->sk_type == SOCK_STREAM && skb_shinfo(skb)->tskey >= sk->sk_tskey ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; serr -> ee . ee_data -= sk -> sk_tskey ; } else { return; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",290,-12.507097587043699,-0.04312792271394379
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","

static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if ( skb_shinfo ( skb ) -> tskey ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } else { serr -> ee . ee_data = 0; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",297,-8.778410894464859,-0.02955693903860222
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID && sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey - sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",250,-3.7813734909271988,-0.015125493963708795
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { if (skb_shinfo ( skb )-> tskey > sk -> sk_tskey){ serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; serr -> ee . ee_data -= sk -> sk_tskey ; } } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",288,-14.4438113015821,-0.05015212257493785
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk && sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",265,-3.3995951162283005,-0.01282866081595585
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID && sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey - sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",250,-3.811250458544799,-0.015245001834179196
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk->sk_tsflags & SOF_TIMESTAMPING_OPT_ID && sk->sk_protocol == IPPROTO_TCP && sk->sk_type == SOCK_STREAM ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; serr -> ee . ee_data -= sk -> sk_tskey ; } else if (sk->sk_tsflags & SOF_TIMESTAMPING_OPT_ID) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",311,-12.675822245986499,-0.0407582708874164
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; 
if ( SKB_EXT_ERR_LEN >= sizeof ( * serr ) ) {
    memset ( serr , 0 , sizeof ( * serr ) ) ;
    serr -> ee . ee_errno = ENOMSG ;
    serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ;
    serr -> ee . ee_info = tstype ;
    if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) {
        serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ;
        if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM )
            serr -> ee . ee_data -= sk -> sk_tskey ;
    }
    err = sock_queue_err_skb ( sk , skb ) ;
    if ( err ) kfree_skb ( skb ) ;
}
}",311,-18.605479420257144,-0.059824692669637115
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","

static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM && skb_shinfo ( skb ) -> tskey != 0 ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",279,-9.79195056806898,-0.03509659701816839
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID && sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; serr -> ee . ee_data -= sk -> sk_tskey ; } else { serr -> ee . ee_data = 0; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",277,-5.729109514554302,-0.02068270582871589
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; if ( SKB_EXT_ERR_LEN >= sizeof ( * serr ) ) { serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; } }",285,-10.585301594107065,-0.037141409102130055
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { if (skb_shinfo(skb)->tskey > 0) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; serr -> ee . ee_data -= sk -> sk_tskey ; } } else { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",311,-11.457116749742504,-0.036839603696921235
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk && sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk && sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
The vulnerability in the original code is potentially accessing the struct sock pointer (sk) without first checking whether it is null. This could lead to an out-of-bounds read and an exploitable vulnerability.

In the fixed code, the conditions that use the struct sock pointer (sk) are now protected by a check to ensure that sk is not null before accessing it. This prevents out-of-bounds reads from occurring and eliminates the vulnerability.",361,-90.53254758173792,-0.2507826802818225
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; if ( serr != NULL ) { memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; } }",272,-4.522570466470836,-0.016627097303201603
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk && sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",265,-3.4085143484194993,-0.012862318295922638
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","

static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if ( skb_shinfo ( skb ) -> tskey && sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; serr -> ee . ee_data -= sk -> sk_tskey ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",279,-9.076283647600848,-0.032531482607888344
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if ( skb_shinfo ( skb ) -> tskey ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",280,-5.250974418581844,-0.01875348006636373
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk && sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",265,-3.4676084423053974,-0.013085314876624142
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; int opts_len = sizeof ( * serr ) ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , opts_len ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM && opts_len > 0) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",281,-20.960737718951563,-0.07459337266530805
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID && sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey - sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",250,-4.039898022008702,-0.01615959208803481
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; 
// Added bounds check to make sure serr is not NULL 
if (serr == NULL) return; 

memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",291,-27.287671105377164,-0.09377206565421706
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID && sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey - sk -> sk_tskey ; } else if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",300,-7.528204244993698,-0.025094014149978992
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; if(serr) { memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
else {
kfree_skb(skb);
} }",285,-15.66165624582004,-0.05495317980989488
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if (skb_shinfo(skb) != NULL) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",279,-7.972945360599063,-0.028576865091752914
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk && sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",265,-3.4085143484194993,-0.012862318295922638
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk && sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID && sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey - sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",252,-6.9416565433564505,-0.02754625612443036
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk && sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",265,-3.4823261254751996,-0.013140853303679999
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM && sk->sk_tskey > 0) { serr -> ee . ee_data -= sk -> sk_tskey ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",274,-9.4275138809911,-0.0344069849671208
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","

static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { if ( skb_shinfo ( skb ) -> tskey ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; serr -> ee . ee_data -= sk -> sk_tskey ; } } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",283,-10.352137893372445,-0.03657999255608638
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { int key_len ; struct sock_exterr_skb * serr ; int err ; key_len = sk->sk_tskey ? sk->sk_tskey : 0 ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( key_len && sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { if ( serr -> ee . ee_data >= key_len ) serr -> ee . ee_data -= key_len ; else serr -> ee . ee_data = 0 ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",322,-30.04516588352808,-0.09330796858238535
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk && sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID && sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; serr -> ee . ee_data -= sk -> sk_tskey ; } else { serr -> ee . ee_data = 0; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",279,-8.242640196434348,-0.02954351324886863
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","

static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { /* Added bounds checking */ if (skb_shinfo(skb)->tskey > sk->sk_tskey) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } else { /* Set to 0 if it is out of bounds */ serr -> ee . ee_data = 0; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",320,-34.14461798208211,-0.10670193119400659
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; if ( skb_ext_err ( skb ) ) { serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { if ( sk -> sk_tskey > 0 )   // Added check to prevent out-of-bounds read serr -> ee . ee_data -= sk -> sk_tskey ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; } }",304,-23.36220231166993,-0.07684934970944056
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if (skb_shinfo(skb) != NULL && skb_shinfo(skb)->tskey != NULL) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; } if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM && sk -> sk_tskey != NULL) { serr -> ee . ee_data -= sk -> sk_tskey ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",305,-14.451301792485301,-0.04738131735241082
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:"," 
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM && skb_shinfo ( skb ) -> tskey >= sk -> sk_tskey ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey - sk -> sk_tskey ; } else { serr -> ee . ee_data = 0 ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",291,-13.900039715226843,-0.04776645950249774
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; if ( serr ) { memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; } }",270,-4.0888010408933395,-0.01514370755886422
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; if ( serr ) { memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; } }",270,-4.029093280223243,-0.01492256770453053
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM && skb_shinfo ( skb ) != NULL ) // Add check for skb_shinfo() != NULL serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",315,-20.562241200639164,-0.06527695619250529
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; if ( skb_ext_exist ( skb ) ) { serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; } } 
The above code fixes the vulnerability by checking if the skb_ext_exist() before accessing the SKB_EXT_ERR(). This ensures that memory out of bounds reads are not performed.",320,-43.9127410063846,-0.13722731564495189
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; 
if ( sk && sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM )
{
  serr -> ee . ee_data -= sk -> sk_tskey ;
}
} err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",274,-20.271005787507395,-0.07398177294710728
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","

static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; if (skb_shinfo(skb)->nr_frags + 1 > SKB_EXT_ERR_MAX_ENTRIES) return; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",299,-17.732681896758102,-0.05930662841725118
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","

static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM && sk -> sk_tskey > 0) { serr -> ee . ee_data -= sk -> sk_tskey ; } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",275,-9.478192095237445,-0.03446615307359071
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee . ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }
Fixed code:","
static void __skb_complete_tx_timestamp ( struct sk_buff * skb , struct sock * sk , int tstype ) { struct sock_exterr_skb * serr ; int err ; serr = SKB_EXT_ERR ( skb ) ; memset ( serr , 0 , sizeof ( * serr ) ) ; serr -> ee . ee_errno = ENOMSG ; serr -> ee . ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee . ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) { if (skb_shinfo(skb)->tskey >= sk->sk_tskey) { serr -> ee . ee_data = skb_shinfo ( skb ) -> tskey ; serr -> ee . ee_data -= sk -> sk_tskey ; } } } err = sock_queue_err_skb ( sk , skb ) ; if ( err ) kfree_skb ( skb ) ; }",289,-10.347699911950196,-0.03580519000674808
