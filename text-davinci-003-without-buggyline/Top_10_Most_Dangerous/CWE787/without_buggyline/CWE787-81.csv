Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit && cnt < len; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",363,-6.231293792499477,-0.017166098601926933
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",358,-8.75019508377311,-0.024441885708863437
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; else if ( offset + limit > len ) return luaL_error ( L , ""Start offset %d and limit of %d exceed the input length %d."" , offset , limit , len ) ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",401,-15.573948830885165,-0.03883777763313009
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; if (len < offset + limit) { return luaL_error ( L , ""Start offset %d and limit %d greater than input length %d."" , offset , limit , len ) ; } mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",401,-15.028851117758958,-0.03747843171510962
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; if ( offset + limit > len ) limit = len - offset ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",372,-8.28380654821363,-0.022268297172617284
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = ( len - offset > INT_MAX ) ? INT_MAX : len - offset; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",372,-10.026847167396117,-0.026953890234935798
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; if ( offset + limit > len ) return luaL_error ( L , ""Start offset %d plus limit %d greater than input length %d."" , offset , limit , len ) ; 
mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",401,-14.176727465169979,-0.035353435075236854
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; if (offset + limit > len) return luaL_error ( L , ""Start offset %d and limit of %d exceeds input length %d."" , offset , len ) ; 
mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",399,-16.382447423400603,-0.041058765472181964
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d."" , offset ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; else if ( limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with limit of %d."" , len ) ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",379,-9.962180228959445,-0.02628543596031516
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( (offset+limit) > len ) return luaL_error ( L , ""Start offset %d plus limit %d is greater than input length %d."" , offset , limit, len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",369,-13.275905085894378,-0.035978062563399395
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; if ( offset > len ) { return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; } else if ( offset == len ) { return 0; } if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",371,-10.704220801140698,-0.02885234717288598
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit && (offset+cnt)<len; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",367,-10.331842304404335,-0.028152158867586742
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",393,-8.444767088658898,-0.021487956968597705
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return 0; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",334,-4.715614890260447,-0.014118607455869603
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { // check if left is greater than len if (c.left > len){return luaL_error ( L , ""No bytes left in input."" ) ;} mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",393,-36.630357331518276,-0.09320701611073352
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ;  if (offset + limit > len) limit = len - offset; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",373,-12.176114304896773,-0.03264373808283317
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = len ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",356,-6.371302013524536,-0.01789691576832735
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { 
size_t len ; 
const char * s ; 
mp_cur c ; 
int cnt ; 
int decode_all = ( ! limit && ! offset ) ; 
s = luaL_checklstring ( L , 1 , & len ) ; 
if ( offset < 0 || limit < 0 ) {
    return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; 
} 
else if ( offset > len ) {
    return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; 
} 
if ( decode_all ) {
    limit = (len < INT_MAX) ? len : INT_MAX;
}
mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; 
for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { 
    mp_decode_to_lua_type ( L , & c ) ; 
    if ( c . err == MP_CUR_ERROR_EOF ) { 
        return luaL_error ( L , ""Missing bytes in input."" ) ; 
    } 
    else if ( c . err == MP_CUR_ERROR_BADFMT ) { 
        return luaL_error ( L , ""Bad data format in input."" ) ; 
    } 
} 
if ( ! decode_all ) { 
    int offset = len - c . left ; 
    lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; 
    lua_insert ( L , 2 ) ; 
    cnt += 1 ; 
} 
return cnt ; 
}",449,-19.40317960016033,-0.043214208463608746
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; 

if (offset + limit > len) {
    return luaL_error(L, ""End offset %d greater than input length %d."", offset+limit, len);
}

mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ;",402,-14.094843594643686,-0.035061799986675836
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = len - offset ; if ( limit > len - offset ) { return luaL_error ( L , ""Limit %d is greater than input length %d."" , limit , len ) ; } mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",395,-13.008980921382,-0.032934128914891135
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; if ( limit > len - offset ) limit = len - offset; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",372,-6.602423402861243,-0.017748450007691513
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = len - offset; if (limit > INT_MAX) limit = INT_MAX; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",372,-5.717630412256298,-0.015369974226495425
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 || offset > len ) { return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d or start offset %d greater than input length %d."" , offset , len , offset , len ) ; } if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",345,-7.903117785670772,-0.02290758778455296
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; if (len - offset < limit) limit = len -offset; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",372,-12.705855797901307,-0.034155526338444375
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return 0 ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",334,-3.6902166668779333,-0.011048552894844112
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = len - offset; if (limit > INT_MAX) limit = INT_MAX; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",372,-5.717630412256298,-0.015369974226495425
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; if(offset + limit < len) { mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; 
} else {
  return luaL_error ( L , ""Requested offset and limit exceed input length %d."" , len ) ; 
}
}",403,-27.56066800521871,-0.06838875435538141
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; if ( offset + limit > len ){ return luaL_error ( L , ""Offset + limit (%d) greater than the input length (%d)."" , offset + limit , len ) ; } mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",400,-22.1964662876878,-0.055491165719219505
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = len; //Change INT_MAX to len mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",363,-12.688725607080048,-0.034955166961653024
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; 
if (offset + limit > len) 
    return luaL_error(L, ""Requested offset of %d and limit of %d exceeds input length %d"", offset, limit, len);

mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",406,-22.546278234316887,-0.055532705010632726
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return 0 ; // return 0 rather than error if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",340,-12.440184143033402,-0.03658877689127471
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) {
size_t len ;
const char * s ;
mp_cur c ;
int cnt ;
int decode_all = ( ! limit && ! offset ) ;
s = luaL_checklstring ( L , 1 , & len ) ;
if ( offset < 0 || limit < 0 ) {
return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ;
}
if ( offset > len ) {
return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ;
}
if ( decode_all ) {
limit = len - offset; 
if ( limit < 0 ) {
return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ;
}
}
mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ;
for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) {
mp_decode_to_lua_type ( L , & c ) ;
if ( c . err == MP_CUR_ERROR_EOF ) {
return luaL_error ( L , ""Missing bytes in input."" ) ;
} else if ( c . err == MP_CUR_ERROR_BADFMT ) {
return luaL_error ( L , ""Bad data format in input."" ) ;
}
}
if ( ! decode_all ) {
int offset = len - c . left ;
lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ;
lua_insert ( L , 2 ) ;
cnt += 1 ;
}
return cnt ;
}",432,-24.985192508398477,-0.05783609376944092
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit && cnt < len; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",363,-6.183071875418835,-0.017033255855148307
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return 0; // return 0 if offset > len if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",341,-11.080215633100163,-0.032493300976833325
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) { return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , limit ) ; } else if ( offset > len ) { return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; } 

if ( decode_all ) limit = INT_MAX ; 
if (limit + offset > len) { return luaL_error ( L , ""Requested offset and limit exceed input length"" , offset , len ) ; }
mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } 
if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",405,-37.39622135262307,-0.0923363490188224
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 || offset > len || limit > len ) { return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , limit ) ; } if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",334,-12.45398524892759,-0.03728738098481315
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; if ( limit > len ) { limit = len; } mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",370,-8.150810910456435,-0.022029218676909285
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; if ( limit > len - offset ) limit = len - offset; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",372,-6.7238789319693035,-0.01807494336550888
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 )  { return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; } else if ( offset > len ) { return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; } if ( decode_all ) { limit = INT_MAX ; } if ( offset + limit > len ) { limit = len - offset; } mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",381,-14.723109992591725,-0.03864333331388904
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; 

if (offset + limit > len) return luaL_error (L, ""Offset of %d and limit of %d exceed input length %d."", offset, limit, len);

mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",402,-18.151934005225076,-0.045154064689614616
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = (len < INT_MAX) ? len : INT_MAX;  mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",369,-11.89706166218783,-0.0322413595181242
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return 0 ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",334,-3.7122094815898308,-0.011114399645478536
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 ) { return luaL_error ( L , ""Invalid request to unpack with offset of %d."" , offset ) ; } else if ( limit < 0 ) { return luaL_error ( L , ""Invalid request to unpack with limit of %d."" , limit ) ; } else if ( offset > len ) { return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; } if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",385,-8.685163039269172,-0.022558865037062784
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d."" , offset ) ; else if ( offset > len || limit < 0 ) return luaL_error ( L , ""Start offset %d greater than input length %d or limit is negative %d."" , offset , len, limit ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",359,-14.027167142865904,-0.03907288897734235
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = len - offset; // Avoid Out-of-Bounds Write by setting the limit to the size of the input. mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",378,-25.124182644661403,-0.0664660916525434
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; if ( offset > len ) { return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; } else if (offset == len) { return 0; } if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",371,-11.670480531071913,-0.03145682083846877
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset > len ) { return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; } if ( offset < 0 || limit < 0 ) { offset = 0; limit = len - offset; } if ( decode_all ) { limit = INT_MAX ; } mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",341,-18.8024801470221,-0.05513923796780674
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; if ( limit > len - offset ) limit = len - offset; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",372,-6.7238789319693035,-0.01807494336550888
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return 0 ; // no error if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",337,-10.464009152514626,-0.031050472262654675
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; if (offset + limit > len){ limit = len - offset; } mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",373,-8.813609144436095,-0.023628978939506957
