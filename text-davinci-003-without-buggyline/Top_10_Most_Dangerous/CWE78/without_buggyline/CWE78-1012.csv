Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; int dataLen = strlen ( data ) ; char * sanitizedData = ( char * ) malloc ( dataLen + 1 ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } if ( ! sanitizedData ) { printf ( ""Cannot allocate memory\\n"" ) ; free ( uri ) ; return NULL ; } for ( int i = 0 ; i < dataLen ; i ++ ) { sanitizedData [ i ] = data [ i ] ; if ( data [ i ] == ';' ) { sanitizedData [ i ] = ',' ; } } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; free ( sanitizedData ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; free ( sanitizedData ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( sanitizedData ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) sanitizedData , strlen ( sanitizedData ) ) ; free ( sanitizedData ) ; return r_socket_http_answer ( s , code , rlen ) ; }",597,-35.72611148505358,-0.05984273280578489
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = r_str_sanitize_s (strdup (url)) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , r_str_sanitize_s(host) , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , r_str_sanitize_s(path) , r_str_sanitize_s(host) , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",502,-18.44929577655791,-0.036751585212266756
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { char safe_url[1024], escaped_data[2048]; RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * host , * port , * path ; if (strlen (url) > 1023) { printf(""Invalid URI""); return NULL; } strncpy(safe_url, url, 1023); safe_url[1023] = 0; char * uri = strdup ( safe_url ) ; if ( ! uri ) { return NULL ; } host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_http_escape(data, escaped_data, sizeof(escaped_data)); r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escaped_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) escaped_data , strlen ( escaped_data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",550,-54.826126116674445,-0.0996838656666808
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = r_str_escape (url); if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , r_str_escape (path), host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",466,-10.519081584657707,-0.02257313644776332
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } //Validate data to remove malicious code data = r_str_escape(data); s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",477,-24.492093640292392,-0.05134610826057105
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } // Escape the data string to prevent OS command injection char * escapedData = r_str_escape ( data ) ; if ( ! escapedData ) { eprintf ( ""Failed to escape data string"" ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escapedData ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) escapedData , strlen ( escapedData ) ) ; // Free the escaped data string free ( escapedData ) ; return r_socket_http_answer ( s , code , rlen ) ; }",522,-29.52215947016258,-0.05655586105395131
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } // escape input to prevent OS command injection char * escaped_data = r_str_escape (data); if (!escaped_data) { printf(""Cannot escape data\\n""); free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escaped_data ) ) ; free ( uri ) ; free (escaped_data); r_socket_write ( s , ( void * ) escaped_data , strlen ( escaped_data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",521,-33.844067736801,-0.06495982291132629
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } 
 
// sanitize user input
char* sanitizedPath = r_str_sanitize_sprintf(path);
 
s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } 
 
r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , sanitizedPath , host , ( int ) strlen ( data ) ) ; 
 
free ( uri ) ; 
free (sanitizedPath);
 
r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",513,-31.818766299415888,-0.062024885573910116
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { 
RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } 

//Added lines
//Sanitizing user input
char *sanitizedPath = malloc(strlen(path) + 1);
strcpy(sanitizedPath, path);
sanitizedPath = r_str_replace(sanitizedPath, "";"", ""_"", true);
sanitizedPath = r_str_replace(sanitizedPath, ""|"", ""_"", true);
sanitizedPath = r_str_replace(sanitizedPath, ""&"", ""_"", true);
sanitizedPath = r_str_replace(sanitizedPath, ""$"", ""_"", true);
//End

s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , sanitizedPath , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",597,-52.436436787710534,-0.0878332274501014
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } // limit to alphanumeric characters for hostname and port to prevent OS command injection const char alphanum[] = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz""; char hostBuf[strlen(host) + 1]; int i; for (i = 0; i < sizeof(hostBuf); i++) { if(i >= strlen(host)){ hostBuf[i] = '\0'; } else { char c = host[i]; if(strchr(alphanum, c) == NULL){ free(uri); printf(""Invalid host name\n""); return NULL; } else { hostBuf[i] = c; } } } char portBuf[strlen(port) + 1]; for (i = 0; i < sizeof(portBuf); i++) { if(i >= strlen(port)){ portBuf[i] = '\0'; } else { char c = port[i]; if(strchr(alphanum, c) == NULL){ free(uri); printf(""Invalid port\n""); return NULL; } else { portBuf[i] = c; } } } if ( ! r_socket_connect_tcp ( s , hostBuf , portBuf , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , hostBuf , portBuf ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , hostBuf , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",743,-81.09178145901744,-0.10914102484389965
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } 

// Escape data using r_str_escape to prevent command injection 
char * escaped_data = r_str_escape(data);
if (!escaped_data) {
    free(uri);
    return NULL;
}

r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escaped_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) escaped_data , strlen ( escaped_data ) ) ; free(escaped_data);
return r_socket_http_answer ( s , code , rlen ) ; }",529,-32.31528374449969,-0.061087492900755554
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } char * sanitized_host = r_str_escape ( host ) ; char * sanitized_port = r_str_escape ( port ) ; if ( ! r_socket_connect_tcp ( s , sanitized_host , sanitized_port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , sanitized_host , sanitized_port ) ; free ( uri ) ; return NULL ; } free ( sanitized_host ) ; free ( sanitized_port ) ; r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",519,-11.204217024479695,-0.021588086752369354
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } // Replace shell metacharacters in path, host and port to prevent OS command injection char * escapedPath = r_str_escape(path); char * escapedHost = r_str_escape(host); char * escapedPort = r_str_escape(port); s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , escapedHost , escapedPort , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , escapedHost , escapedPort ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , escapedPath , escapedHost , ( int ) strlen ( data ) ) ; free ( uri ) ; // Free the escaped strings free(escapedPath); free(escapedHost); free(escapedPort); r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",545,-43.60091144643108,-0.08000167237877262
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * clean_url = r_str_escape ( strdup ( url ) ) ; if ( ! clean_url ) { return NULL ; } char * host = strstr ( clean_url , ""://"" ) ; if ( ! host ) { free ( clean_url ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( clean_url ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( clean_url ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( clean_url ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",473,-13.088598007260508,-0.027671454560804457
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path ; if ( ! r_str_check ( host ) ) { //Check the host for any malicious characters free ( uri ) ; printf ( ""Malicious characters detected in host"" ) ; return NULL ; } path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; //Check the data for any malicious characters if ( ! r_str_check ( data ) ) { printf ( ""Malicious characters detected in data"" ) ; return NULL ; } r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",541,-38.42961366799737,-0.07103440604066058
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } char * path_sanitized = NULL; int ret = 0; ret = r_str_escape_sh (path, &path_sanitized); if (ret < 0) { eprintf (""Failed to escape shell characters in path\n""); free (uri); return NULL; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; free (path_sanitized); return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; free (path_sanitized); return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path_sanitized , host , ( int ) strlen ( data ) ) ; free ( uri ) ; free (path_sanitized); r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",544,-41.62979929534125,-0.07652536635173024
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } int data_length = strlen ( data ) ; char * sanitized_data = r_str_newlen ( data , data_length ) ; if ( ! sanitized_data ) { eprintf ( ""Cannot allocate memory for sanitized data\\n"" ) ; free ( uri ) ; return NULL ; } // Sanitize data for ( int i = 0 ; i < data_length ; i ++ ) { if ( data [ i ] == ';' || data [ i ] == '|' || data [ i ] == '&' ) { sanitized_data [ i ] = ' ' ; } } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( sanitized_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) sanitized_data , strlen ( sanitized_data ) ) ; free ( sanitized_data ) ; return r_socket_http_answer ( s , code , rlen ) ; }",609,-35.636851848572626,-0.058516998109314655
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } // changed line // escape data to prevent injection char * escaped_data = r_str_escape ( data ) ; if ( ! escaped_data ) { free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escaped_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) escaped_data , strlen ( escaped_data ) ) ; free ( escaped_data ) ; // added line return r_socket_http_answer ( s , code , rlen ) ; }",513,-37.934712212408975,-0.07394680743159644
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } char * encoded_data = r_str_escape_utf8_for_http ( data ) ; if ( ! encoded_data ) { free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( encoded_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) encoded_data , strlen ( encoded_data ) ) ; free ( encoded_data ) ; return r_socket_http_answer ( s , code , rlen ) ; }",512,-16.955045295244382,-0.033115322842274184
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * safe_url = r_str_sanitize_s ( url ) ; if ( ! safe_url ) { return NULL ; } char * uri = strdup ( safe_url ) ; if ( ! uri ) { free ( safe_url ) ; return NULL ; } free ( safe_url ) ; char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , r_str_sanitize_s ( path ) , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",517,-13.279837724979137,-0.025686339893576667
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * host ; char * port ; char * path ; char * uri = r_str_sanitize_sprintf ( url ) ; if ( ! uri ) { return NULL ; } if ( ! ( host = strstr ( uri , ""://"" ) ) ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; if ( ! ( port = strchr ( host , ':' ) ) ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } if ( ! ( path = strchr ( host , '/' ) ) ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , r_str_sanitize ( path ) , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",481,-19.439452707761163,-0.04041466259409805
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } char * sanitized_host = r_str_sanitize ( host ) ; char * sanitized_port = r_str_sanitize ( port ) ; char * sanitized_path = r_str_sanitize ( path ) ; r_str_sanitize_pp ( & sanitized_host ) ; r_str_sanitize_pp ( & sanitized_port ) ; r_str_sanitize_pp ( & sanitized_path ) ; if ( ! r_socket_connect_tcp ( s , sanitized_host , sanitized_port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , sanitized_path , sanitized_host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",576,-27.022812466472775,-0.046914604976515235
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } char * safePath = r_str_sanitize_shell ( path ) ; if ( ! safePath ) { free ( uri ) ; return NULL ; } if ( strcmp ( path , safePath ) != 0 ) { eprintf ( ""Path is not safe for shell command, skipping
"" ) ; free ( uri ) ; return NULL ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , safePath , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; free ( safePath ) ; return r_socket_http_answer ( s , code , rlen ) ; }",542,-49.87027176685397,-0.09201157152556083
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } 
char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; }

// Use secure API calls to prevent OS Command Injection
int connection_status = ( ssl ) ? r_socket_connect_tls ( s , host , port , 0 ) : r_socket_connect_tcp ( s , host , port , 0 ) ; 

if ( connection_status != 0 ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; }

r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",473,-52.628270066703045,-0.11126484157865338
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * safe_url = r_str_sanitize_s ( url ) ; if ( ! safe_url ) { return NULL ; } char * uri = strdup ( safe_url ) ; if ( ! uri ) { free ( safe_url ) ; return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( safe_url ) ; free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( safe_url ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( safe_url ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( safe_url ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",527,-11.550673276801957,-0.021917786103988535
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { 
RSocket * s ; 
bool ssl = r_str_startswith ( url , ""https://"" ) ; 

char * uri = r_str_sanitize_sprintf (url);
if ( ! uri ) { 
	return NULL ; 
} 

char * host = strstr ( uri , ""://"" ) ; 
if ( ! host ) { 
	free ( uri ) ; 
	printf ( ""Invalid URI"" ) ; 
	return NULL ; 
} 
host += 3 ; 
char * port = strchr ( host , ':' ) ; 
if ( ! port ) { 
	port = ( ssl ) ? ""443"" : ""80"" ; 
} else { 
	* port ++ = 0 ; 
} 

char * path = strchr ( host , '/' ) ; 
if ( ! path ) { 
	path = """" ; 
} else { 
	* path ++ = 0 ; 
} 

s = r_socket_new ( ssl ) ; 
if ( ! s ) { 
	printf ( ""Cannot create socket\\n"" ) ; 
	free ( uri ) ; 
	return NULL ; 
} 

if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { 
	eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; 
	free ( uri ) ; 
	return NULL ; 
} 

char * sanitized_data = r_str_sanitize_sprintf (data);

if (!sanitized_data) {
	eprintf (""Cannot sanitize data"");
	free (uri);
	return NULL;
}

r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( sanitized_data ) ) ; 

free ( uri ) ; 
r_socket_write ( s , ( void * ) sanitized_data , strlen ( sanitized_data ) ) ; 
free (sanitized_data);
return r_socket_http_answer ( s , code , rlen ) ; 
}",643,-37.032253906386536,-0.05759292986996351
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } char * safe_data = r_str_safe(data); //addition to fix CWE-78 r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( safe_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) safe_data , strlen ( safe_data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; free(safe_data); //addition to fix CWE-78 }",503,-28.320075811688923,-0.0563023375977911
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } 

char *escaped_data = r_str_escape(data);
if (escaped_data == NULL){
    printf (""Error escaping data"");
    free (uri);
    return NULL;
}

r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escaped_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) escaped_data , strlen ( escaped_data ) ) ; free ( escaped_data );

return r_socket_http_answer ( s , code , rlen ) ; }",524,-31.745494584254644,-0.060583004931783674
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } char * sanitized_host = r_str_sanitize_sprintf ( host ) ; if ( ! r_socket_connect_tcp ( s , sanitized_host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , sanitized_host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , sanitized_host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",489,-12.299908174266337,-0.025153186450442407
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } char * safePath = r_str_sanitize_s ( path ) ; if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , safePath , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; free ( safePath ) ; return r_socket_http_answer ( s , code , rlen ) ; }",484,-13.535308997913907,-0.027965514458499808
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; if ( ! url ) { return NULL ; } char * safe_url = r_str_sanitize_s ( url ) ; if ( ! safe_url ) { return NULL ; } char * uri = strdup ( safe_url ) ; if ( ! uri ) { free ( safe_url ) ; return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; free ( safe_url ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; free ( safe_url ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; free ( safe_url ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; free ( safe_url ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",537,-18.040513704674314,-0.03359499758784788
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; int len = strlen ( url ); char * uri = calloc ( len , sizeof ( char ) ) ; if ( ! uri ) { return NULL ; } if ( strlcpy ( uri , url , len + 1 ) >= len + 1 ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } const char * cmd = r_str_newf ( ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) cmd , strlen ( cmd ) ) ; free ( cmd ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",540,-41.54882701893434,-0.07694227225728581
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } r_str_sanitize ( path ) ; s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",470,-8.222367969973451,-0.017494399936113725
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } char * escaped_path = r_str_escape ( path ) ; r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , escaped_path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; free ( escaped_path ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",483,-11.800154790556887,-0.02443096229928962
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } // fix for CWE-78: OS Command Injection // cleanse data before using it char *escaped_data = r_str_escape(data); if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; free(escaped_data); return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escaped_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) escaped_data , strlen ( escaped_data ) ) ; free(escaped_data); return r_socket_http_answer ( s , code , rlen ) ; }",513,-39.06889890509244,-0.0761576976707455
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post (const char * url, const char * data, int * code, int * rlen) {
    RSocket * s ;
    bool ssl = r_str_startswith (url , ""https://"" ) ;
    char * uri = strdup (url ) ;
    if ( ! uri ) {
        return NULL ;
    }
    char * host = strstr (uri , ""://"" ) ;
    if ( ! host ) {
        free (uri ) ;
        printf ( ""Invalid URI"" ) ;
        return NULL ;
    }
    host += 3 ;
    char * port = strchr (host , ':' ) ;
    if ( ! port ) {
        port = ( ssl ) ? ""443"" : ""80"" ;
    } else {
        * port ++ = 0 ;
    }
    char * path = strchr (host , '/' ) ;
    if ( ! path ) {
        path = """" ;
    } else {
        * path ++ = 0 ;
    }
    s = r_socket_new ( ssl ) ;
    if ( ! s ) {
        printf ( ""Cannot create socket\\n"" ) ;
        free (uri ) ;
        return NULL ;
    }
    if ( ! r_socket_connect_tcp (s , host , port , 0 ) ) {
        eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ;
        free (uri ) ;
        return NULL ;
    }
    char * escaped_data = r_str_escape (data);
    if (!escaped_data) {
        eprintf(""Error escaping data\n"");
        free (uri );
        return NULL;
    }
    r_socket_printf (s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escaped_data ) ) ;
    free (uri ) ;
    r_socket_write (s , ( void * ) escaped_data , strlen ( escaped_data ) ) ;
    free(escaped_data);
    return r_socket_http_answer (s , code , rlen ) ;
}",601,-33.061738423308945,-0.05501121201881688
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } 
    char * host = strstr ( uri , ""://"" ) ; 
    if ( ! host ) { 
        free ( uri ) ; 
        printf ( ""Invalid URI"" ) ; 
        return NULL ; 
    } 
    host += 3 ; 
    char * port = strchr ( host , ':' ) ; 
    if ( ! port ) { 
        port = ( ssl ) ? ""443"" : ""80"" ; 
    } else { 
        * port ++ = 0 ; 
    } 
    char * path = strchr ( host , '/' ) ; 
    if ( ! path ) { 
        path = """" ; 
    } else { 
        * path ++ = 0 ; 
    } 
    s = r_socket_new ( ssl ) ; 
    if ( ! s ) { 
        printf ( ""Cannot create socket\\n"" ) ; 
        free ( uri ) ; 
        return NULL ; 
    } 
    
    if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { 
        eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; 
        free ( uri ) ; 
        return NULL ; 
    } 
    // Sanitize user input to prevent OS Command Injection 
    char * sanitized_data = malloc ( sizeof ( char ) * strlen ( data ) + 1 ) ;
    if ( sanitized_data == NULL ) {
        printf ( ""Error allocating memory"" ) ;
        free ( uri ) ;
        return NULL ;
    }
    for ( int i = 0 ; i < strlen ( data ) ; i ++ ) {
        if ( data [ i ] == ';' || data [ i ] == '|' ) {
            sanitized_data [ i ] = ' ' ;
        } else {
            sanitized_data [ i ] = data [ i ] ;
        }
    }
    sanitized_data [ strlen ( data ) ] = '\0' ;

    r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( sanitized_data ) ) ; 
    free ( uri ) ; 
    r_socket_write ( s , ( void * ) sanitized_data , strlen ( sanitized_data ) ) ; 
    free ( sanitized_data ) ; 
    return r_socket_http_answer ( s , code , rlen ) ; 
}",768,-65.50271655050838,-0.08528999550847445
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } char * cleaned_data = r_socket_sanitize_input(data); //sanitize user input before passing to system calls s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( cleaned_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) cleaned_data , strlen ( cleaned_data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }

//sanitize user input
char* r_socket_sanitize_input(const char* data) {
  char* clean_data = (char*)malloc(strlen(data));
  int i;
  for (i = 0; i < strlen(data); i++) {
    if (data[i] == ';' || data[i] == '&' || data[i] == '|' || data[i] == '$' || data[i] == '>' || data[i] == '<' || data[i] == '`') {
      clean_data[i] = ' ';
    } else {
      clean_data[i] = data[i];
    }
    
  }
  clean_data[i] = '\0';
  return clean_data;
}",690,-71.16817222397864,-0.1031422785854763
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } int pathLen = strlen(path); char * safePath = (char*)malloc(pathLen + 1); for (int i = 0; i < pathLen; i++) { safePath[i] = path[i]; if (path[i] == '\'' || path[i] == '`' || path[i] == ';') { safePath[i] = '_'; } } safePath[pathLen] = '\0'; s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , safePath , host , ( int ) strlen ( data ) ) ; free ( uri ) ; free(safePath); r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",566,-31.30884328852275,-0.055315977541559626
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } char * sanitized_data = r_str_sanitize_cmd (data); if (!sanitized_data) { eprintf(""Could not sanitize data\\n""); free(uri); return NULL; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( sanitized_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) sanitized_data , strlen ( sanitized_data ) ) ; free(sanitized_data); return r_socket_http_answer ( s , code , rlen ) ; }",522,-20.945571951209292,-0.04012561676476876
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } 

// Escape user input before writing 
char* escaped_data = r_str_escape (data); 
r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( escaped_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) escaped_data , strlen ( escaped_data ) ) ; free (escaped_data); 
return r_socket_http_answer ( s , code , rlen ) ; }",501,-29.963040775633885,-0.05980646861403969
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } char escaped_path[4096] = {0}; escape_shell_characters(path, escaped_path); s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , escaped_path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }

void escape_shell_characters(char *str, char *escaped_str)
{
    int i = 0, j = 0;

    while (str[i] != '\0') {
        if (str[i] == ';' || str[i] == '&' || str[i] == '|' || 
            str[i] == '>' || str[i] == '<' || str[i] == '$' || 
            str[i] == '(' || str[i] == ')' || str[i] == '`' || 
            str[i] == '\\' || str[i] == '""') {
            escaped_str[j++] = '\\';
        }
        escaped_str[j++] = str[i++];
    }

    escaped_str[j] = '\0';
}",693,-49.257258098014695,-0.07107829451372973
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } char cmd[strlen ( path ) + 1]; // Initialize command string to prevent injection snprintf ( cmd , sizeof ( cmd ) , path ) ; // Copy path string into command s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , cmd , host , ( int ) strlen ( data ) ) ; // Use command string instead of path free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",504,-51.74937891753387,-0.10267733912209101
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } char * safe_host = r_str_escape_single (host); char * safe_port = r_str_escape_single (port); if ( ! r_socket_connect_tcp ( s , safe_host , safe_port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; free(safe_host); free(safe_port); return NULL ; } free(safe_host); free(safe_port); r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",519,-18.608777183823886,-0.03585506201122136
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } int port_num = atoi(port); if ( ! r_socket_connect_tcp ( s , host , port_num , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",471,-8.900102161042538,-0.01889618293214976
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } path = r_str_escape (path); // ADD THIS LINE s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; free (path); // ADD THIS LINE return r_socket_http_answer ( s , code , rlen ) ; }",481,-19.616720234906737,-0.04078320215157326
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; }  char * sanitizedPath = r_str_escape(path); if (sanitizedPath == NULL) { eprintf(""Cannot sanitize path\\n""); free(uri); return NULL; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , sanitizedPath , host , ( int ) strlen ( data ) ) ; free ( uri ) ; free(sanitizedPath); r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",511,-26.02373741166786,-0.05092707908349875
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } 
// CWE-78 OS Command Injection fix 
char *escapedPath = r_str_escape_sh(path);
if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } 
r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , escapedPath , host , ( int ) strlen ( data ) ) ;
free(escapedPath);
free ( uri ) ; 
r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; 
return r_socket_http_answer ( s , code , rlen ) ;
}",506,-41.1006617539382,-0.08122660425679486
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } char * sanitized_data = r_str_escape (data); //escape the data 

r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( sanitized_data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) sanitized_data , strlen ( sanitized_data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }",490,-21.013248768425296,-0.042884181160051625
"The Original Code is vulnerable to CWE-78: OS Command Injection. Fix the vulnerability.
Original Code:
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; return r_socket_http_answer ( s , code , rlen ) ; }
Fixed code:","
R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * safe_url = r_str_escape_single_quotes ( url ) ; if ( ! safe_url ) { return NULL ; } char * uri = strdup ( safe_url ) ; if ( ! uri ) { free ( safe_url ) ; return NULL ; } free ( safe_url ) ; char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot create socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot connect to %s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST /%s HTTP/1.0\\r\\n"" ""User-Agent: radare2 "" R2_VERSION ""\\r\\n"" ""Accept: */*\\r\\n"" ""Host: %s\\r\\n"" ""Content-Length: %i\\r\\n"" ""Content-Type: application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; char *safe_data = r_str_escape_single_quotes ( data ) ; r_socket_write ( s , ( void * ) safe_data , strlen ( safe_data ) ) ; free ( safe_data ) ; return r_socket_http_answer ( s , code , rlen ) ; }",538,-22.995598190414615,-0.042742747565826425
