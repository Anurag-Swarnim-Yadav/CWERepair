Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen <= 0) return -1; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",190,-5.370774338861612,-0.028267233362429534
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
    struct user_key_payload * zap = NULL ; 
    int ret ; 
    if(prep->datalen < 0) {
        return -1;
    }
    ret = key_payload_reserve ( key , prep -> datalen ) ; 
    if ( ret < 0 ) return ret ; 
    key -> expiry = prep -> expiry ; 
    if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; 
    rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; 
    prep -> payload . data [ 0 ] = NULL ; 
    if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; 
    return ret ; 
}",230,-11.76819074761996,-0.05116604672878243
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) {
    struct user_key_payload * zap = NULL ;
    int ret ;

    if (prep->datalen <= 0)
        return -1;

    ret = key_payload_reserve ( key , prep -> datalen ) ;
    if ( ret < 0 )
        return ret ;

    key -> expiry = prep -> expiry ;
    if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) )
        zap = dereference_key_locked ( key ) ;

    rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ;
    prep -> payload . data [ 0 ] = NULL ;
    if ( zap )
        call_rcu ( & zap -> rcu , user_free_payload_rcu ) ;

    return ret ;
}",221,-13.343973197085447,-0.06037996921758121
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen == 0) {return -1;} ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",191,-10.385990854046858,-0.05437691546621391
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
  if (prep->datalen < 0) {
    return -1;
  }
  struct user_key_payload * zap = NULL ; 
  int ret ; 
  ret = key_payload_reserve ( key , prep -> datalen ) ; 
  if ( ret < 0 ) return ret ; 
  key -> expiry = prep -> expiry ; 
  if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; 
  rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; 
  prep -> payload . data [ 0 ] = NULL ; 
  if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; 
  return ret ; 
}",230,-11.67387041013934,-0.050755958304953656
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","

int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
    if (!prep || !key) return -1;
    struct user_key_payload * zap = NULL ;
    int ret ;
    ret = key_payload_reserve ( key , prep -> datalen ) ;
    if ( ret < 0 ) return ret ;
    key -> expiry = prep -> expiry ;
    if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ){
        if (prep->payload.data[0])
            zap = dereference_key_locked ( key ) ;
        rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ;
        prep -> payload . data [ 0 ] = NULL ;
    }
    if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ;
    return ret ;
}",231,-27.814801907996127,-0.12041039787011311
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
  struct user_key_payload * zap = NULL ; 
  int ret ; 
  int is_valid_input = validate_input(prep);
  if(!is_valid_input){
    return -1;
  }
  ret = key_payload_reserve ( key , prep -> datalen ) ; 
  if ( ret < 0 ){
    return ret ;
  }
  key -> expiry = prep -> expiry ; 
  if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ){
    zap = dereference_key_locked ( key ) ; 
  }
  rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; 
  prep -> payload . data [ 0 ] = NULL ; 
  if ( zap ){
    call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; 
  }
  return ret ; 
}

int validate_input(struct* key_preparsed_payload * prep) {
  if (!prep || !(prep->datalen) || !(prep->expiry) || !(prep->payload.data)) {
    return 0;
  }
  return 1;
}",330,-59.846231609842626,-0.1813522169995231
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; 
//Add input validation
if (prep == NULL || prep->datalen == 0) return -1;

ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",203,-13.965639870596153,-0.0687962555201781
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if ( prep -> datalen <= 0 ) //input validation added return -1 ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",194,-15.9629369314399,-0.08228318005896856
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; 

// Added input validation
if (key == NULL || prep == NULL)
	return -1;

if (prep->datalen <= 0)
	return -1;

ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",220,-18.528028328884684,-0.08421831058583948
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","

int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; 

if(prep->datalen == 0) {
  return -EINVAL;
}
ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",202,-20.34949477605356,-0.10074007314878
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ;    
// Validate input 
if (!prep || !prep->datalen) {
    return -EINVAL;
}

ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",208,-24.250271622728828,-0.11658784434004245
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen < 0 || prep->datalen > MAX_PAYLOAD_SIZE) return -EINVAL; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",206,-8.588824732466742,-0.04169332394401331
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
 int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
   struct user_key_payload * zap = NULL; 
   int ret; 
   
   if(key == NULL || prep == NULL)
     return -1;
  
   ret = key_payload_reserve ( key , prep -> datalen ) ; 
   if ( ret < 0 ) return ret ; 
   
   key -> expiry = prep -> expiry ; 
   if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; 
   rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; 
   prep -> payload . data [ 0 ] = NULL ; 
   if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; 
   return ret ; 
 }",232,-37.64624879483342,-0.1622683137708337
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
  if (prep->datalen <= 0) {
    return -1;
  }
  struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; 
}",203,-11.2259750200938,-0.05530036955711232
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
  struct user_key_payload * zap = NULL ; 
  int ret ; 
  
  if (prep->datalen <= 0) {
     return -1;
  }
  
  ret = key_payload_reserve ( key , prep -> datalen ) ; 
  if ( ret < 0 ) return ret ; 
  key -> expiry = prep -> expiry ; 
  if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; 
  rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; 
  prep -> payload . data [ 0 ] = NULL ; 
  if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; 
  return ret ; 
}",234,-15.32043598444215,-0.06547194865146218
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) {
    struct user_key_payload * zap = NULL ;
    int ret ;
    if (prep->datalen > 0) {
        ret = key_payload_reserve ( key , prep -> datalen ) ;
        if ( ret < 0 ) return ret ;
        key -> expiry = prep -> expiry ;
        if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) )
            zap = dereference_key_locked ( key ) ;
        rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ;
        prep -> payload . data [ 0 ] = NULL ;
        if ( zap )
            call_rcu ( & zap -> rcu , user_free_payload_rcu ) ;
        return ret ;
    }
    return -1;
}",223,-14.17587696818348,-0.0635689550142757
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen >= 0){ ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; } else { return -1; } }",194,-10.89608215689224,-0.0561653719427435
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
	struct user_key_payload * zap = NULL ; 
	int ret ; 

	if (prep == NULL) {
		return -1;
	}
	
	ret = key_payload_reserve ( key , prep -> datalen ) ; 
	if ( ret < 0 ) 
		return ret ; 
	
	key -> expiry = prep -> expiry ; 
	if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) 
		zap = dereference_key_locked ( key ) ; 
	
	rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; 
	prep -> payload . data [ 0 ] = NULL ; 
	if ( zap ) 
		call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; 
	
	return ret ; 
}",247,-17.948761175929473,-0.07266704929526102
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
  if(prep == NULL) {
    return -1;
  }
  
  struct user_key_payload * zap = NULL ; 
  int ret ; 
  ret = key_payload_reserve ( key , prep -> datalen ) ; 
  
  if ( prep -> datalen < 0 ) {
    return -1;
  }
  
  if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; 
  
  if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; 
  rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; 
  prep -> payload . data [ 0 ] = NULL ; 
  if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; 
  return ret ; 
}",253,-29.597738597927236,-0.11698710908271635
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen > MAX_PAYLOAD_LEN) return -1 ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",196,-16.115687499849066,-0.08222289540739319
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if ( prep -> datalen > 0 ) { ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; } else { return -1; } if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",195,-10.143350388627825,-0.05201718148014269
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
  struct user_key_payload * zap = NULL ; 
  int ret ; 

  // check if the data length is within the valid range
  if (prep->datalen < 0 || prep->datalen > MAX_DATA_LENGTH) return 0;
  
  ret = key_payload_reserve ( key , prep -> datalen ) ; 
  if ( ret < 0 ) return ret ; 
  key -> expiry = prep -> expiry ; 
  if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) 
    zap = dereference_key_locked ( key ) ; 
  rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; 
  prep -> payload . data [ 0 ] = NULL ; 
  if ( zap ) 
    call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; 
    
  return ret ; 
 }",259,-41.24076074895685,-0.1592307364824589
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen <= 0) return -1; //Added input validation ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",194,-10.566919678162167,-0.05446865813485653
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
    if (prep->datalen < 0) return -EINVAL;
    struct user_key_payload * zap = NULL ;
    int ret ;
    ret = key_payload_reserve ( key , prep -> datalen ) ;
    if ( ret < 0 ) return ret ;
    key -> expiry = prep -> expiry ;
    if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) )
        zap = dereference_key_locked ( key ) ;
    rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ;
    prep -> payload . data [ 0 ] = NULL ;
    if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ;
    return ret ;
}",218,-17.69481176428852,-0.08116886130407577
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen < 0) { return -1; } ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",192,-6.329809140913882,-0.032967755942259806
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen == 0) return -1; 
ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",192,-9.750755662198053,-0.05078518574061486
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if ( prep -> datalen <= 0 ) return -1 ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",190,-6.685649302990541,-0.035187627910476534
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; //Check if prep->datalen is valid and not greater than KEY_MAX_LEN if ( prep->datalen > 0 && prep->datalen <= KEY_MAX_LEN ){ ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
else {
return -1;
}
}",232,-38.606857892679265,-0.1664088702270658
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen <= 0) { return -1; } ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",192,-5.5300024825829635,-0.028802096263452936
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if ( prep -> datalen > 0 ) { ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; } else { return -1; } return ret ; }",195,-7.647029220678825,-0.039215534465019616
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen <= 0) { return -1; } ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",192,-5.5300024825829635,-0.028802096263452936
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; 
//validate the input 
if(!prep || prep->datalen <= 0) {
  return -1;
}

ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",209,-22.092550319259814,-0.10570598238880294
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; // Validate input before processing if (prep == NULL || prep->datalen <= 0 || prep->payload.data[0] == NULL || prep->expiry < 0) return -1; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",220,-20.89531536006523,-0.09497870618211468
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; 
if (prep->datalen > 0 && prep->datalen <= MAX_PAYLOAD_LEN){
    ret = key_payload_reserve ( key , prep -> datalen ) ; 
    if ( ret < 0 ) return ret ; 
    key -> expiry = prep -> expiry ; 
    if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) 
        zap = dereference_key_locked ( key ) ; 
    rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; 
    prep -> payload . data [ 0 ] = NULL ; 
    if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; 
    return ret ; 
}
else
    return -1;
}",241,-22.56884978317824,-0.09364667959824996
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
    struct user_key_payload * zap = NULL ; 
    int ret; 
    if (prep == NULL || prep->datalen == 0) 
        return -1;
    int min_data_len = min(prep->datalen, MAX_PAYLOAD_LENGTH);
    ret = key_payload_reserve ( key , min_data_len ) ; 
    if ( ret < 0 ) 
        return ret ; 
    key -> expiry = prep -> expiry ; 
    if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) 
        zap = dereference_key_locked ( key ) ; 
    rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; 
    prep -> payload . data [ 0 ] = NULL ; 
    if ( zap ) 
        call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; 
    return ret ; 
}",266,-43.00165568599494,-0.1616603597217855
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen == 0) return -EINVAL; // Add input validation to check data length is valid ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; 
}",204,-27.85173585834493,-0.13652811695267122
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; // Check to make sure the key payload is valid if ( prep->datalen < 0 ) { return -1; } ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",202,-23.74738638041884,-0.11756131871494474
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update(struct key * key, struct key_preparsed_payload * prep) {
struct user_key_payload * zap = NULL;
int ret;

// Add input validation condition
if (prep == NULL || key == NULL || prep->datalen < 0) {
    return -1;
}

ret = key_payload_reserve(key, prep->datalen);
if (ret < 0) return ret;
key->expiry = prep->expiry;
if (!test_bit(KEY_FLAG_NEGATIVE, &key->flags)) zap = dereference_key_locked(key);
rcu_assign_keypointer(key, prep->payload.data[0]);
prep->payload.data[0] = NULL;
if (zap) call_rcu(&zap->rcu, user_free_payload_rcu);

return ret;
}",220,-32.13756035700386,-0.14607981980456303
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { 
  if(key == NULL || prep == NULL) {
    return -1;
  }
  struct user_key_payload * zap = NULL ; 
  int ret ; 
  ret = key_payload_reserve ( key , prep -> datalen ) ; 
  if ( ret < 0 ) 
    return ret ; 
  key -> expiry = prep -> expiry ; 
  if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) 
    zap = dereference_key_locked ( key ) ; 
  rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; 
  prep -> payload . data [ 0 ] = NULL ; 
  if ( zap ) 
    call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; 
  return ret ; 
}",239,-12.427773637141462,-0.051999052875068875
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (!prep) { return -EINVAL; } ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",188,-9.706567308442947,-0.05163067717256887
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen == 0) { return -1; } ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",192,-6.500558893863236,-0.03385707757220435
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen <= 0) return -1; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",190,-5.307064023361066,-0.027931915912426667
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if(prep -> datalen <= 0) return -1; if(prep -> expiry < 0) return -1; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",203,-13.528236385570324,-0.0666415585496075
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen > 0) { ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; } else { return -1; } }",195,-5.373934585150001,-0.02755863889820513
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; 
if (prep->datalen <= 0) {
    return -1;
}
ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",198,-9.667561059205827,-0.04882606595558499
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) {
  struct user_key_payload * zap = NULL ; 
  int ret ; 
  if(prep == NULL)
    return -1;
  if(prep->datalen < 0 || prep->datalen > MAX_DATALEN)
    return -1;
  ret = key_payload_reserve ( key , prep -> datalen ) ; 
  if ( ret < 0 ) 
    return ret ; 
  key -> expiry = prep -> expiry ; 
  if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) 
    zap = dereference_key_locked ( key ) ; 
  rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; 
  prep -> payload . data [ 0 ] = NULL ; 
  if ( zap ) 
    call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; 
  return ret ; 
}",261,-22.112822160989438,-0.0847234565555151
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; 

// Add input validation
if (prep == NULL || key == NULL || prep->payload.data[0] == NULL || prep->datalen < 0) {
    return -1;
}

ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",225,-18.426200583728814,-0.0818942248165725
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update(struct key *key, struct key_preparsed_payload *prep) {
    struct user_key_payload *zap = NULL;
    int ret;

    if (prep->datalen <= 0) {
        return -1;
    }

    ret = key_payload_reserve(key, prep->datalen);
    if (ret < 0) return ret;
    key->expiry = prep->expiry;
    if (!test_bit(KEY_FLAG_NEGATIVE, &key->flags)) zap = dereference_key_locked(key);
    rcu_assign_keypointer(key, prep->payload.data[0]);
    prep->payload.data[0] = NULL;
    if (zap) call_rcu(&zap->rcu, user_free_payload_rcu);
    return ret;
}",215,-13.754729254135754,-0.063975484902957
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }
Fixed code:","
int user_update ( struct key * key , struct key_preparsed_payload * prep ) { struct user_key_payload * zap = NULL ; int ret ; if (prep->datalen <= 0) return -1; ret = key_payload_reserve ( key , prep -> datalen ) ; if ( ret < 0 ) return ret ; key -> expiry = prep -> expiry ; if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) zap = dereference_key_locked ( key ) ; rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; prep -> payload . data [ 0 ] = NULL ; if ( zap ) call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; return ret ; }",190,-5.354842353502119,-0.02818338080790589
