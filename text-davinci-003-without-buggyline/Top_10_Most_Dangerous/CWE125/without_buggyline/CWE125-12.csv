Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if (len > length) { ND_PRINT((ndo, ""\\n\\t  %s Option (0x%02x) length %u is greater than packet length %d"", tok2str(ccpconfopts_values, ""Unknown"", opt), opt, len, length)); return 0; } if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",928,-24.411150997850037,-0.026305119609752195
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options(netdissect_options *ndo, const u_char *p, int length) {
    int len, opt;
    if (length < 2)
        return 0;
    ND_TCHECK2(*p, 2);
    len = p[1];
    opt = p[0];
    if (length < len)
        return 0;
    if (len < 2) {
        ND_PRINT((ndo, ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"", tok2str(ccpconfopts_values, ""Unknown"", opt), opt, len));
        return 0;
    }
    ND_PRINT((ndo, ""\\n\\t  %s Option (0x%02x), length %u"", tok2str(ccpconfopts_values, ""Unknown"", opt), opt, len));

    // Added check to make sure length is valid
    if (len > length) {
        ND_PRINT((ndo, ""\\n\\t  Length is greater than packet length""));
        return 0;
    }

    switch (opt) {
        case CCPOPT_BSDCOMP:
            if (len < 3) {
                ND_PRINT((ndo, "" (length bogus, should be >= 3)""));
                return len;
            }
            ND_TCHECK2(*(p + 2), 1);
            ND_PRINT((ndo, "": Version: %u, Dictionary Bits: %u"", p[2] >> 5, p[2] & 0x1f));
            break;
        case CCPOPT_MVRCA:
            if (len < 4) {
                ND_PRINT((ndo, "" (length bogus, should be >= 4)""));
                return len;
            }
            ND_TCHECK2(*(p + 2), 1);
            ND_PRINT((ndo, "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"", (p[2] & 0xc0) >> 6, (p[2] & 0x20) ? ""Enabled"" : ""Disabled"", p[2] & 0x1f, p[3]));
            break;
        case CCPOPT_DEFLATE:
            if (len < 4) {
                ND_PRINT((ndo, "" (length bogus, should be >= 4)""));
                return len;
            }
            ND_TCHECK2(*(p + 2), 1);
            ND_PRINT((ndo, "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"", (p[2] & 0xf0) >> 4, ((p[2] & 0x0f) == 8) ? ""zlib"" : ""unknown"", p[2] & 0x0f, (p[3] & 0xfc) >> 2, p[3] & 0x03));
            break;
#if 0
        case CCPOPT_OUI:
        case CCPOPT_PRED1:
        case CCPOPT_PRED2:
        case CCPOPT_PJUMP:
        case CCPOPT_HPPPC:
        case CCPOPT_STACLZS:
        case CCPOPT_MPPC:
        case CCPOPT_GFZA:
        case CCPOPT_V42BIS:
        case CCPOPT_LZSDCP:
        case CCPOPT_DEC:
        case CCPOPT_RESV:
            break;
#endif
        default:
            if (ndo->ndo_vflag < 2)
                print_unknown_data(ndo, &p[2], ""\\n\\t    "", len - 2);
            break;
    }
    if (ndo->ndo_vflag > 1)
        print_unknown_data(ndo, &p[2], ""\\n\\t    "", len - 2);
    return len;
trunc:
    ND_PRINT((ndo, ""[|ccp]""));
    return 0;
}",992,-37.58711788194579,-0.03789023980034858
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","

static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len >= length ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",868,-9.25170409865165,-0.010658645274944298
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; if (len > length) {
     return 0;
} 
switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",883,-15.738489454558401,-0.017823883866997056
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) { if(len != 2) { print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) } } break ; } if ( ndo -> ndo_vflag > 1 ) { if(len != 2) { print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) } } return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",880,-22.222527850354556,-0.025252872557221088
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) {
 int len , opt ;

 if ( length < 2 ) 
  return 0 ;

 ND_TCHECK2 ( * p , 2 ) ; 
 len = p [ 1 ] ; 
 opt = p [ 0 ] ;
 
 if ( length < len || len < 2) 
 {
  ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; 
  return 0 ;
 }
 
 ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; 
 
 switch ( opt ) 
 { 
  case CCPOPT_BSDCOMP :
   if ( len < 3 ) 
   { 
    ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; 
    return len ;
   }
   ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; 
   ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; 
   break ; 
  
  case CCPOPT_MVRCA : 
   if ( len < 4 ) 
   { 
    ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; 
    return len ; 
   }
   ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; 
   ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; 
   break ; 
   
  case CCPOPT_DEFLATE : 
   if ( len < 4 ) 
   { 
    ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; 
    return len ; 
   } 
   ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; 
   ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; 
   break ; 
   
  # if 0 
   case CCPOPT_OUI : 
   case CCPOPT_PRED1 : 
   case CCPOPT_PRED2 : 
   case CCPOPT_PJUMP : 
   case CCPOPT_HPPPC : 
   case CCPOPT_STACLZS : 
   case CCPOPT_MPPC : 
   case CCPOPT_GFZA : 
   case CCPOPT_V42BIS : 
   case CCPOPT_LZSDCP : 
   case CCPOPT_DEC : 
   case CCPOPT_RESV : 
   break ; 
  # endif 
  
  default : 
   if ( ndo -> ndo_vflag < 2 ) 
    print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; 
   break ; 
 } 
 
 if ( ndo -> ndo_vflag > 1 ) 
  print_unknown_data ( ndo , & p",1000,-50.200318075744555,-0.05020031807574456
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len < 2 || length < len ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) { if (len > 2) { print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; } else { ND_PRINT ( ( ndo , ""No data present"") ) ; } } break ; } if ( ndo -> ndo_vflag > 1 ) { if (len > 2) { print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; } else { ND_PRINT ( ( ndo , ""No data present"") ) ; } } return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",920,-21.476778595071917,-0.02334432455986078
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","

static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } if ( length < len ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= %u)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , length , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) { if (len - 2 <= 0) { ND_PRINT ( ( ndo , "" (length bogus, should be > 0)"" ) ) ; return len ; } else { print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; } } break ; } if ( ndo -> ndo_vflag > 1 && len - 2 > 0) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",983,-31.55198055704624,-0.03209764044460452
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len > length ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be <= %d)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len, length ) ) ; return 0 ; } if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",936,-8.090074796141653,-0.008643242303570142
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; 

if (!ND_TCHECK2 ( * p , 2 ) ) { //check for length of 2 bytes
  	ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; 
    return 0 ;
} 

len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } 

if (!ND_TCHECK2 ( * ( p + 2 ) , 1 ) ) { //check for length of 1 byte
  	ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; 
    return 0 ;
} 

ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } 

if (!ND_TCHECK2 ( * ( p + 2 ) , 1 ) ) { //check for length of 1 byte
  	ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; 
    return 0 ;
} 

ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } 

if (!ND_TCHECK2 ( * ( p + 2 ) , 1 ) ) { //check for length of 1 byte
  	ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; 
    return 0 ;
} 

ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p",1000,-48.51882922443847,-0.04851882922443847
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } if ( length < len ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length too short, should be >= %d)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len, len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",937,-13.895217489317254,-0.01482947437493837
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",862,-4.392456801948924,-0.0050956575428641815
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","

static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 || len < 2) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 && len >= 2) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",871,-13.839789727901715,-0.01588954044535214
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; if (len > length) { /* Prevent Out-of-bounds Read */ len = length; } switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",889,-14.946521854122569,-0.016812735493951146
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; 
//check to make sure that the array index is within the bounds of the array 
if(length >= 2) {
    ND_TCHECK2 ( * p , 2 ) ; 
    len = p [ 1 ] ; 
    opt = p [ 0 ] ; 
    if ( length < len ) return 0 ; 
    if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } 
//check to make sure that the array index is within the bounds of the array 
if(length >= 3) {
    ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; 
}
    break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } 
//check to make sure that the array index is within the bounds of the array
if(length >= 4) {
    ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; 
}
    break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } 
//check to make sure that the array index is within the bounds of the array
if(length >= 4) {
    ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; 
}
    break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : 
//check to make sure that the array index is within the bounds of the array 
if(length >= len) {
    if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; 
}
    break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [",1000,-53.1345483686986,-0.0531345483686986
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 && len >= 2) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 && len >= 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",870,-10.063515176893226,-0.011567258824015202
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",862,-4.075778245652083,-0.004728281027438611
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len < 2 || length < len) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",862,-5.901321563376155,-0.006846080699972337
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) { if (length < len) return 0; print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; } break ; } if ( ndo -> ndo_vflag > 1 ) { if (length < len) return 0; print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; } return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",884,-11.494822368010585,-0.013003192723993874
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",862,-3.81375720009734,-0.004424312297096682
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","

static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len < 2 || length < len ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2 and <= %d)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len , length ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",869,-10.097552340986553,-0.011619738021848737
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } if ( length < len ) return 0 ; ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",867,-6.658837271584975,-0.007680319805749683
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options(netdissect_options *ndo, const u_char *p, int length) {
    int len, opt;
    if (length < 2) return 0;
    
    ND_TCHECK2(*p, 2);
    len = p[1];
    opt = p[0];
    if (length < len || len < 2) {
        ND_PRINT((ndo, ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"", tok2str(ccpconfopts_values, ""Unknown"", opt), opt, len));
        return 0;
    }
    
    ND_PRINT((ndo, ""\\n\\t  %s Option (0x%02x), length %u"", tok2str(ccpconfopts_values, ""Unknown"", opt), opt, len));
    switch (opt) {
    case CCPOPT_BSDCOMP:
        if (len < 3) {
            ND_PRINT((ndo, "" (length bogus, should be >= 3)""));
            return len;
        }
        ND_TCHECK2(*(p + 2), 1);
        ND_PRINT((ndo, "": Version: %u, Dictionary Bits: %u"", p[2] >> 5, p[2] & 0x1f));
        break;
    case CCPOPT_MVRCA:
        if (len < 4) {
            ND_PRINT((ndo, "" (length bogus, should be >= 4)""));
            return len;
        }
        ND_TCHECK2(*(p + 2), 1);
        ND_PRINT((ndo, "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"", (p[2] & 0xc0) >> 6, (p[2] & 0x20) ? ""Enabled"" : ""Disabled"", p[2] & 0x1f, p[3]));
        break;
    case CCPOPT_DEFLATE:
        if (len < 4) {
            ND_PRINT((ndo, "" (length bogus, should be >= 4)""));
            return len;
        }
        ND_TCHECK2(*(p + 2), 1);
        ND_PRINT((ndo, "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"", (p[2] & 0xf0) >> 4, ((p[2] & 0x0f) == 8) ? ""zlib"" : ""unknown"", p[2] & 0x0f, (p[3] & 0xfc) >> 2, p[3] & 0x03));
        break;
#if 0
    case CCPOPT_OUI:
    case CCPOPT_PRED1:
    case CCPOPT_PRED2:
    case CCPOPT_PJUMP:
    case CCPOPT_HPPPC:
    case CCPOPT_STACLZS:
    case CCPOPT_MPPC:
    case CCPOPT_GFZA:
    case CCPOPT_V42BIS:
    case CCPOPT_LZSDCP:
    case CCPOPT_DEC:
    case CCPOPT_RESV:
        break;
#endif
    default:
        if (ndo->ndo_vflag < 2) {
            if (len > 2){
                ND_TCHECK2(*(p + 2), len - 2);
            }
            print_unknown_data(ndo, &p[2], ""\\n\\t    "", len - 2);
        }
        break;
    }
    
    if (ndo->ndo_vflag > 1) {
        if (len > 2){
            ND_TCHECK2(*(p + 2), len - 2);
        }
        print_unknown_data(ndo, &p[2], ""\\n\\t    "", len - 2);
    }
    return len;
trunc:
    ND_PRINT((ndo, ""[|ccp]""));
    return 0;
}",999,-33.06739947041007,-0.033100499970380455
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) {
  int len , opt ;
  if ( length < 2 ) {
    return 0 ;
  }
  if ( length < 2 ) {
    ND_TCHECK2 ( * p , 2 ) ;
  }
  len = p [ 1 ] ;
  opt = p [ 0 ] ;
  if ( length < len ) {
    return 0 ;
  }
  if ( len < 2 ) {
    ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ;
    return 0 ;
  }
  ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ;
  switch ( opt ) {
    case CCPOPT_BSDCOMP :
      if ( len < 3 ) {
        ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ;
        return len ;
      }
      if ( len < 3 ) {
        ND_TCHECK2 ( * ( p + 2 ) , 1 ) ;
      }
      ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ;
      break ;
    case CCPOPT_MVRCA :
      if ( len < 4 ) {
        ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ;
        return len ;
      }
      if ( len < 4 ) {
        ND_TCHECK2 ( * ( p + 2 ) , 1 ) ;
      }
      ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ;
      break ;
    case CCPOPT_DEFLATE :
      if ( len < 4 ) {
        ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ;
        return len ;
      }
      if ( len < 4 ) {
        ND_TCHECK2 ( * ( p + 2 ) , 1 ) ;
      }
      ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ;
      break ;
# if 0
    case CCPOPT_OUI :
    case CCPOPT_PRED1 :
    case CCPOPT_PRED2 :
    case CCPOPT_PJUMP :
    case CCPOPT_HPPPC :
    case CCPOPT_STACLZS :
    case CCPOPT_MPPC :
    case CCPOPT_GFZA :
    case CCPOPT_V42BIS :
    case CCPOPT_LZSDCP :
    case CCPOPT_DEC :
    case CCPOPT_RESV :
      break ;
# endif
    default :
      if ( ndo -> ndo_vflag < 2 ) {
        if ( len < 2 ) {
          print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ;
        }
      }
      break ;
  }
  if ( ndo -> ndo_vflag > 1",1000,-23.451358954641954,-0.023451358954641954
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 && len > 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 && len > 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",870,-7.527573342382989,-0.008652383152164355
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; // Limit the length to the data that can be accessed if (len > length) { len = length; } switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",890,-26.995579185019714,-0.030332111443842374
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 || length > UINT16_MAX ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",870,-12.13149600257052,-0.01394424827881669
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; 

if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; 

if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; }

ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( len > 2 ) { if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; } break ; } if ( ndo -> ndo_vflag > 1 && len > 2 ) { print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; } return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",884,-19.435277728360813,-0.02198560829000092
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",862,-4.075778245652083,-0.004728281027438611
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len < 2 || length < len ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 && (length - 2) > 2) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 && (length - 2) > 2) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",878,-19.47835851771565,-0.02218491858509755
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options(netdissect_options *ndo, const u_char *p, int length) {
	int len, opt;
	if (length < 2)
		return 0;
	ND_TCHECK2(*p, 2);
	len = p[1];
	opt = p[0];
	if (length < len || len < 2) {
		ND_PRINT((ndo, ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"",
			tok2str(ccpconfopts_values, ""Unknown"", opt), opt, len));
		return 0;
	}
	ND_PRINT((ndo, ""\\n\\t  %s Option (0x%02x), length %u"",
		tok2str(ccpconfopts_values, ""Unknown"", opt), opt, len));
	switch (opt) {
	case CCPOPT_BSDCOMP:
		if (len < 3) {
			ND_PRINT((ndo, "" (length bogus, should be >= 3)""));
			return len;
		}
		ND_TCHECK2(*(p + 2), 1);
		ND_PRINT((ndo, "": Version: %u, Dictionary Bits: %u"", p[2] >> 5, p[2] & 0x1f));
		break;
	case CCPOPT_MVRCA:
		if (len < 4) {
			ND_PRINT((ndo, "" (length bogus, should be >= 4)""));
			return len;
		}
		ND_TCHECK2(*(p + 2), 1);
		ND_PRINT((ndo, "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"",
			(p[2] & 0xc0) >> 6, (p[2] & 0x20) ? ""Enabled"" : ""Disabled"",
			p[2] & 0x1f, p[3]));
		break;
	case CCPOPT_DEFLATE:
		if (len < 4) {
			ND_PRINT((ndo, "" (length bogus, should be >= 4)""));
			return len;
		}
		ND_TCHECK2(*(p + 2), 1);
		ND_PRINT((ndo, "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"",
			(p[2] & 0xf0) >> 4,
			((p[2] & 0x0f) == 8) ? ""zlib"" : ""unknown"",
			p[2] & 0x0f, (p[3] & 0xfc) >> 2, p[3] & 0x03));
		break;
#if 0
	case CCPOPT_OUI:
	case CCPOPT_PRED1:
	case CCPOPT_PRED2:
	case CCPOPT_PJUMP:
	case CCPOPT_HPPPC:
	case CCPOPT_STACLZS:
	case CCPOPT_MPPC:
	case CCPOPT_GFZA:
	case CCPOPT_V42BIS:
	case CCPOPT_LZSDCP:
	case CCPOPT_DEC:
	case CCPOPT_RESV:
		break;
#endif
	default:
		if (ndo->ndo_vflag < 2) {
			if (len - 2 > 0)
				print_unknown_data(ndo, &p[2], ""\\n\\t    "", len - 2);
		}
		break;
	}
	if (ndo->ndo_vflag > 1) {
		if (len - 2 > 0)
			print_unknown_data(ndo, &p[2], ""\\n\\t    "", len - 2);
	}

	return len;",1000,-25.837515283973993,-0.025837515283973992
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len > length ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) { if ( len <= length ) { print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; } else { ND_PRINT ( ( ndo , "" (length exceeds packet size)"" ) ) ; } } break ; } if ( ndo -> ndo_vflag > 1 ) { if ( len <= length ) { print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; } else { ND_PRINT ( ( ndo , "" (length exceeds packet size)"" ) ) ; } } return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",931,-16.788863710732556,-0.018033151139347538
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { 
case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } if(len >= 3){
    ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; 
    ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; 
    }
break ; 
case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } 
if(len >= 4){
    ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; 
    ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; 
    }
break ; 
case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } 
if(len >= 4){
    ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; 
    ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; 
    }
break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",925,-32.107706445595696,-0.03471103399523859
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","

static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; if ( len > length ) { ND_PRINT ( ( ndo , ""\\n\\t  Error: Length is greater than remaining bytes."" ) ) ; return 0; } switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",906,-31.115518820274236,-0.03434383975747708
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","

static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len < 2 || length < len ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 && len <= length ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",867,-10.187196008876949,-0.011749937726501672
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } 
// Check if length is greater than or equal to len //
if ( length < len ) return 0 ; ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",882,-24.455585356098318,-0.027727421038660223
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","

static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 && len > 2) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 && len > 2) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",871,-8.73889227754115,-0.01003317138638479
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","

static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } if ( length < len ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length exceeds packet size)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",931,-9.852205669530868,-0.010582390622482136
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length invalid, should be <= %u)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len , length ) ) ; return 0 ; } if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",936,-11.404216295945202,-0.012183991769172224
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len > length ) len = length; // Prevent Out-of-bounds Read if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : // Prevent Out-of-bounds Read if ( ndo -> ndo_vflag < 2 && len > 2) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 && len > 2) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",894,-24.61167345933263,-0.027529836084264684
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } if (len > length) { 
    return 0;
  } else {
    ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }
}",889,-20.409232130129716,-0.022957516456838824
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","

static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 && len > 2 ) { print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; } break ; } if ( ndo -> ndo_vflag > 1 && len > 2 ) { print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; } return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",875,-10.552311830367538,-0.012059784948991471
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( len >= length ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",867,-8.131257464349392,-0.009378612992329172
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",862,-3.9692590151252425,-0.0046047088342520215
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","

static int print_ccp_config_options(netdissect_options *ndo, const u_char *p, int length) {
    int len, opt;
    if (length < 2)
        return 0;
    ND_TCHECK2(*p, 2);
    len = p[1];
    opt = p[0];
    if (length < len)
        return 0;
    if (len < 2) {
        ND_PRINT((ndo, ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"", tok2str(ccpconfopts_values, ""Unknown"", opt), opt, len));
        return 0;
    }
    ND_PRINT((ndo, ""\\n\\t  %s Option (0x%02x), length %u"", tok2str(ccpconfopts_values, ""Unknown"", opt), opt, len));
    if (len > 2) {
        switch (opt) {
            case CCPOPT_BSDCOMP:
                if (len < 3) {
                    ND_PRINT((ndo, "" (length bogus, should be >= 3)""));
                    return len;
                }
                ND_TCHECK2(*(p + 2), 1);
                ND_PRINT((ndo, "": Version: %u, Dictionary Bits: %u"", p[2] >> 5, p[2] & 0x1f));
                break;
            case CCPOPT_MVRCA:
                if (len < 4) {
                    ND_PRINT((ndo, "" (length bogus, should be >= 4)""));
                    return len;
                }
                ND_TCHECK2(*(p + 2), 1);
                ND_PRINT((ndo, "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"", (p[2] & 0xc0) >> 6, (p[2] & 0x20) ? ""Enabled"" : ""Disabled"", p[2] & 0x1f, p[3]));
                break;
            case CCPOPT_DEFLATE:
                if (len < 4) {
                    ND_PRINT((ndo, "" (length bogus, should be >= 4)""));
                    return len;
                }
                ND_TCHECK2(*(p + 2), 1);
                ND_PRINT((ndo, "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"", (p[2] & 0xf0) >> 4, ((p[2] & 0x0f) == 8) ? ""zlib"" : ""unknown"", p[2] & 0x0f, (p[3] & 0xfc) >> 2, p[3] & 0x03));
                break;
#if 0
            case CCPOPT_OUI:
            case CCPOPT_PRED1:
            case CCPOPT_PRED2:
            case CCPOPT_PJUMP:
            case CCPOPT_HPPPC:
            case CCPOPT_STACLZS:
            case CCPOPT_MPPC:
            case CCPOPT_GFZA:
            case CCPOPT_V42BIS:
            case CCPOPT_LZSDCP:
            case CCPOPT_DEC:
            case CCPOPT_RESV:
                break;
#endif
            default:
                if (ndo->ndo_vflag < 2)
                    print_unknown_data(ndo, &p[2], ""\\n\\t    "", len - 2);
                break;
        }
    }
    if (ndo->ndo_vflag > 1) {
        if (len > 2)
            print_unknown_data(ndo, &p[2], ""\\n\\t    "", len - 2);
        else
            return 0;
    }
    return len;
trunc:
    ND_PRINT((ndo, ""[|ccp]""));
    return 0;
}",973,-22.918421994137418,-0.023554390538681826
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { 
  int len , opt ; 
  if ( length < 2 ) return 0 ; 
  ND_TCHECK2 ( * p , 2 ) ; 
  len = p [ 1 ] ; 
  opt = p [ 0 ] ; 
  if ( length < 2 || length < len ) { 
    ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; 
    return 0 ; 
  }
  ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; 
  switch ( opt ) { 
    case CCPOPT_BSDCOMP : 
      if ( len < 3 ) { 
        ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; 
        return len ; 
      } 
      ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; 
      ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; 
      break ; 
    case CCPOPT_MVRCA : 
      if ( len < 4 ) { 
        ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; 
        return len ; 
      } 
      ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; 
      ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; 
      break ; 
    case CCPOPT_DEFLATE : 
      if ( len < 4 ) { 
        ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; 
        return len ; 
      } 
      ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; 
      ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; 
      break ; 
    # if 0 
    case CCPOPT_OUI : 
    case CCPOPT_PRED1 : 
    case CCPOPT_PRED2 : 
    case CCPOPT_PJUMP : 
    case CCPOPT_HPPPC : 
    case CCPOPT_STACLZS : 
    case CCPOPT_MPPC : 
    case CCPOPT_GFZA : 
    case CCPOPT_V42BIS : 
    case CCPOPT_LZSDCP : 
    case CCPOPT_DEC : 
    case CCPOPT_RESV : 
      break ; 
    # endif 
    default : 
      if ( ndo -> ndo_vflag < 2 ) {
        if (length >= len) {
          print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; 
        }
      }
      break ; 
  } 
  if ( ndo -> ndo_vflag > 1 && length >= len) { 
    print_",1000,-32.91827262146104,-0.03291827262146104
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","

static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 || length > 65535 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 && len < 65535 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 && len < 65535 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",883,-13.990754741138467,-0.015844569355762703
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",862,-3.9692590151252425,-0.0046047088342520215
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; if (length > 65535) return 0; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",877,-8.84790417346474,-0.010088830300415894
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len ) return 0 ; if ( len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }


Fixed code:","
static int print_ccp_config_options ( netdissect_options * ndo , const u_char * p , int length ) { int len , opt ; if ( length < 2 ) return 0 ; ND_TCHECK2 ( * p , 2 ) ; len = p [ 1 ] ; opt = p [ 0 ] ; if ( length < len || len < 2 ) { ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u (length bogus, should be >= 2)"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; return 0 ; } ND_PRINT ( ( ndo , ""\\n\\t  %s Option (0x%02x), length %u"" , tok2str ( ccpconfopts_values , ""Unknown"" , opt ) , opt , len ) ) ; switch ( opt ) { case CCPOPT_BSDCOMP : if ( len < 3 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 3)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Version: %u, Dictionary Bits: %u"" , p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; break ; case CCPOPT_MVRCA : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Features: %u, PxP: %s, History: %u, #CTX-ID: %u"" , ( p [ 2 ] & 0xc0 ) >> 6 , ( p [ 2 ] & 0x20 ) ? ""Enabled"" : ""Disabled"" , p [ 2 ] & 0x1f , p [ 3 ] ) ) ; break ; case CCPOPT_DEFLATE : if ( len < 4 ) { ND_PRINT ( ( ndo , "" (length bogus, should be >= 4)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; ND_PRINT ( ( ndo , "": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u"" , ( p [ 2 ] & 0xf0 ) >> 4 , ( ( p [ 2 ] & 0x0f ) == 8 ) ? ""zlib"" : ""unknown"" , p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; break ; # if 0 case CCPOPT_OUI : case CCPOPT_PRED1 : case CCPOPT_PRED2 : case CCPOPT_PJUMP : case CCPOPT_HPPPC : case CCPOPT_STACLZS : case CCPOPT_MPPC : case CCPOPT_GFZA : case CCPOPT_V42BIS : case CCPOPT_LZSDCP : case CCPOPT_DEC : case CCPOPT_RESV : break ; # endif default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo , & p [ 2 ] , ""\\n\\t    "" , len - 2 ) ; return len ; trunc : ND_PRINT ( ( ndo , ""[|ccp]"" ) ) ; return 0 ; }",862,-4.058198121060891,-0.004707886451346742
