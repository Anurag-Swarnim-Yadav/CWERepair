Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
register const struct netinfo6 * ni ; 
register u_int amt ; 
register u_int i ; 
int j ; 
int trunc ; 
if ( ndo -> ndo_snapend < dat ) return ; 
amt = ndo -> ndo_snapend - dat ; 
i = min ( length , amt ) ; 
if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
if ( i > length ) {
    i = length;
} 
i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
switch ( rp -> rip6_cmd ) { 
case RIP6_REQUEST : 
j = length / sizeof ( * ni ) ; 
if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
break ; 
} 
if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
else ND_PRINT ( ( ndo , "" "" ) ) ; 
rip6_entry_print ( ndo , ni , 0 ) ; 
} break ; 
case RIP6_RESPONSE : 
j = length / sizeof ( * ni ) ; 
if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
else ND_PRINT ( ( ndo , "" "" ) ) ; 
rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
} 
if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
break ; 
default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
break ; 
} 
if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",859,-20.16443770416853,-0.023474316302873728
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
 register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
 register const struct netinfo6 * ni ; 
 register u_int amt ; 
 register u_int i ; 
 int j ; 
 int trunc ; 
 
 if ( ndo -> ndo_snapend < dat ) return ; 
 amt = min(ndo -> ndo_snapend - dat , length); 
 i = min ( amt , length ) ; 
 if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
 i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
 switch ( rp -> rip6_cmd ) { 
  case RIP6_REQUEST : 
   j = length / sizeof ( * ni ) ; 
   if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
    ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
    break ; 
   } 
   if ( j * sizeof ( * ni ) != length - 4 ) 
    ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
   else 
    ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
   trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
   for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && i >=length; i -= sizeof ( * ni ) , ++ ni ) { 
    if ( ndo -> ndo_vflag > 1 ) 
     ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
    else 
     ND_PRINT ( ( ndo , "" "" ) ) ; 
    rip6_entry_print ( ndo , ni , 0 ) ; 
   } 
   break ; 
  case RIP6_RESPONSE : 
   j = length / sizeof ( * ni ) ; 
   if ( j * sizeof ( * ni ) != length - 4 ) 
    ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
   else 
    ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
   trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
   for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && i >= length; i -= sizeof ( * ni ) , ++ ni ) { 
    if ( ndo -> ndo_vflag > 1 ) 
     ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
    else 
     ND_PRINT ( ( ndo , "" "" ) ) ; 
    rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
   } 
   if ( trunc ) 
    ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
   break ; 
  default : 
   ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
   break ; 
 } 
 if ( rp -> rip6_vers != RIP6_VERSION ) 
  ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",918,-32.77674304180957,-0.035704513117439614
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
    register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
    register const struct netinfo6 * ni ; 
    register u_int amt ; 
    register u_int i ; 
    int j ; 
    int trunc ; 
    if ( ndo -> ndo_snapend < dat ) return ; 
    amt = ndo -> ndo_snapend - dat ; 
    i = min ( length , amt ) ; 
    if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
    i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
    switch ( rp -> rip6_cmd ) { 
        case RIP6_REQUEST : 
            j = length / sizeof ( * ni ) ; 
            if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
                ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
                break ; 
            } 
            if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
            else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i || i > length ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && i <= length; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , 0 ) ; 
            } 
            break ; 
        case RIP6_RESPONSE : 
            j = length / sizeof ( * ni ) ; 
            if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
            else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i || i > length ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && i <= length; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
            } 
            if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
            break ; 
        default : 
            ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
            break ; 
    } 
    if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",904,-14.764748431122296,-0.01633268631761316
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
    register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
    register const struct netinfo6 * ni ; 
    register u_int amt ; 
    register u_int i ; 
    int j ; 
    int trunc ; 
    if ( ndo -> ndo_snapend < dat ) 
        return ; 
    amt = ndo -> ndo_snapend - dat ; 
    i = min ( length , amt ) ; 
    if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) 
        return ; 
    i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
    if (i > length) 
        i = length; 
    switch ( rp -> rip6_cmd ) { 
        case RIP6_REQUEST : 
            j = length / sizeof ( * ni ) ; 
            if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
                ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
                break ; 
            } 
            if ( j * sizeof ( * ni ) != length - 4 ) 
                ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
            else 
                ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) 
                    ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else 
                    ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , 0 ) ; 
            } 
            break ; 
        case RIP6_RESPONSE : 
            j = length / sizeof ( * ni ) ; 
            if ( j * sizeof ( * ni ) != length - 4 ) 
                ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
            else 
                ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) 
                    ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else 
                    ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
            } 
            if ( trunc ) 
                ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
            break ; 
        default : 
            ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
            break ; 
    } 
    if ( rp -> rip6_vers != RIP6_VERSION ) 
        ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",940,-12.169390089263203,-0.01294615966942894
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
  register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
  register const struct netinfo6 * ni ; 
  register u_int amt ; 
  register u_int i ; 
  unsigned int j ; 
  int trunc ; 
  if ( ndo -> ndo_snapend < dat ) return ; 
  amt = ndo -> ndo_snapend - dat ; 
  i = min ( length , amt ) ; 
  if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
  i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
  switch ( rp -> rip6_cmd ) { 
    case RIP6_REQUEST : 
      j = length / sizeof ( * ni ) ; 
      if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
        ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
        break ; 
      } 
      if ( j * sizeof ( * ni ) != length - 4 ) 
        ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
      else 
        ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && j > 0; i -= sizeof ( * ni ) , ++ ni, j-- ) { 
        if ( ndo -> ndo_vflag > 1 ) 
          ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else 
          ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , 0 ) ; 
      } 
      break ; 
    case RIP6_RESPONSE : 
      j = length / sizeof ( * ni ) ; 
      if ( j * sizeof ( * ni ) != length - 4 ) 
        ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
      else 
        ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && j > 0; i -= sizeof ( * ni ) , ++ ni, j-- ) { 
        if ( ndo -> ndo_vflag > 1 ) 
          ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else 
          ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
      } 
      if ( trunc ) 
        ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
      break ; 
    default : 
      ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
      break ; 
  } 
  if ( rp -> rip6_vers != RIP6_VERSION ) 
    ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",933,-18.82628206704124,-0.020178223008618695
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
    register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
    register const struct netinfo6 * ni ; 
    register u_int amt ; 
    register u_int i ; 
    int j ; 
    int trunc ; 
    if ( ndo -> ndo_snapend < dat ) return ; 
    amt = ndo -> ndo_snapend - dat ; 
    i = min ( length , amt ) ; 
    if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) || i > length ) return ; 
    i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
    switch ( rp -> rip6_cmd ) { 
        case RIP6_REQUEST : 
            j = length / sizeof ( * ni ) ; 
            if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
                ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
                break ; 
            } 
            if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
            else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , 0 ) ; 
            } 
            break ; 
        case RIP6_RESPONSE : 
            j = length / sizeof ( * ni ) ; 
            if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
            else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
            } 
            if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
            break ; 
        default : 
            ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
            break ; 
    } 
    if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",892,-11.100814846676089,-0.01244485969358306
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
  register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
  register const struct netinfo6 * ni ; 
  register u_int amt ; 
  register u_int i ; 
  int j ; 
  int trunc ; 
  
  if ( ndo -> ndo_snapend < dat ) return ; 
  amt = ndo -> ndo_snapend - dat ; 
  i = min ( length , amt ) ; 
  if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
  
  //Check if the length provided is greater than the size of the struct
  if(length > sizeof(struct rip6)){
    //If yes, subtract the size of the struct from the length
    i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
  }
  else{
    //If the length is less than the size of the struct, set i to 0
    i = 0;
  }
  
  switch ( rp -> rip6_cmd ) { 
    case RIP6_REQUEST : 
      j = length / sizeof ( * ni ) ; 
      if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
        ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
        break ; 
      } 
      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
      else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , 0 ) ; 
      } 
      break ; 
    case RIP6_RESPONSE : 
      j = length / sizeof ( * ni ) ; 
      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
      else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
      } 
      if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
      break ; 
    default : 
      ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
      break ; 
  } 
  if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",973,-53.58053066341405,-0.05506734908881197
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; /* ADDED CONDITIONAL STATEMENT TO PREVENT OUT-OF-BOUNDS READ */ if (i >= sizeof(*ni)) { for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; /* ADDED CONDITIONAL STATEMENT TO PREVENT OUT-OF-BOUNDS READ */ if (i >= sizeof(*ni)) { for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; } break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",818,-23.59612185725417,-0.028846114739919524
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
    register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
    register const struct netinfo6 * ni ; 
    register u_int amt ; 
    register u_int i ; 
    int j ; 
    int trunc ; 
    if ( ndo -> ndo_snapend < dat ) return ; 
    amt = ndo -> ndo_snapend - dat ; 
    i = min ( length , amt ) ; 
    if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
    i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
    switch ( rp -> rip6_cmd ) { 
        case RIP6_REQUEST : 
            j = length / sizeof ( * ni ) ; 
            if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
                ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
                break ; 
            } 
            //Check if j*sizeof(*) is within bounds of the length passed
            if ((j * sizeof(*) <= length - 4) && (j * sizeof(*) >= 0)){ 
                ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
                trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
                for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                    if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                    else ND_PRINT ( ( ndo , "" "" ) ) ; 
                    rip6_entry_print ( ndo , ni , 0 ) ; 
                } 
            }
            break ; 
        case RIP6_RESPONSE : 
            j = length / sizeof ( * ni ) ; 
            //Check if j*sizeof(*) is within bounds of the length passed
            if ((j * sizeof(*) <= length - 4) && (j * sizeof(*) >= 0)){
                ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
                trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
                for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                    if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                    else ND_PRINT ( ( ndo , "" "" ) ) ; 
                    rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
                } 
            }
            if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
            break ; 
        default : 
            ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
            break ; 
    } 
    if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",901,-52.156931456355686,-0.057887826255666686
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( length < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",754,-8.913174041952637,-0.011821185732032674
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
	register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
	register const struct netinfo6 * ni ; 
	register u_int amt ; 
	register u_int i ; 
	int j ; 
	int trunc ; 
	if ( ndo -> ndo_snapend < dat ) return ; 
	amt = ndo -> ndo_snapend - dat ; 
	i = min ( length , amt ) ; 
	if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
	i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
	if (i > length){
		return;
	}
	switch ( rp -> rip6_cmd ) { 
		case RIP6_REQUEST : 
			j = length / sizeof ( * ni ) ; 
			if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
				ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
				break ; 
			} 
			if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
			else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
			trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
			for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
				if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
				else ND_PRINT ( ( ndo , "" "" ) ) ; 
				rip6_entry_print ( ndo , ni , 0 ) ; 
			} 
			break ; 
		case RIP6_RESPONSE : 
			j = length / sizeof ( * ni ) ; 
			if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
			else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
			trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
			for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
				if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
				else ND_PRINT ( ( ndo , "" "" ) ) ; 
				rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
			} 
			if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
			break ; 
		default : 
			ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
			break ; 
	} 
	if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",971,-11.751968292371194,-0.012102953957127903
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; if (amt < length) {
  i = amt;
} else {
  i = length;
}
if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",772,-10.578208447539243,-0.013702342548625962
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
  register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
  register const struct netinfo6 * ni ; 
  register u_int amt ; 
  register u_int i ; 
  int j ; 
  int trunc ; 
  if ( ndo -> ndo_snapend < dat ) return ; 
  amt = ndo -> ndo_snapend - dat ; 
  if (amt < length)
    length = amt; 
  i = min ( length , amt ) ; 
  if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
  i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
  switch ( rp -> rip6_cmd ) { 
    case RIP6_REQUEST : 
      j = length / sizeof ( * ni ) ; 
      if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
        ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
        break ; 
      } 
      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
      else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && (ni - rp -> rip6_nets) < j; i -= sizeof ( * ni ) , ++ ni ) { 
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , 0 ) ; 
      } 
      break ; 
    case RIP6_RESPONSE : 
      j = length / sizeof ( * ni ) ; 
      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
      else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && (ni - rp -> rip6_nets) < j; i -= sizeof ( * ni ) , ++ ni ) { 
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
      } 
      if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
      break ; 
    default : 
      ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
      break ; 
  } 
  if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",933,-25.047348755536706,-0.02684603296413366
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
  register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
  register const struct netinfo6 * ni ; 
  register u_int amt ; 
  register u_int i ; 
  int j ; 
  int trunc ; 
  
  if ( ndo -> ndo_snapend < dat || length > ndo->ndo_snapend - dat) {
    return;
  }

  amt = ndo -> ndo_snapend - dat ; 
  i = min ( length , amt ) ; 
  if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) {
    return;
  }
  
  i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
  
  switch ( rp -> rip6_cmd ) { 
    case RIP6_REQUEST : 
      j = length / sizeof ( * ni ) ; 
      if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
        ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
        break ; 
      } 
      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
      else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && i/sizeof(*ni) >= j; i -= sizeof ( * ni ) , ++ ni ) { 
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , 0 ) ; 
      } 
      break ; 
    case RIP6_RESPONSE : 
      j = length / sizeof ( * ni ) ; 
      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
      else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && i/sizeof(*ni) >= j; i -= sizeof ( * ni ) , ++ ni ) { 
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
      } 
      if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
      break ; 
    default : 
      ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
      break ; 
  } 
  if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",937,-29.544981400977488,-0.03153146360830041
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
  register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
  register const struct netinfo6 * ni ; 
  register u_int amt ; 
  register u_int i ; 
  int j ; 
  int trunc ; 
  if ( ndo -> ndo_snapend < dat ) return ; 

  amt = ndo -> ndo_snapend - dat ; 
  if (length > amt) {
    length = amt;
  }
  i = min ( length , amt ) ; 
  if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 

  i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 

  switch ( rp -> rip6_cmd ) { 
    case RIP6_REQUEST : 
      j = length / sizeof ( * ni ) ; 
      if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
        ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
        break ; 
      } 
      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
      else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; 
            i >= sizeof ( * ni ) && (unsigned int)((uint8_t *)ni - (uint8_t *)dat) <= length; 
            i -= sizeof ( * ni ) , ++ ni ) { 
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , 0 ) ; 
      } 
      break ; 
    case RIP6_RESPONSE : 
      j = length / sizeof ( * ni ) ; 
      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
      else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; 
            i >= sizeof ( * ni ) && (unsigned int)((uint8_t *)ni - (uint8_t *)dat) <= length; 
            i -= sizeof ( * ni ) , ++ ni ) { 
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
      } 
      if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
      break ; 
    default : 
      ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
      break ; 
  } 
  if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",966,-39.78261289219043,-0.04118282908094247
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat || length > ndo->ndo_snapend - dat) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && (ndo->ndo_snapend - (u_char*)ni >= sizeof(*ni)); i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && (ndo->ndo_snapend - (u_char*)ni >= sizeof(*ni)); i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",809,-15.750938918391615,-0.019469640195786914
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","

void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat || length > ndo->ndo_snapend - dat) return ; amt = ndo -> ndo_snapend - dat ; if (length < amt) {
    i = length;
} else {
    i = amt;
}
if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",786,-23.021213177252378,-0.029289075289125163
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) > length - 4 ) { // Added an additional check to the if statement to prevent out-of-bounds reads. return; // Exit the function if j * sizeof( * ni ) is greater than length - 4. } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) > length - 4 ) { // Added an additional check to the if statement to prevent out-of-bounds reads. return; // Exit the function if j * sizeof( * ni ) is greater than length - 4. } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",866,-41.73755826950707,-0.048195794768483916
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) {
  register const struct rip6 * rp = ( const struct rip6 * ) dat ;
  register const struct netinfo6 * ni ;
  register u_int amt ;
  register u_int i ;
  int j ;
  int trunc ;
  if ( ndo -> ndo_snapend < dat ) return ;
  amt = ndo -> ndo_snapend - dat ;
  i = min ( length , amt ) ;
  if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ;
  i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ;
  switch ( rp -> rip6_cmd ) {
  case RIP6_REQUEST :
    j = length / sizeof ( * ni ) ;
    if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) {
      ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ;
      break ;
    }
    if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ;
    else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ;
    trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ;
    for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && (i / sizeof ( * ni )) > 0; i -= sizeof ( * ni ) , ++ ni ) {
      if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ;
      else ND_PRINT ( ( ndo , "" "" ) ) ;
      rip6_entry_print ( ndo , ni , 0 ) ;
    }
    break ;
  case RIP6_RESPONSE :
    j = length / sizeof ( * ni ) ;
    if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ;
    else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ;
    trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ;
    for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && (i / sizeof ( * ni )) > 0; i -= sizeof ( * ni ) , ++ ni ) {
      if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ;
      else ND_PRINT ( ( ndo , "" "" ) ) ;
      rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ;
    }
    if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ;
    break ;
  default :
    ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ;
    break ;
  }
  if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ;
}

The code is now fixed by adding a condition to the for loop that uses the i / sizeof(*ni) operator to make sure that i is greater than 0. This prevents an out-of-bounds read vulnerability.",912,-59.17408119313204,-0.06488386095738162
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) {
  register const struct rip6 * rp = ( const struct rip6 * ) dat ;
  register const struct netinfo6 * ni ;
  register u_int amt ;
  register u_int i ;
  int j ;
  int trunc ;
  
  if ( ndo -> ndo_snapend < dat ) return ;
  amt = ndo -> ndo_snapend - dat ;
  if (amt < length) {
    i = amt;
  } else {
    i = length;
  }
  
  if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ;
  i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ;
  
  switch ( rp -> rip6_cmd ) {
    case RIP6_REQUEST :
      j = length / sizeof ( * ni ) ;
      if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) {
        ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ;
        break ;
      }
      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ;
      else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ;
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ;
      for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && i/(sizeof(struct netinfo6)) > 0; i -= sizeof ( * ni ) , ++ ni ) {
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ;
        else ND_PRINT ( ( ndo , "" "" ) ) ;
        rip6_entry_print ( ndo , ni , 0 ) ;
      }
      break ;
    case RIP6_RESPONSE : 
      j = length / sizeof ( * ni ) ;
      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ;
      else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ;
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ;
      for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && i/(sizeof(struct netinfo6)) > 0; i -= sizeof ( * ni ) , ++ ni ) {
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ;
        else ND_PRINT ( ( ndo , "" "" ) ) ;
        rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ;
      } 
      if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ;
      break ;
    default :
      ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ;
      break ;
  } 
  if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ;
}",897,-40.16070038694855,-0.044772241234056355
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = min(length, (ndo -> ndo_snapend - dat)); if ( amt < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i = amt - ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",753,-8.456687407411515,-0.011230660567611574
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
    register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
    register const struct netinfo6 * ni ; 
    register u_int amt ; 
    register u_int i ; 
    int j ; 
    int trunc ; 
    if ( ndo -> ndo_snapend < dat ) return ; 
    amt = ndo -> ndo_snapend - dat ; 
    i = min ( length , amt ) ; 
    i = ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) ? 0 : ( i - ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ); --Fix
    switch ( rp -> rip6_cmd ) { 
        case RIP6_REQUEST : 
            j = length / sizeof ( * ni ) ; 
            if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
                ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
                break ; 
            } 
            if ( j * sizeof ( * ni ) != length - 4 ) 
                ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
            else 
                ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && ni < ndo -> ndo_snapend ; i -= sizeof ( * ni ) , ++ ni ) { --Fix
                if ( ndo -> ndo_vflag > 1 ) 
                    ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else 
                    ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , 0 ) ; 
            } 
            break ; 
        case RIP6_RESPONSE : 
            j = length / sizeof ( * ni ) ; 
            if ( j * sizeof ( * ni ) != length - 4 ) 
                ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
            else 
                ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && ni < ndo -> ndo_snapend; i -= sizeof ( * ni ) , ++ ni ) { --Fix
                if ( ndo -> ndo_vflag > 1 ) 
                    ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else 
                    ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
            } 
            if ( trunc ) 
                ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
            break ; 
        default : 
            ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
            break ; 
    } 
    if ( rp -> rip6_vers != RIP6_VERSION ) 
        ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",943,-48.59107565174503,-0.051528182027301195
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat || ndo -> ndo_snapend < (dat + length) ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && ni < (struct netinfo6*)ndo->ndo_snapend; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && ni < (struct netinfo6*)ndo->ndo_snapend; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",803,-15.816312271684794,-0.019696528358262508
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
    register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
    register const struct netinfo6 * ni ; 
    register u_int amt ; 
    register u_int i ; 
    int j ; 
    int trunc ; 
    if ( ndo -> ndo_snapend < dat ) return ; 
    amt = min(length, ndo->ndo_snapend - dat); 
    
    if ( amt < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
    i = amt - ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
    
    switch ( rp -> rip6_cmd ) { 
    case RIP6_REQUEST : 
        j = length / sizeof ( * ni ) ; 
        if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
            ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
            break ; 
        } 
        if ( j * sizeof ( * ni ) != length - 4 ) 
            ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
        else 
            ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
        trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
        for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && j > 0 ; i -= sizeof ( * ni ) , ++ ni, j-- ) { 
            if ( ndo -> ndo_vflag > 1 ) 
                ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
            else 
                ND_PRINT ( ( ndo , "" "" ) ) ; 
            rip6_entry_print ( ndo , ni , 0 ) ; 
        } 
        break ; 
    case RIP6_RESPONSE : 
        j = length / sizeof ( * ni ) ; 
        if ( j * sizeof ( * ni ) != length - 4 ) 
            ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
        else 
            ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
        trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
        for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && j > 0; i -= sizeof ( * ni ) , ++ ni, j-- ) { 
            if ( ndo -> ndo_vflag > 1 ) 
                ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
            else 
                ND_PRINT ( ( ndo , "" "" ) ) ; 
            rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
        } 
        if ( trunc ) 
            ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
        break ; 
    default : 
        ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
        break ; 
    } 
    if ( rp -> rip6_vers != RIP6_VERSION ) 
        ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",931,-29.252357592531812,-0.031420362612816125
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = min(length, ndo -> ndo_snapend - dat ); i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && j > 0; i -= sizeof ( * ni ) , ++ ni, j-- ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && j > 0; i -= sizeof ( * ni ) , ++ ni, j-- ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",772,-12.385610705100891,-0.016043537182773175
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
  register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
  register const struct netinfo6 * ni ; 
  register u_int amt ; 
  register u_int i ; 
  int j ; 
  int trunc ; 

  if ( ndo -> ndo_snapend < dat ) return ; 
  amt = ndo -> ndo_snapend - dat ; 
  i = min ( length , amt ) ; 

  if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
  i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 

  switch ( rp -> rip6_cmd ) { 
    case RIP6_REQUEST : 
      j = length / sizeof ( * ni ) ; 
      if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
        ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
        break ; 
      } 

      if ( j * sizeof ( * ni ) > i ) { 
        j = i / sizeof ( * ni );
      } 

      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
      else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 

      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , 0 ) ; 
      } 
      break ; 
    case RIP6_RESPONSE : 
      j = length / sizeof ( * ni ) ; 
      if ( j * sizeof ( * ni ) > i ) { 
        j = i / sizeof ( * ni );
      }

      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
      else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 

      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
      } 
      if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
      break ; 
    default : 
      ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
      break ; 
  } 

  if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ;
 
}",950,-43.4839532977556,-0.0457725824186901
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; if (amt < length){ //Addition to fix vulnerability 
  return ;  //Addition to fix vulnerability 
} 
 
i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",786,-37.13038226691756,-0.04723967209531496
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; if (i > length) return; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",762,-7.523951452125948,-0.009873952036910692
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
    register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
    register const struct netinfo6 * ni ; 
    register u_int amt ; 
    register u_int i ; 
    int j ; 
    int trunc ; 
    if ( ndo -> ndo_snapend < dat ) return ; 
    amt = ndo -> ndo_snapend - dat ; 
    i = min ( length , amt ) ; 
    if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
    i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
    switch ( rp -> rip6_cmd ) { 
        case RIP6_REQUEST : 
            j = length / sizeof ( * ni ) ; 
            if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
                ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
                break ; 
            } 
            if ( j * sizeof ( * ni ) > length - 4 ) { 
                ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
            } else { 
                ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
            } 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , 0 ) ; 
            } 
            break ; 
        case RIP6_RESPONSE : 
            j = length / sizeof ( * ni ) ; 
            if ( j * sizeof ( * ni ) > length - 4 ) { 
                ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
            } else { 
                ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
            } 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
            } 
            if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
            break ; 
        default : 
            ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
            break ; 
    } 
    if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",914,-14.343966171877106,-0.015693617255883047
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
    register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
    register const struct netinfo6 * ni ; 
    register u_int amt ; 
    register u_int i ; 
    int j ; 
    int trunc ; 
    if ( ndo -> ndo_snapend < dat ) 
        return ; 
    amt = ndo -> ndo_snapend - dat ; 
    if (amt < length)
        return;
    i = min ( length , amt ) ; 
    if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) 
        return ; 
    i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
    switch ( rp -> rip6_cmd ) { 
        case RIP6_REQUEST : 
            j = length / sizeof ( * ni ) ; 
            if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
                ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
                break ; 
            } 
            if ( j * sizeof ( * ni ) != length - 4 ) 
                ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
            else 
                ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) 
                    ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else 
                    ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , 0 ) ; 
            } 
            break ; 
        case RIP6_RESPONSE : 
            j = length / sizeof ( * ni ) ; 
            if ( j * sizeof ( * ni ) != length - 4 ) 
                ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
            else 
                ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) 
                    ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else 
                    ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
            } 
            if ( trunc ) 
                ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
            break ; 
        default : 
            ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
            break ; 
    } 
    if ( rp -> rip6_vers != RIP6_VERSION ) 
        ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",945,-17.099355782651383,-0.01809455638375808
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
  if (!dat || !length) {
    return;
  }

  register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
  register const struct netinfo6 * ni ; 
  register u_int amt ; 
  register u_int i ; 
  int j ; 
  int trunc ; 
  if ( ndo -> ndo_snapend < dat ) return ; 
  amt = ndo -> ndo_snapend - dat ; 
  i = min ( length , amt ) ; 
  if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
  i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
  switch ( rp -> rip6_cmd ) { 
    case RIP6_REQUEST : 
      j = length / sizeof ( * ni ) ; 
      if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
        ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
        break ; 
      } 
      if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
      else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
      trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
      for ( ni = rp -> rip6_nets ; (i >= sizeof ( * ni )) && (amt > 0); i -= sizeof ( * ni ) , ++ ni, --amt ) { 
        if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
        else ND_PRINT ( ( ndo , "" "" ) ) ; 
        rip6_entry_print ( ndo , ni , 0 ) ; 
      } 
      break ; 
    case RIP6_RESPONSE : 
    j = length / sizeof ( * ni ) ; 
    if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
    else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
    trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
    for ( ni = rp -> rip6_nets ; (i >= sizeof ( * ni )) && (amt > 0); i -= sizeof ( * ni ) , ++ ni, --amt ) { 
      if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
      else ND_PRINT ( ( ndo , "" "" ) ) ; 
      rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
    } 
    if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
    break ; 
    default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
    break ; 
  } 
  if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",924,-40.76179062227297,-0.044114492015446934
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i , j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && j > 0; i -= sizeof ( * ni ) , ++ ni, j--) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && j > 0; i -= sizeof ( * ni ) , ++ ni, j--) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",767,-15.034745760241828,-0.019602015332779436
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; if (i/sizeof(*ni) > 0) { for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; if (i/sizeof(*ni) > 0) { for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",782,-13.729279623883535,-0.01755662355995337
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; if (length > ndo->ndo_snapend - dat) { return; } amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && (dat + length <= ndo->ndo_snapend);  i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && (dat + length <= ndo->ndo_snapend); i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",802,-25.279042345355393,-0.031520002924383284
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 || j < 0) { 
    return; 
} 
if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 || j < 0) { 
    return; 
} 
if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",812,-18.11379190189042,-0.02230762549493894
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
    register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
    register const struct netinfo6 * ni ; 
    register u_int amt ; 
    register u_int i ; 
    int j ; 
    int trunc ; 
    if ( ndo -> ndo_snapend < dat ) return ; 
    amt = ndo -> ndo_snapend - dat ; 
    i = min ( length , amt ) ; 
    if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
    i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
    switch ( rp -> rip6_cmd ) { 
        case RIP6_REQUEST : 
            j = length / sizeof ( * ni ) ; 
            if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
                ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ;
                 break ; 
            } 
            if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
            else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            if (i > sizeof(*ni)) {
                for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                    if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                    else ND_PRINT ( ( ndo , "" "" ) ) ; 
                    rip6_entry_print ( ndo , ni , 0 ) ; 
                } 
            }
            break ; 
        case RIP6_RESPONSE : 
            j = length / sizeof ( * ni ) ; 
            if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
            else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            if (i > sizeof(*ni)) {
                for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                    if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                    else ND_PRINT ( ( ndo , "" "" ) ) ; 
                    rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
                } 
            }
            if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
            break ; 
        default : 
            ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
            break ; 
    } 
    if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",915,-23.211010549826536,-0.025367224644619164
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat || ndo->ndo_snapend < dat + length ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && dat + length > (u_char*)ni; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && dat + length > (u_char*)ni; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",789,-10.51603191462845,-0.013328304074307287
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) || i > length ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",758,-6.9328889061459735,-0.009146291432910255
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
 register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
 register const struct netinfo6 * ni ; 
 register u_int amt ; 
 register u_int i ; 
 int j ; 
 int trunc ; 
 
 if ( ndo -> ndo_snapend < dat ) 
 return ; 
 
 amt = ndo -> ndo_snapend - dat ; 
 i = min ( length , amt ) ; 
 
 if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) )
 return ; 
 
 i = ((i < length) ? i : length - 1); // fixed out-of-bounds read
 i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
 
 switch ( rp -> rip6_cmd ) { 
  case RIP6_REQUEST : 
   j = length / sizeof ( * ni ) ; 
   if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
    ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
    break ; 
   } 
   if ( j * sizeof ( * ni ) != length - 4 ) 
    ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
   else 
    ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
   trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
   for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
    if ( ndo -> ndo_vflag > 1 ) 
     ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
    else 
     ND_PRINT ( ( ndo , "" "" ) ) ; 
    rip6_entry_print ( ndo , ni , 0 ) ; 
   } 
   break ; 
  case RIP6_RESPONSE : 
   j = length / sizeof ( * ni ) ; 
   if ( j * sizeof ( * ni ) != length - 4 ) 
    ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
   else 
    ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
   trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
   for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
    if ( ndo -> ndo_vflag > 1 ) 
     ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
    else 
     ND_PRINT ( ( ndo , "" "" ) ) ; 
    rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
   } 
   if ( trunc ) 
    ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
   break ; 
  default : 
   ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
   break ; 
 } 
 if ( rp -> rip6_vers != RIP6_VERSION ) 
  ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",941,-44.641824758055265,-0.04744083396180156
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; 

if ( ndo -> ndo_snapend < dat || ndo -> ndo_snapend < dat + length ) return ;

amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && (dat + length) > (void *) ni; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && (dat + length) > (void *) ni; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",794,-21.579425838405083,-0.027178118184389272
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; 
if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; 
if (length > amt) {
	i = amt;
} else {
	i = length;
}
if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",776,-16.044297114340743,-0.020675640611263844
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; if ( amt > length ) { i = length ; } else { i = amt ; } if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",765,-9.37218740249219,-0.012251225362734888
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
	register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
	register const struct netinfo6 * ni ; 
	register u_int amt ; 
	register u_int i ; 
	int j ; 
	int trunc ; 
	if ( ndo -> ndo_snapend < dat ) 
		return ; 
	amt = ndo -> ndo_snapend - dat ; 
	i = min ( length , amt ) ; 
	if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) 
		return ; 
	i = min (i,length); //Added to fix out-of-bounds read
	i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
	switch ( rp -> rip6_cmd ) { 
		case RIP6_REQUEST : 
			j = length / sizeof ( * ni ) ; 
			if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
				ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
				break ; 
			} 
			if ( j * sizeof ( * ni ) != length - 4 ) 
				ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
			else 
				ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
			trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
			for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
				if ( ndo -> ndo_vflag > 1 ) 
					ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
				else 
					ND_PRINT ( ( ndo , "" "" ) ) ; 
				rip6_entry_print ( ndo , ni , 0 ) ; 
			} 
			break ; 
		case RIP6_RESPONSE : 
			j = length / sizeof ( * ni ) ; 
			if ( j * sizeof ( * ni ) != length - 4 ) 
				ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
			else 
				ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
			trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
			for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
				if ( ndo -> ndo_vflag > 1 ) 
					ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
				else 
					ND_PRINT ( ( ndo , "" "" ) ) ; 
				rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
			} 
			if ( trunc ) 
				ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
			break ; 
		default : 
			ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
			break ; 
	} 
	if (",1000,-23.975244629340317,-0.023975244629340316
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) > length - 4 ) return; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) > length - 4 ) return; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",702,-9.90969772012704,-0.014116378518699487
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
    register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
    register const struct netinfo6 * ni ; 
    register u_int amt ; 
    register u_int i ; 
    int j ; 
    int trunc ; 
    if ( ndo -> ndo_snapend < dat ) return ; 
    amt = ndo -> ndo_snapend - dat ; 
    i = min ( length , amt ) ; 
    if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
    i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
    switch ( rp -> rip6_cmd ) { 
        case RIP6_REQUEST : 
            j = length / sizeof ( * ni ) ; 
            if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
                ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
                break ; 
            } 
            if ( i / sizeof ( * ni ) < j ) {
                j = i / sizeof ( * ni ) ;
            }
            if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
            else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , 0 ) ; 
            } 
            break ;
        case RIP6_RESPONSE : 
            j = length / sizeof ( * ni ) ; 
            if ( i / sizeof ( * ni ) < j ) {
                j = i / sizeof ( * ni ) ;
            }
            if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
            else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                else ND_PRINT ( ( ndo , "" "" ) ) ; 
                rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
            } 
            if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
            break ; 
        default : 
            ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
            break ; 
    } 
    if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
}",947,-21.194721299225293,-0.022380909502877817
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
	if ( ndo -> ndo_snapend < dat ) return ; 
	register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
	register const struct netinfo6 * ni ; 
	register u_int amt ; 
	register u_int i ; 
	int j ; 
	int trunc ; 
	
	amt = ndo -> ndo_snapend - dat ; 
	i = min ( length , amt ) ; 
	if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; 
	i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
	
	switch ( rp -> rip6_cmd ) { 
		case RIP6_REQUEST : 
			j = length / sizeof ( * ni ) ; 
			if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
				ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
				break ; 
			} 
			
			// Add check for integer overflow
			if (j > UINT_MAX / sizeof(*ni) || ((j * sizeof ( * ni ) != length - 4))) {
				ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ;
				return;
			}
			
			ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
			trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
			for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
				if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
				else ND_PRINT ( ( ndo , "" "" ) ) ; 
				rip6_entry_print ( ndo , ni , 0 ) ; 
			} 
			break ; 
		
		case RIP6_RESPONSE : 
			j = length / sizeof ( * ni ) ; 
			
			// Add check for integer overflow
			if (j > UINT_MAX / sizeof(*ni) || ((j * sizeof ( * ni ) != length - 4))) {
				ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ;
				return;
			}
			
			ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
			trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
			for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
				if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
				else ND_PRINT ( ( ndo , "" "" ) ) ; 
				rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
			} 
			if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
			break ; 
		
		default : 
			ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) )",1000,-56.16779086891027,-0.056167790868910265
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; if (amt > length) { i = min ( length , amt ) ; } else { i = length; } if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && i >= length; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) && i >= length; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",778,-12.71021285834003,-0.016337034522287956
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; if (i > length) { i = length; } switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = i / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != i - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , i ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = i / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != i - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , i ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , i ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",766,-12.380004882470852,-0.016161886269544193
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { 
    register const struct rip6 * rp = ( const struct rip6 * ) dat ; 
    register const struct netinfo6 * ni ; 
    register u_int amt ; 
    register u_int i ; 
    int j ; 
    int trunc ; 
    
    if ( ndo -> ndo_snapend < dat ) {
        return ; 
    }
    amt = ndo -> ndo_snapend - dat ; 
    if (length > amt) {
        i = amt;
    } else {
        i = length;
    } 

    if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) {
        return ; 
    }
    i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; 
    switch ( rp -> rip6_cmd ) { 
        case RIP6_REQUEST : 
            j = length / sizeof ( * ni ) ; 
            if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { 
                ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; 
            break ; 
        } 
        if ( j * sizeof ( * ni ) != length - 4 ) {
            ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; 
        } else {
            ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; 
        }
        trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
        for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
            if ( ndo -> ndo_vflag > 1 ) {
                ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
            } else {
                ND_PRINT ( ( ndo , "" "" ) ) ; 
            } 
            rip6_entry_print ( ndo , ni , 0 ) ; 
        } 
        break ; 
        case RIP6_RESPONSE : 
            j = length / sizeof ( * ni ) ; 
            if ( j * sizeof ( * ni ) != length - 4 ) {
                ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; 
            } else {
                ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; 
            }
            trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; 
            for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { 
                if ( ndo -> ndo_vflag > 1 ) {
                    ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; 
                } else {
                    ND_PRINT ( ( ndo , "" "" ) ) ; 
                } 
                rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; 
            } 
            if ( trunc ) {
                ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; 
            }
        break ; 
        default : 
            ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; 
        break ; 
    } 
    if ( rp -> rip6_vers != RIP6_VERSION ) {
        ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; 
    }
}",975,-32.57324892170575,-0.033408460432518716
"The Original Code is vulnerable to CWE-125: Out-of-bounds Read. Fix the vulnerability.
Original Code:
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }
Fixed code:","
void ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) { register const struct rip6 * rp = ( const struct rip6 * ) dat ; register const struct netinfo6 * ni ; register u_int amt ; register u_int i ; int j ; int trunc ; if ( ndo -> ndo_snapend < dat ) return ; amt = ndo -> ndo_snapend - dat ; if (length > amt) { length = amt; } i = min ( length , amt ) ; if ( i < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) return ; i -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; switch ( rp -> rip6_cmd ) { case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo , "" ripng-req dump"" ) ) ; break ; } if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-req %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-req %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni ) != length - 4 ) ND_PRINT ( ( ndo , "" ripng-resp %d[%u]:"" , j , length ) ) ; else ND_PRINT ( ( ndo , "" ripng-resp %d:"" , j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ) , ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo , ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo , "" "" ) ) ; rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; } if ( trunc ) ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; break ; default : ND_PRINT ( ( ndo , "" ripng-%d ?? %u"" , rp -> rip6_cmd , length ) ) ; break ; } if ( rp -> rip6_vers != RIP6_VERSION ) ND_PRINT ( ( ndo , "" [vers %d]"" , rp -> rip6_vers ) ) ; }",768,-6.819446681635019,-0.008879487866712265
