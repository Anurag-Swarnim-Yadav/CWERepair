cwe_id,source,target,project_and_commit_id,cve_id,original_address,time
CWE-78,"CWE-78 R_API char * r_socket_http_post ( const char * url , const char * data , int * code , int * rlen ) { RSocket * s ; bool ssl = r_str_startswith ( url , ""https://"" ) ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } char * host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; printf ( ""Invalid<S2SV_blank>URI"" ) ; return NULL ; } host += 3 ; char * port = strchr ( host , ':' ) ; if ( ! port ) { port = ( ssl ) ? ""443"" : ""80"" ; } else { * port ++ = 0 ; } char * path = strchr ( host , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { printf ( ""Cannot<S2SV_blank>create<S2SV_blank>socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( ! r_socket_connect_tcp ( s , host , port , 0 ) ) { eprintf ( ""Cannot<S2SV_blank>connect<S2SV_blank>to<S2SV_blank>%s:%s\\n"" , host , port ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s , ""POST<S2SV_blank>/%s<S2SV_blank>HTTP/1.0\\r\\n"" ""User-Agent:<S2SV_blank>radare2<S2SV_blank>"" R2_VERSION ""\\r\\n"" ""Accept:<S2SV_blank>*/*\\r\\n"" ""Host:<S2SV_blank>%s\\r\\n"" ""Content-Length:<S2SV_blank>%i\\r\\n"" ""Content-Type:<S2SV_blank>application/x-www-form-urlencoded\\r\\n"" ""\\r\\n"" , path , host , ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s , ( void * ) data , strlen ( data ) ) ; <S2SV_StartBug> return r_socket_http_answer ( s , code , rlen ) ; <S2SV_EndBug> }
","<S2SV_ModStart> ) ; return socket_http_answer <S2SV_ModEnd> ( s , <S2SV_ModStart> code , rlen , 0
",radareorg@radare2/04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9,CVE-2020-15121,https://github.com/radareorg/radare2/commit/04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9,2020-07-20T18:15Z
CWE-78,"CWE-78 int r_bin_pdb_download ( RCore * core , int isradjson , int * actions_done , SPDBOptions * options ) { int ret ; SPDBDownloaderOpt opt ; SPDBDownloader pdb_downloader ; RBinInfo * info = r_bin_get_info ( core -> bin ) ; if ( ! info || ! info -> debug_file_name ) { <S2SV_StartBug> eprintf ( ""Can\'t<S2SV_blank>find<S2SV_blank>debug<S2SV_blank>filename\\n"" ) ; <S2SV_EndBug> return 1 ; } if ( ! options || ! options -> symbol_server || ! options -> user_agent ) { eprintf ( ""Can\'t<S2SV_blank>retrieve<S2SV_blank>pdb<S2SV_blank>configurations\\n"" ) ; return 1 ; } opt . dbg_file = ( char * ) r_file_basename ( info -> debug_file_name ) ; opt . guid = info -> guid ; opt . symbol_server = options -> symbol_server ; opt . user_agent = options -> user_agent ; opt . symbol_store_path = options -> symbol_store_path ; opt . extract = options -> extract ; init_pdb_downloader ( & opt , & pdb_downloader ) ; ret = pdb_downloader . download ? pdb_downloader . download ( & pdb_downloader ) : 0 ; if ( isradjson && actions_done ) { printf ( ""%s\\""pdb\\"":{\\""file\\"":\\""%s\\"",\\""download\\"":%s}"" , * actions_done ? "","" : """" , opt . dbg_file , ret ? ""true"" : ""false"" ) ; } else { printf ( ""PDB<S2SV_blank>\\""%s\\""<S2SV_blank>download<S2SV_blank>%s\\n"" , opt . dbg_file , ret ? ""success"" : ""failed"" ) ; } if ( actions_done ) { ( * actions_done ) ++ ; } deinit_pdb_downloader ( & pdb_downloader ) ; return 0 ; }
","<S2SV_ModStart> eprintf ( ""Can\'t<S2SV_blank>find<S2SV_blank>debug<S2SV_blank>filename\\n"" ) ; return 1 ; } if ( ! is_valid_guid ( info -> guid ) ) { eprintf ( ""Invalid<S2SV_blank>GUID<S2SV_blank>for<S2SV_blank>file\\n""
",radareorg@radare2/04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9,CVE-2020-15121,https://github.com/radareorg/radare2/commit/04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9,2020-07-20T18:15Z
CWE-78,"CWE-78 static inline int r_sys_mkdirp ( char * dir ) { int ret = 1 ; const char slash = DIRSEP ; char * path = dir ; char * ptr = path ; if ( * ptr == slash ) { ptr ++ ; } # if __SDB_WINDOWS__ char * p = strstr ( ptr , "":\\\\"" ) ; if ( p ) { <S2SV_StartBug> ptr = p + 2 ; <S2SV_EndBug> } # endif while ( ( ptr = strchr ( ptr , slash ) ) ) { * ptr = 0 ; if ( ! r_sys_mkdir ( path ) && r_sys_mkdir_failed ( ) ) { eprintf ( ""r_sys_mkdirp:<S2SV_blank>fail<S2SV_blank>\'%s\'<S2SV_blank>of<S2SV_blank>\'%s\'\\n"" , path , dir ) ; * ptr = slash ; return 0 ; } * ptr = slash ; ptr ++ ; } return ret ; }
","<S2SV_ModStart> = p + 3 <S2SV_ModEnd> ; } #
",radareorg@radare2/04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9,CVE-2020-15121,https://github.com/radareorg/radare2/commit/04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9,2020-07-20T18:15Z
CWE-78,"CWE-78 bool all_tests ( ) { mu_run_test ( test_r_str_newf ) ; mu_run_test ( test_r_str_replace_char_once ) ; mu_run_test ( test_r_str_replace_char ) ; mu_run_test ( test_r_str_replace ) ; mu_run_test ( test_r_str_bits64 ) ; mu_run_test ( test_r_str_rwx ) ; mu_run_test ( test_r_str_rwx_i ) ; mu_run_test ( test_r_str_bool ) ; mu_run_test ( test_r_str_trim ) ; mu_run_test ( test_r_str_case ) ; mu_run_test ( test_r_str_split ) ; mu_run_test ( test_r_str_tokenize ) ; mu_run_test ( test_r_str_char_count ) ; mu_run_test ( test_r_str_word_count ) ; mu_run_test ( test_r_str_ichr ) ; mu_run_test ( test_r_str_lchr ) ; mu_run_test ( test_r_sub_str_lchr ) ; mu_run_test ( test_r_sub_str_rchr ) ; mu_run_test ( test_r_str_rchr ) ; mu_run_test ( test_r_str_ansi_len ) ; mu_run_test ( test_r_str_len_utf8_ansi ) ; mu_run_test ( test_r_str_utf8_charsize ) ; mu_run_test ( test_r_str_utf8_charsize_prev ) ; mu_run_test ( test_r_str_sanitize_sdb_key ) ; <S2SV_StartBug> mu_run_test ( test_r_str_unescape ) ; <S2SV_EndBug> mu_run_test ( test_r_str_constpool ) ; mu_run_test ( test_r_str_format_msvc_argv ) ; mu_run_test ( test_r_str_str_xy ) ; return tests_passed != tests_run ; }
","<S2SV_ModStart> ; mu_run_test ( test_r_str_escape_sh ) ; mu_run_test (
",radareorg@radare2/04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9,CVE-2020-15121,https://github.com/radareorg/radare2/commit/04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9,2020-07-20T18:15Z
CWE-78,"CWE-78 R_API char * r_socket_http_get ( const char * url , int * code , int * rlen ) { <S2SV_StartBug> char * curl_env = r_sys_getenv ( ""R2_CURL"" ) ; <S2SV_EndBug> if ( curl_env && * curl_env ) { char * encoded_url = r_str_escape ( url ) ; char * res = r_sys_cmd_strf ( ""curl<S2SV_blank>\'%s\'"" , encoded_url ) ; free ( encoded_url ) ; if ( res ) { if ( code ) { * code = 200 ; } if ( rlen ) { * rlen = strlen ( res ) ; } <S2SV_StartBug> } <S2SV_EndBug> free ( curl_env ) ; return res ; } free ( curl_env ) ; RSocket * s ; int ssl = r_str_startswith ( url , ""https://"" ) ; char * response , * host , * path , * port = ""80"" ; char * uri = strdup ( url ) ; if ( ! uri ) { return NULL ; } if ( code ) { * code = 0 ; } if ( rlen ) { * rlen = 0 ; } host = strstr ( uri , ""://"" ) ; if ( ! host ) { free ( uri ) ; eprintf ( ""r_socket_http_get:<S2SV_blank>Invalid<S2SV_blank>URI"" ) ; return NULL ; } host += 3 ; port = strchr ( host , ':' ) ; if ( ! port ) { port = ssl ? ""443"" : ""80"" ; path = host ; } else { * port ++ = 0 ; path = port ; } path = strchr ( path , '/' ) ; if ( ! path ) { path = """" ; } else { * path ++ = 0 ; } s = r_socket_new ( ssl ) ; if ( ! s ) { eprintf ( ""r_socket_http_get:<S2SV_blank>Cannot<S2SV_blank>create<S2SV_blank>socket\\n"" ) ; free ( uri ) ; return NULL ; } if ( r_socket_connect_tcp ( s , host , port , 0 ) ) { r_socket_printf ( s , ""GET<S2SV_blank>/%s<S2SV_blank>HTTP/1.1\\r\\n"" ""User-Agent:<S2SV_blank>radare2<S2SV_blank>"" R2_VERSION ""\\r\\n"" ""Accept:<S2SV_blank>*/*\\r\\n"" ""Host:<S2SV_blank>%s:%s\\r\\n"" ""\\r\\n"" , path , host , port ) ; response = r_socket_http_answer ( s , code , rlen ) ; } else { eprintf ( ""Cannot<S2SV_blank>connect<S2SV_blank>to<S2SV_blank>%s:%s\\n"" , host , port ) ; response = NULL ; } free ( uri ) ; r_socket_free ( s ) ; return response ; }
","<S2SV_ModStart> rlen ) { return socket_http_get_recursive ( url , code , rlen , SOCKET_HTTP_MAX_REDIRECTS <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
",radareorg@radare2/04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9,CVE-2020-15121,https://github.com/radareorg/radare2/commit/04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9,2020-07-20T18:15Z
