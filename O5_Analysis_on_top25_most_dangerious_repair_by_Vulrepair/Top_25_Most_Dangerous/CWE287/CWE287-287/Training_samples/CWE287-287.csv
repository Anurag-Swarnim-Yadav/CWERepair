cwe_id,source,target,project_and_commit_id,cve_id,original_address,time
CWE-287,"CWE-287 int oidc_oauth_check_userid ( request_rec * r , oidc_cfg * c ) { if ( ! ap_is_initial_req ( r ) ) { if ( r -> main != NULL ) r -> user = r -> main -> user ; else if ( r -> prev != NULL ) r -> user = r -> prev -> user ; if ( r -> user != NULL ) { oidc_debug ( r , ""recycling<S2SV_blank>user<S2SV_blank>\'%s\'<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>request<S2SV_blank>for<S2SV_blank>sub-request"" , r -> user ) ; return OK ; } } else if ( ( c -> redirect_uri != NULL ) && ( oidc_util_request_matches_url ( r , c -> redirect_uri ) ) ) { if ( oidc_util_request_has_parameter ( r , ""jwks"" ) ) { return oidc_handle_jwks ( r , c ) ; } } const char * access_token = NULL ; if ( oidc_oauth_get_bearer_token ( r , & access_token ) == FALSE ) return oidc_oauth_return_www_authenticate ( r , ""invalid_request"" , ""No<S2SV_blank>bearer<S2SV_blank>token<S2SV_blank>found<S2SV_blank>in<S2SV_blank>the<S2SV_blank>request"" ) ; json_t * token = NULL ; char * s_token = NULL ; if ( c -> oauth . introspection_endpoint_url != NULL ) { if ( oidc_oauth_resolve_access_token ( r , c , access_token , & token , & s_token ) == FALSE ) return oidc_oauth_return_www_authenticate ( r , ""invalid_token"" , ""Reference<S2SV_blank>token<S2SV_blank>could<S2SV_blank>not<S2SV_blank>be<S2SV_blank>introspected"" ) ; } else { if ( oidc_oauth_validate_jwt_access_token ( r , c , access_token , & token , & s_token ) == FALSE ) return oidc_oauth_return_www_authenticate ( r , ""invalid_token"" , ""JWT<S2SV_blank>token<S2SV_blank>could<S2SV_blank>not<S2SV_blank>be<S2SV_blank>validated"" ) ; } if ( token == NULL ) { oidc_error ( r , ""could<S2SV_blank>not<S2SV_blank>resolve<S2SV_blank>claims<S2SV_blank>(token<S2SV_blank>==<S2SV_blank>NULL)"" ) ; return oidc_oauth_return_www_authenticate ( r , ""invalid_token"" , ""No<S2SV_blank>claims<S2SV_blank>could<S2SV_blank>be<S2SV_blank>parsed<S2SV_blank>from<S2SV_blank>the<S2SV_blank>token"" ) ; } oidc_request_state_set ( r , OIDC_CLAIMS_SESSION_KEY , ( const char * ) s_token ) ; if ( oidc_oauth_set_remote_user ( r , c , token ) == FALSE ) { oidc_error ( r , ""remote<S2SV_blank>user<S2SV_blank>could<S2SV_blank>not<S2SV_blank>be<S2SV_blank>set,<S2SV_blank>aborting<S2SV_blank>with<S2SV_blank>HTTP_UNAUTHORIZED"" ) ; return oidc_oauth_return_www_authenticate ( r , ""invalid_token"" , ""Could<S2SV_blank>not<S2SV_blank>set<S2SV_blank>remote<S2SV_blank>user"" ) ; } <S2SV_StartBug> char * authn_header = oidc_cfg_dir_authn_header ( r ) ; <S2SV_EndBug> int pass_headers = oidc_cfg_dir_pass_info_in_headers ( r ) ; int pass_envvars = oidc_cfg_dir_pass_info_in_envvars ( r ) ; if ( ( r -> user != NULL ) && ( authn_header != NULL ) ) { oidc_debug ( r , ""setting<S2SV_blank>authn<S2SV_blank>header<S2SV_blank>(%s)<S2SV_blank>to:<S2SV_blank>%s"" , authn_header , r -> user ) ; apr_table_set ( r -> headers_in , authn_header , r -> user ) ; } oidc_util_set_app_infos ( r , token , c -> claim_prefix , c -> claim_delimiter , pass_headers , pass_envvars ) ; if ( access_token != NULL ) { oidc_util_set_app_info ( r , ""access_token"" , access_token , OIDC_DEFAULT_HEADER_PREFIX , pass_headers , pass_envvars ) ; } json_decref ( token ) ; return OK ; }
","<S2SV_ModStart> ) ; } oidc_scrub_headers ( r ) ;
",pingidentity@mod_auth_openidc/21e3728a825c41ab41efa75e664108051bb9665e,CVE-2017-6413,https://github.com/pingidentity/mod_auth_openidc/commit/21e3728a825c41ab41efa75e664108051bb9665e,2017-03-02T06:59Z
CWE-287,"CWE-287 <S2SV_StartBug> static void oidc_scrub_headers ( request_rec * r ) { <S2SV_EndBug> oidc_cfg * cfg = ap_get_module_config ( r -> server -> module_config , & auth_openidc_module ) ; if ( cfg -> scrub_request_headers != 0 ) { oidc_scrub_request_headers ( r , OIDC_DEFAULT_HEADER_PREFIX , oidc_cfg_dir_authn_header ( r ) ) ; if ( ( strstr ( cfg -> claim_prefix , OIDC_DEFAULT_HEADER_PREFIX ) != cfg -> claim_prefix ) ) { oidc_scrub_request_headers ( r , cfg -> claim_prefix , NULL ) ; } } }
","<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (
",pingidentity@mod_auth_openidc/21e3728a825c41ab41efa75e664108051bb9665e,CVE-2017-6413,https://github.com/pingidentity/mod_auth_openidc/commit/21e3728a825c41ab41efa75e664108051bb9665e,2017-03-02T06:59Z
