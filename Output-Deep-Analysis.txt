

CWE-79		Cross-site Scripting

SAMPLE: CWE79-856	

WITHOUT BUGGYLINE:
1) Uses a random function simialr to fucntion definiation to escape the string as a fix. Sample:2,12
2) Will remove the cross-site scripting message as a fix or change the message. 
3)  Will encode the url sample: 15

WITH BUGGYLINE:
1) Move the <endbug> to consider the full if statment as fix. Sample 7 and more (Main behaviour)
2) Generally adds special character filtering as a fix. Sample 10
3) Remove the tags. sample 35
4)Bascially it will try to sanitize or escape user input if this SWE is given. sample 39
5)The closet we got was sample 51



CWE-78		OS Command Injection

SAMPLE: CWE78-1149	

WITHOUT BUGGYLINE AND WITH BUGGYLINE:
1) Tries to Escape characters or sanitized uer input are properly escaped to prevent CWE-78. Sample 17, 19, 36, 48
2)If the tags are not present. It will add the tags if not present.



SAMPLE: CWE78-1502 
[THIS SAMPLE NEEDS ADDITION. THERE IS NOT BUGGYLINE (THE BUGGYLINE PROVIDED IS NOT A BUGGYLINE)]

WITHOUT BUGGYLINE:
1) Addition of the few more cases. Sample 2
2) It does understand that it needs to add new cases. Sample 9,12,18,25,26,34,38,49,50

WITH BUGGYLINE:
1) Can create vulnerability. Sample 4
2) Converts case into if condition but does not fix the problem.
3) Check sample 10, 11, 16, 22,31 (Think about it)
4)The close we get to the sample is 25, 36

Takeaway: The model undertands it needs to add special cases (specially for buggyline). It just dont think "=" is considered as a escape characters or invalid characters.




CWE-89		SQL Injection

SAMPLE: CWE89-57

WITHOUT BUGGYLINE:
1) Mostly the vulnerability was fixed by replacing curl_easy_unescape() with curl_easy_escape() in the code. Sample 2,5,10,12,13,15,16 (can be used for slides; It ends with text that it fixed), 17, 33,46(SAME comments)
2) Sanitzing the user input ie checking for special character. Sample 7,22 

WITH BUGGYLINE:
1) Same behaviour as we saw in without buggyline case. Sample 8,10
2) Adds url_easy_escape first to encode the path and then pass the encoded path to url_easy_unescape(). Sample 9, 13, 17, 23, 25 (Can be used for the slide), 28, 34, 35,40
3) when applying curl_easy_escape(). It removed the & len argument. Sample 16




SAMPLE: CWE89-1063

WITHOUT BUGGYLINE:
1) Adds curl_easy_escape() before curl_easy_unescape(). Sample 18, 22,29,32
2) adding a loop to filter out any potential characters that could be used in an SQL injection attack. The loop checks if any of these characters are present in the path and if they are present, it replaces them with a null character.
After the loop has finished, the path is then passed to curl_easy_unescape. Sample 3, 6, 11
3) Adds my_sql_escape() function to escape teh special characters. Sample 49



WITH BUGGYLINE:
1) Replace the curl_easy_unescape() with curl_easy_escape(). Sample 2, 24,
2) Adds a new for loop to check for the special characters. Sample 4
3) Remove illegal characters from mailbox string to prevent SQL Injection. Sample 5
4) Adds curl_easy_escape() before curl_easy_unescape(). Sample 6, 42, 50

Takeaway: It know what variable to work on. Since it is missing escaping. It addes escaping library to fix the SQL injection.





CWE-22      Path Traversal

SAMPLE: CWE22-212

WITHOUT BUGGYLINE:
1) Coreectly identifies the variable to work on and adds code to prevent  . Sample 2, 8, 9, 22, 27, 31, 38, 43, 51
2) Detects the path traversal. Sample 20


WITH BUGGYLINE:
1) Check if the file does not contain any "..". The main problem is all the <StartBug> and <EndBug> tags are wrong.
The target is have a whole new program and delete the buggy program. Sample 11, 12, 16, 24, 27, 39, 43



Takeaway: It does add filteration on the variable and tries to prevent the path traversal.



SAMPLE: CWE22-402

WITHOUT BUGGYLINE:
1) Fix is outside the token input limit

WITH BUGGYLINE:
1) Fix is outside the token input limit


SAMPLE: CWE22-512

WITHOUT BUGGYLINE:
1) can detects the line that a has a problem and adds the variable to has a safepath. Sample 2, 4, 5, 12
2) It restricts the user input is now limited to a fixed directory path ("pages/").
Instead of relying on the user input to specify the path, the code now always prepends the path "pages/" to
any user input, thus ensuring that the file access is always done within the "pages/" directory
and not any other directory that the user may have specified. Sample 6,
3) ADDS a new function to call that will check for allowed directory and valid path lenght. Sample 15
4) The vulnerability has been fixed by ensuring that all file paths are relative to a restricted directory.
This is achieved by concatenating the file path with the restricted directory in a variable, and then
using this variable in all file access and manipulation functions. This ensures that the user
cannot access files outside of the restricted directory. Sample 18, 23, 25

** ASK DR. WILSON ** about this: Sample 2, 5, 9, 11, 14, 17, 19, 35, 39 (good example) and 47 (good example)

WITH BUGGYLINE:
1) Use of realpath() to fix the vulnerability. Sample 4, 11, 12, 13, 14, 16, 21, 22, 25, 29, 34, 44, 48, 49, 51
2) Check the page[0] and page[1]. It looks good to me. Sample 7


** ASK Dr. Wilson ** about this: Sample 7, 10 ( This should be correct based on the comment), 18


SAMPLE: CWE22-1656

WITHOUT BUGGYLINE:
1) The sample added realpath() and checks for the absolutepath. If no absolutepath then sets the error. Sample 5 (Looks good)


**ASk Dr. Wilson:** Sample 5



WITH BUGGYLINE:
1) Sample 2 correctly predicted the required fix.



CWE-287     Improper Authentication

SAMPLE: CWE287-231

WITHOUT BUGGYLINE:
1) Sample 2 correctly predicted the required fix.



WITH BUGGYLINE:
1) Sample 2 correctly predicted the required fix.



SAMPLE: CWE287-413

WITHOUT BUGGYLINE:
1) Correctly identifies the variable to work on. Sample 1, 6, 40, 47 (very close)


WITH BUGGYLINE:
1) Sample 3 is very close. Just missing few more tokens.
2) Sample 6 is very close. Missing two tokens.
3) Sample 10 is very close. Missing two tokens.
4) Sample 18, 32, 43 is just missing the comparision.
4) Sample 27, 29, 44, 46 is having the wrong comparision.

Takeaway: The full input sample is out of the input text limits. Check to make sure it belongs to complete program category.


SAMPLE: CWE287-1635

WITHOUT BUGGYLINE:
1) In very few cases it identify the correct to place to add some code. Sample 20, 29, 33

WITH BUGGYLINE:
1) It adds strcmp() function to compare but not correct. Sample 24


Takeaway: Model perfomed bad on this sample.



CWE-862     Missing Authorization

SAMPLE: CWE862-200

WITHOUT BUGGYLINE:
1) It is a complicated fix. It does figure out the variable to work on but hard to figure.
2) Sample 49 is adding codes we want but still far from being perfect.


WITH BUGGYLINE:
1) Complicated sample.





CWE-522     Insufficiently Protected Credentials

SAMPLE: CWE522-370


WITHOUT BUGGYLINE:
1) Its too complicated that can be fixed by any machine learning model.
2) It adds some line that will encrypt th ekey with a secure algorithum but it is not the fix.
3) Adds an additional step in the code where the label is encrypted with a key before it is used.
4) Some fixes include generate a random secure key and encrypt it.


WITH BUGGYLINE:
1) Its too complicated that can be fixed by any machine learning model.



CWE-611     Improper Restriction of XML Reference

SAMPLE: CWE611-7

WITHOUT BUGGYLINE:
1) It does add new xmlschemasetparserstrccturederror() line but this sample is complicated. Sample 3, 9, 10
2) It also adds xmlSchemaSetParserStructFlags(ctx, XML_PARSE_NOENT), Set flag to disable external entity references. Sampe 22
3) This sample can nebver be fixed because it also has change of function argumnets.


WITH BUGGYLINE:
1) This sample can nebver be fixed because it also has change of function argumnets.
2) Its too complicated that can be fixed by any machine learning model.



SAMPLE: CWE611-1274

WITHOUT BUGGYLINE:
1) Exceeds model's maximum context length of 4097 tokens.

WITH BUGGYLINE:
1) Exceeds model's maximum context length of 4097 tokens.











