Original code,Plausible Program,Number of Bugs Present,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full (lua_State * L , int limit , int offset ) { 
size_t len ; 
const char * s ; 
mp_cur c ; 
int cnt ; 
int decode_all = ( ! limit && ! offset ) ; 
s = luaL_checklstring ( L , 1 , & len ) ; 
if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; 
else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; 
if ( decode_all ) limit = INT_MAX ; 
mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; 
for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { 
mp_decode_to_lua_type ( L , & c ) ; 
if ( c . err == MP_CUR_ERROR_EOF ) { 
return luaL_error ( L , ""Missing bytes in input."" ) ; 
} else if ( c . err == MP_CUR_ERROR_BADFMT ) { 
return luaL_error ( L , ""Bad data format in input."" ) ; 
} 
} 
if ( ! decode_all ) { 
int offset = len - c . left ; 
<StartBug>
if (c.left > 0) {
  lua_pushinteger ( L , offset ) ; 
} else {
  lua_pushinteger ( L , -1 ) ; 
} 
<EndBug>
lua_insert ( L , 2 ) ; 
cnt += 1 ; 
} 
return cnt ; 
}",1,442,-29.216813219070733,-0.0661013873734632
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if (c.left == 0) { lua_pushinteger(L, -1); } else { lua_pushinteger(L, offset); }<EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,380,-8.763595914578092,-0.02306209451204761
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if (len > 0) { lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,374,-9.612540975228692,-0.025701981217189016
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if ( c . left == 0 ) { lua_pushinteger ( L , - 1 ) ; } else { lua_pushinteger ( L , offset ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,382,-3.191308225103291,-0.008354210013359401
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if(offset < 0)  lua_pushinteger ( L , - 1 ); else lua_pushinteger ( L , offset ); <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,375,-17.01916249515974,-0.04538443332042597
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if(offset >= 0) { lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; } else { lua_pushinteger ( L , 0 ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,388,-7.985084655591639,-0.02058011509173103
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:"," 
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,358,-3.81517422650395,-0.010656911247217737
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if (offset > 0) { lua_pushinteger ( L , offset ) ; } else { lua_pushinteger ( L , -1 ); } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,379,-8.90016249188924,-0.023483278342715675
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if ( c . left == 0 ) { lua_pushinteger ( L , - 1 ) ; } else { lua_pushinteger ( L , offset ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,382,-3.161167297451191,-0.008275307061390553
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.6128165851631406,-0.004517693515863139
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.5784394961132402,-0.004421399148776583
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if (c.left == 0) lua_pushinteger(L, -1); 
else lua_pushinteger(L, offset); <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,378,-10.147012476007143,-0.026843948349225245
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.5784394961132402,-0.004421399148776583
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if ( c . left == 0 ) { lua_pushinteger ( L , - 1 ) ; } else { lua_pushinteger ( L , offset ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,382,-3.191308225103291,-0.008354210013359401
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.5784394961132402,-0.004421399148776583
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.6128165851631406,-0.004517693515863139
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.6240917988000407,-0.00454927674733905
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if ( c . left == 0 ) { lua_pushinteger ( L , - 1 ) ; } else { lua_pushinteger ( L , offset ) ; }  <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,383,-7.3520826157869905,-0.019196038161323734
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if ( c . left == 0 ) lua_pushinteger ( L , - 1 ) ; else lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,378,-4.238600356660538,-0.01121322845677391
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.6959088036598402,-0.0047504448281788245
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , ( c . left == 0 || offset >= len ) ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,372,-8.477982009082034,-0.022790274217962456
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if(offset < 0) { lua_pushinteger ( L , -1 ); } else { lua_pushinteger ( L , offset ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,379,-9.009132103863994,-0.023770797107820565
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if ( c . left == 0 ) { lua_pushinteger ( L , - 1 ) ; } else { lua_pushinteger ( L , offset ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,382,-3.0142395887926905,-0.007890679551813325
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if (offset < 0) { lua_pushinteger ( L , -1 ) ; } else { lua_pushinteger ( L , offset ) ; }  <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,381,-11.78959694001584,-0.030943823989542887
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } <StartBug> if ( offset >= len ) { lua_pushinteger ( L , -1 ); } else { int offset = len - c . left ; lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; return cnt ; }",1,379,-13.298406091389044,-0.03508814272134313
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if ( offset > len - 1 ) lua_pushinteger ( L , -1 ); else lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,377,-14.974942705836837,-0.03972133343723299
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if ( c . left == 0 ) { lua_pushinteger ( L , -1 ) ; } else { lua_pushinteger ( L , offset ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,382,-4.970222465794689,-0.013011053575378767
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.6959088036598402,-0.0047504448281788245
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if ( offset > 0 ) { lua_pushinteger ( L , offset - 1 ) ; } else { lua_pushinteger ( L , - 1 ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,382,-8.986927955776194,-0.023525989413026686
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.6959088036598402,-0.0047504448281788245
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if ( c . left == 0 ) { lua_pushinteger ( L , -1 ) ; } else { lua_pushinteger ( L , offset ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,382,-4.970222465794689,-0.013011053575378767
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:"," 
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if ( c . left == 0 ) lua_pushinteger ( L , -1 ) ; else lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,379,-9.598245303928799,-0.025325185498492872
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.5862964316588701,-0.004443407371593474
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.5384691387181404,-0.004309437363356135
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? len : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,365,-3.58635612544067,-0.009825633220385398
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if (c.left == 0) { lua_pushinteger ( L , -1 ) ; } else { lua_pushinteger ( L , offset ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,382,-5.56672550935209,-0.01457257986741385
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:"," 
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,358,-3.779299603893842,-0.010556702804172743
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if (c.left == 0) { lua_pushinteger(L, -1); } else { lua_pushinteger(L, offset); } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,380,-4.237041015380187,-0.011150107935211019
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left ? offset : - 1 ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,364,-6.191104961229271,-0.017008530113267226
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if (c.left == 0) { lua_pushinteger ( L , -1) ; } else { lua_pushinteger ( L , offset ) ; } <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,382,-7.821143050787391,-0.02047419646802982
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.5862964316588701,-0.004443407371593474
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> if (c.left == 0) lua_pushinteger ( L , -1 ) ; else lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,378,-7.629866649247138,-0.020184832405415708
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.5862964316588701,-0.004443407371593474
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.5384691387181404,-0.004309437363356135
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:"," 
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , cnt == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,366,-8.99262978876974,-0.024570026745272516
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.5384691387181404,-0.004309437363356135
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.5862964316588701,-0.004443407371593474
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ;  <StartBug> lua_pushinteger ( L , c . left == 0 ? len : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,366,-8.07676448163214,-0.0220676625181206
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.5633198739623395,-0.004379047266000951
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }
Fixed code:","
int mp_unpack_full ( lua_State * L , int limit , int offset ) { size_t len ; const char * s ; mp_cur c ; int cnt ; int decode_all = ( ! limit && ! offset ) ; s = luaL_checklstring ( L , 1 , & len ) ; if ( offset < 0 || limit < 0 ) return luaL_error ( L , ""Invalid request to unpack with offset of %d and limit of %d."" , offset , len ) ; else if ( offset > len ) return luaL_error ( L , ""Start offset %d greater than input length %d."" , offset , len ) ; if ( decode_all ) limit = INT_MAX ; mp_cur_init ( & c , ( const unsigned char * ) s + offset , len - offset ) ; for ( cnt = 0 ; c . left > 0 && cnt < limit ; cnt ++ ) { mp_decode_to_lua_type ( L , & c ) ; if ( c . err == MP_CUR_ERROR_EOF ) { return luaL_error ( L , ""Missing bytes in input."" ) ; } else if ( c . err == MP_CUR_ERROR_BADFMT ) { return luaL_error ( L , ""Bad data format in input."" ) ; } } if ( ! decode_all ) { int offset = len - c . left ; <StartBug> lua_pushinteger ( L , offset ) ; <EndBug> lua_insert ( L , 2 ) ; cnt += 1 ; } return cnt ; }",1,357,-1.4541746569904697,-0.004073318366920083
