Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu( ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",191,-8.973773939763,-0.04698310963226701
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu_safe ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; timerfd_remove_cancel ( ctx ) ; spin_unlock ( & cancel_lock ) ; } }",206,-5.5031792874172,-0.02671446256027767
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { 
    if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { 
        if ( ! ctx -> might_cancel ) { 
	    // Acquire lock before initializing ctx->might_cancel
            spin_lock ( & cancel_lock ) ;
            ctx -> might_cancel = true ; 
            list_add_rcu ( & ctx -> clist , & cancel_list ) ; 
            spin_unlock ( & cancel_lock ) ; 
        } 
    } else if ( ctx -> might_cancel ) { 
        timerfd_remove_cancel ( ctx ) ; 
    } 
    // Acquire lock before cleaning up
    spin_lock ( & cancel_lock ) ;
    ctx -> might_cancel = false;
    spin_unlock ( & cancel_lock ) ;
}",277,-44.79442236335246,-0.16171271611318577
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { int res; spin_lock ( & cancel_lock ) ; res = timerfd_remove_cancel ( ctx ) ;  if ( res || ! ctx -> might_cancel ) { ctx -> might_cancel = true ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; } spin_unlock ( & cancel_lock ) ; } }",178,-28.2273620389247,-0.1585806856119365
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_lock ( & cancel_lock ) ; if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; } spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",183,-3.198002222608899,-0.017475421981469393
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_lock ( & cancel_lock ) ; if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; } spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",183,-3.1920397249690997,-0.01744284002715355
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu ( ) ; } } else if ( ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; timerfd_remove_cancel ( ctx ) ; spin_unlock ( & cancel_lock ) ; } }",212,-6.151505032389099,-0.02901653317164669
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { rcu_read_lock (); if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { rcu_read_unlock (); timerfd_remove_cancel ( ctx ) ; } }",198,-10.639289056908797,-0.053733783115701
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; timerfd_remove_cancel ( ctx ) ; } } }",170,-5.834555655044299,-0.03432091561790764
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } else { timerfd_remove_cancel ( ctx ) ; } }",160,-6.038244499598752,-0.037739028122492205
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; spin_lock_irqsave ( & cancel_lock , flags ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock_irqrestore ( & cancel_lock , flags ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",217,-11.975087611429025,-0.055184735536539284
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu ( ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",191,-4.40440211277865,-0.023059696925542668
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu() ; } } else if ( ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; list_del_rcu ( & ctx -> clist ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu() ; ctx -> might_cancel = false ; } }",231,-9.807869547539251,-0.04245830972960715
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; ctx -> might_cancel = true ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; timerfd_remove_cancel ( ctx ) ; spin_unlock ( & cancel_lock ) ; } }",204,-5.59589715481955,-0.027430868405978186
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; call_rcu ( & ctx -> clist , timerfd_remove_cancel ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",204,-7.198241783139301,-0.03528549893695736
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu (); } } else if ( ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; timerfd_remove_cancel ( ctx ) ; spin_unlock ( & cancel_lock ) ; } }",210,-9.04161208340569,-0.04305529563526519
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else { spin_lock ( & cancel_lock ) ; if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } spin_unlock ( & cancel_lock ) ; } }",206,-4.683953853952599,-0.022737640067731064
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu (); } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; synchronize_rcu (); } }",195,-6.736487573030741,-0.034546090118106366
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { timerfd_remove_cancel ( ctx ) ; if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } }",170,-9.1945071304483,-0.05408533606146059
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_lock ( & cancel_lock ) ; if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; } spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",183,-3.160544431119398,-0.017270734596280864
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; call_rcu ( & ctx -> clist , timerfd_remove_cancel ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",204,-7.258150688797898,-0.035579170043126954
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { bool old_might_cancel; old_might_cancel = ctx -> might_cancel; ctx -> might_cancel = true ; if (old_might_cancel == false) { spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",206,-18.646138714348826,-0.09051523647742149
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; timerfd_remove_cancel ( ctx ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",195,-5.6853333656152,-0.02915555572110359
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","

static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { 
  if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { 
    if ( ! ctx -> might_cancel ) { 
      ctx -> might_cancel = true ; 
      spin_lock ( & cancel_lock ) ; 
      list_add_rcu_safe ( & ctx -> clist , & cancel_list ) ; 
      spin_unlock ( & cancel_lock ) ; 
    } 
  } else if ( ctx -> might_cancel ) { 
    spin_lock ( & cancel_lock ) ; 
    timerfd_remove_cancel ( ctx ) ; 
    spin_unlock ( & cancel_lock ) ; 
  } 
}",245,-14.278476523799045,-0.058279496015506305
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu () ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; synchronize_rcu () ; } }",197,-6.52820279926578,-0.03313808527546081
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ctx -> might_cancel == false ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else { timerfd_remove_cancel ( ctx ) ; ctx -> might_cancel = false; } }",184,-9.129884856484995,-0.049618939437418456
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu ( ) ; } } else if ( ctx -> might_cancel ) { rcu_read_lock ( ) ; timerfd_remove_cancel ( ctx ) ; rcu_read_unlock ( ) ; } }",210,-8.735062267340501,-0.041595534606383336
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu ( ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",191,-4.385623765174251,-0.022961380969498697
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; if (!list_empty(&ctx->clist)) list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",194,-8.140806987732901,-0.041962922617179904
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { 
if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { 
if ( ! ctx -> might_cancel ) { 
ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; 
synchronize_rcu(); // added
} 
} else if ( ctx -> might_cancel ) { 
synchronize_rcu(); // added
timerfd_remove_cancel ( ctx ) ; 
} 
}",218,-19.89633914919469,-0.09126761077612244
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; ctx -> might_cancel = true ; ctx -> refcount ++; } else { ctx -> refcount ++; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; ctx -> refcount --; if (ctx -> refcount == 0) { ctx -> might_cancel = false; } } }",228,-20.39345883573125,-0.0894449948935581
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu ( ) ; } } else { timerfd_remove_cancel ( ctx ) ; } }",181,-8.978770144862949,-0.04960646488874557
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu ( ) ; } } else if ( ctx -> might_cancel ) { rcu_read_lock ( ) ; timerfd_remove_cancel ( ctx ) ; rcu_read_unlock ( ) ; } }",210,-8.99708000729805,-0.04284323812999072
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel(struct timerfd_ctx *ctx, int flags) {
    if ((ctx->clockid == CLOCK_REALTIME || ctx->clockid == CLOCK_REALTIME_ALARM) && (flags & TFD_TIMER_ABSTIME) && (flags & TFD_TIMER_CANCEL_ON_SET)) { 
        if (!ctx->might_cancel) {
            spin_lock(&cancel_lock); 
            ctx->might_cancel = true; 
            list_add_rcu(&ctx->clist, &cancel_list);
            spin_unlock(&cancel_lock); 
        }
    } else { 
        spin_lock(&cancel_lock);
        ctx->might_cancel = false;
        timerfd_remove_cancel(ctx);
        spin_unlock(&cancel_lock);
    } 
}",223,-28.631387205348233,-0.12839187087600104
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu_safe ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; list_del_rcu_safe ( & ctx -> clist ) ; } }",202,-6.855123597498199,-0.0339362554331594
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else { spin_lock ( & cancel_lock ) ; if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } spin_unlock ( & cancel_lock ) ; } }",206,-4.560666825089199,-0.0221391593450932
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { 
	rcu_read_lock();
	if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { 
		if ( ! ctx -> might_cancel ) { 
			ctx -> might_cancel = true ; 
			spin_lock ( & cancel_lock ) ; 
			list_add_rcu ( & ctx -> clist , & cancel_list ) ; 
			spin_unlock ( & cancel_lock ) ;
		}
	}
	else if ( ctx -> might_cancel ) {
		timerfd_remove_cancel ( ctx ) ;
		synchronize_rcu();
	}
	rcu_read_unlock();
}",251,-24.01317745100674,-0.09567002968528582
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_lock ( & cancel_lock ) ; list_add_rcu_safe ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } else { if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } ctx -> might_cancel = false ; } }",174,-15.800750348147398,-0.09080891004682412
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu_safe ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else { spin_lock ( & cancel_lock ) ; if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } spin_unlock ( & cancel_lock ) ; } }",208,-7.433587238224048,-0.03573840018376946
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else { spin_lock ( & cancel_lock ) ; timerfd_remove_cancel ( ctx ) ; spin_unlock ( & cancel_lock ) ; } }",194,-6.928204881159,-0.03571239629463402
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { rcu_read_lock () ; if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } rcu_read_unlock () ; }",200,-8.556073195418383,-0.042780365977091915
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_lock ( & cancel_lock ) ; if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; } spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",183,-3.184424393057898,-0.017401226191573214
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; ctx -> might_cancel = true ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; ctx -> might_cancel = false ; } }",193,-7.1310775279903,-0.03694858822792901
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; ctx -> might_cancel = true ; } } else if ( ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; timerfd_remove_cancel ( ctx ) ; spin_unlock ( & cancel_lock ) ; } }",204,-5.602298536199014,-0.027462247726465758
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; ctx -> might_cancel = true ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; timerfd_remove_cancel ( ctx ) ; spin_unlock ( & cancel_lock ) ; } }",204,-5.59589715481955,-0.027430868405978186
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu_safe ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",185,-5.475325768064098,-0.02959635550304918
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu ( ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",191,-4.40440211277865,-0.023059696925542668
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; synchronize_rcu(); } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }",189,-6.527130781133002,-0.034535083498058214
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu_safe ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; timerfd_remove_cancel ( ctx ) ; spin_unlock ( & cancel_lock ) ; } }",206,-5.571248199061998,-0.02704489417020387
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } }
Fixed code:","
static void timerfd_setup_cancel ( struct timerfd_ctx * ctx , int flags ) { rcu_read_lock ( ) ; if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ! ctx -> might_cancel ) { ctx -> might_cancel = true ; spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist , & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } rcu_read_unlock ( ) ; }",202,-6.8029731518921395,-0.03367808491035713
