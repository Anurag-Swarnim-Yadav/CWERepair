Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
  //check if address is within valid range
  if(address < 0x20){
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ;
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ;
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { }
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ;
    usleep ( 5 ) ;
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ;
  }else{
    return -1;
  }
}",230,-23.426279743593863,-0.10185339018953854
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg(uint8_t address) {
    
    // Validate input
    if(address > 0x1F) {
        return 0;
    }
    dm9000WriteReg(DM9000_REG_EPAR, 0x40 | address);
    dm9000WriteReg(DM9000_REG_EPCR, EPCR_EPOS | EPCR_ERPRR);
    while ((dm9000ReadReg(DM9000_REG_EPCR) & EPCR_ERRE) != 0) {
    }
    dm9000WriteReg(DM9000_REG_EPCR, EPCR_EPOS);
    usleep(5);
    return (dm9000ReadReg(DM9000_REG_EPDRH) << 8) | dm9000ReadReg(DM9000_REG_EPDRL);
}",218,-21.560233460077804,-0.09890015348659544
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
    if (address > 0x1F)
        return 0; 

    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
    usleep ( 5 ) ; 
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",220,-12.486716120567504,-0.05675780054803411
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
  if (address < 0x20) // check if address is within valid range
  {
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
    usleep ( 5 ) ; 
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
  }
  return 0; // return 0 if address is not within valid range
}",241,-25.078634355783702,-0.10406072346798216
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
 //check if address is valid
 if(address > 0x1F) {
  return -1;
 } 
 dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }",211,-21.35570706890709,-0.10121188184316157
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
  //Check for valid address input
  if (address > 31) {
    return 0;
  }
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ;
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ;
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) {
  }
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ;
  usleep ( 5 ) ;
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ;
}",223,-18.74016087136366,-0.08403659583571148
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
  if(address > 255) return 0;
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
  usleep ( 5 ) ; 
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",214,-12.793234520482821,-0.05978146972188234
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
  if(address <= 0x1F) {
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ;
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ;
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { }
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ;
    usleep ( 5 ) ;
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ;
  }
  else {
    printf(""Error: address out of range.\n"");
    return -1; 
  }
}",239,-25.81635169692965,-0.10801820793694415
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
  // Add validation of address
  if (address < 0 || address > 31) {
    return 0;
  }
  
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
  usleep ( 5 ) ; 
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",233,-17.990839394497545,-0.07721390298067615
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
  if (address > 0x1f) { // validate address
    return 0;
  }
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
  usleep ( 5 ) ; 
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",225,-14.256784799855213,-0.0633634879993565
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
	if(address > 31) return 0;
	dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ;
	dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ;
	while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { }
	dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ;
	usleep ( 5 ) ;
	return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ;
}",204,-14.81164377477379,-0.07260609693516563
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
    
    // Validate the addressed passed in as a parameter 
    if (address > 0xFF) {
        return -1; 
    } 
    
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
    usleep ( 5 ) ; 
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",242,-36.963511862746984,-0.1527417845568057
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { if(address >= 0 && address <= 32) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; } else { //handle an error } }",202,-20.63926429806136,-0.10217457573297703
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
    if (address > 0x1f) {
        return 0;
    }
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
    usleep ( 5 ) ; 
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",222,-9.658817553562997,-0.0435081871782117
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
  if(address < 32) { //checks to make sure address is within range
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
    usleep ( 5 ) ; 
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
  } else {
    return 0; //returns 0 if address is out of range
  }
}",244,-28.077348273775577,-0.11507109948268679
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
  if (address >= 0x20) {
    return 0;
  }
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { 
  } 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
  usleep ( 5 ) ; 
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",224,-12.040268773307814,-0.05375119988083845
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:"," 
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
  if (address > 0x1F) {
    return 0;
  }
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { 
  } 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
  usleep ( 5 ) ; 
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",227,-10.757209696755773,-0.04738858897249239
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
    if(address > 0x1F) {
        return 0;
    }
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ;
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ;
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { }
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ;
    usleep ( 5 ) ;
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ;
}",216,-11.132150324609398,-0.05153773298430277
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
  // Validate input
  if(address < 0x00 || address > 0x1F)
    return 0;

  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ;
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ;
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { }
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ;
  usleep ( 5 ) ;
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ;
}",224,-17.230311018992158,-0.07692103133478642
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
  if (address > 0x1F) {
    return 0;
  }
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { 
  } 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
  usleep ( 5 ) ; 
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",226,-8.420142815158089,-0.037257269093619864
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
    if(address > 0x1f) {
      return 0;
    }
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
    usleep ( 5 ) ; 
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",223,-13.322315307628779,-0.059741324249456405
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
    if(address > 0x1F) {
        printf(""Error: Address out of range.\n"");
        return -1;
    }
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ;
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ;
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { }
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ;
    usleep ( 5 ) ;
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",233,-22.843868372335898,-0.09804235352933861
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
  // Check if address is valid
  if (address < 0 || address > 0x1f) 
    return -1;
 
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
  usleep ( 5 ) ; 
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",235,-21.811075916700567,-0.09281308900723645
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
    if (address > 31) return -1;
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }",197,-14.914550147290798,-0.07570837638218679
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { //Add input validation to make sure the address is within bounds  if (address < 0 || address > 0x1F) { return -1; } dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }",215,-26.85859617780068,-0.12492370315256131
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
if(address > 0x1f) {
 return -1; 
 }
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }",205,-23.812728819358288,-0.1161596527773575
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
  // Validate input
  if (address > 0xFF) {
    return 0;
  } 
  
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { 
  } 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
  usleep ( 5 ) ; 
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",233,-14.920884445969149,-0.06403813066939548
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
    // validate input parameter
    if(address > 0xFF) {
        return 0;
    }  
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }",212,-26.288439007729707,-0.12400207079117787
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { if (address > 0x1F){ return -1; } dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }",197,-9.397068079067695,-0.04770085319323703
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","

uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
  //Validate input
  if (address >= 0 && address <= 0x1f){
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
    usleep ( 5 ) ; 
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
  }
  // If input is not valid, return 0
  else {
    return 0;
  }
}",251,-30.731589417945962,-0.12243661122687634
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
    if (address > 31 || address < 0) {
        printf(""Error: Invalid PHY register address.\n"");
        exit(1);
    }
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
    usleep ( 5 ) ; 
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ;
}",239,-27.83228887915568,-0.11645309154458444
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
  // Validate input to make sure it is within proper range
  if ( address > 0xFF ) {
    return 0;
  }

  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
  usleep ( 5 ) ; 
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",236,-25.727714619017895,-0.10901573991109277
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
  // Validate the input before proceeding 
  if (address < 0x00 || address > 0xFF) {
    return 0;
  }
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
  usleep ( 5 ) ; 
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",238,-22.355857140876214,-0.09393217286082443
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
    if (address > 0x1F) {
        return 0;
    }
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
    usleep ( 5 ) ; 
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",223,-7.7167891231016,-0.034604435529603586
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
    // check if address is valid
    if (address > 0x1F) {
        return 0;
    }
    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ;
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ;
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) {
    }
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ;
    usleep ( 5 ) ;
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ;
}",226,-14.339426072726127,-0.06344878793241648
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
  if(address > 0x1F){
    return 0;
  }
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
  usleep ( 5 ) ; 
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",222,-9.1097679500897,-0.04103499076616982
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
//Check if address is within bounds 
if ( address > PHY_REG_RANGE ) { return -1; } 
dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }",213,-33.920312666674526,-0.15925029420973957
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
if (address > 0x1F) {
return;
} 
dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
usleep ( 5 ) ; 
return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",210,-16.4196877721456,-0.07818898939116953
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
if(address > 0x1F) {
return 0;
}
dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
usleep ( 5 ) ; 
return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",211,-11.572813294635711,-0.0548474563726811
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
	if (address > 0x3F){
		return 0;
	}
	dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
	dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
	while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
	dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
	usleep ( 5 ) ; 
	return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ;
}",218,-18.374088968620534,-0.08428481178266299
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
  if ( address > 0x1F ) {
    return 0;
  }
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ;
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { 
  } 
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
  usleep ( 5 ) ; 
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",224,-14.085370795966403,-0.06288111962485002
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
  if(address > 0x1F) {
    return 0;
  }
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ;
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ;
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { }
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ;
  usleep ( 5 ) ;
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ;
}",216,-9.663264614853503,-0.04473733617987733
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
  //Check for valid address
  if (address < 0 || address > 0xFF) {
   return 0;
  }
  
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",220,-22.998358658440775,-0.10453799390200352
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
  if (address > 0x1F) {
    return 0;
  }
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ;
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ;
  while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) {
  }
  dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ;
  usleep ( 5 ) ;
  return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ;
}",218,-7.580655241884882,-0.034773647898554506
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
 if(address > 0x1F){
    return 0;
 }
 dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",204,-16.149142625823206,-0.07916246385207454
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
   if (address >= 0xFF) { 
      printf(""Error: Invalid address""); 
      return 0;
   } 
   dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
   dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
   while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
   dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
   usleep ( 5 ) ; 
   return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",234,-25.360722280965067,-0.10837915504685926
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
if (address > 255) {
return 0;
}
dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } 
dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
usleep ( 5 ) ; 
return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",208,-13.679626053602911,-0.065767432950014
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
 if (address > 0x1f) return 0;
 dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }",197,-12.233667135967437,-0.06209983317749968
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) {
  // Check if address is within valid range
  if (address < 0 || address > 255) {
    return 0;
  }
  dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }",216,-16.0661170801521,-0.07438017166737083
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
uint16_t dm9000ReadPhyReg ( uint8_t address ) { dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { } dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; usleep ( 5 ) ; return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; }
Fixed code:","
uint16_t dm9000ReadPhyReg ( uint8_t address ) { 
    // Add input validation
    if (address < 0 || address > 0xff) {
        return 0;
    }

    dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; 
    while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) { 
    } 
    dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; 
    usleep ( 5 ) ; 
    return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; 
}",234,-17.584646467713995,-0.07514806182783758
