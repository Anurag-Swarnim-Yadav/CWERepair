Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { //Validate input parameters if (off > prog_len || cnt > prog_len || off < 0 || cnt < 0) return -EINVAL; struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",261,-18.88652153530004,-0.07236215147624536
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
  struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
  if ( cnt == 0 || off >= prog_len || cnt > prog_len - off ) {
  	return -EINVAL;
  }
  if ( cnt == 1 ) return 0 ; 
  new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
  if ( ! new_data ) return - ENOMEM ; 
  memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
  memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
  env -> insn_aux_data = new_data ; 
  vfree ( old_data ) ; 
  return 0 ; 
}",292,-19.6904550657292,-0.06743306529359315
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
    struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
    if ( cnt == 1 || off >= prog_len ) return 0 ; 
    new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
    if ( ! new_data ) return - ENOMEM ; 
    memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
    memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
    env -> insn_aux_data = new_data ; 
    vfree ( old_data ) ; 
    return 0 ; 
}",261,-10.863100915417698,-0.04162107630428237
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
	if ( off > prog_len || cnt > prog_len - off ){
		return -EINVAL;
	}
	struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",261,-18.43410226588447,-0.0706287443137336
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data(struct bpf_verifier_env *env, u32 prog_len, u32 off, u32 cnt) {
   struct bpf_insn_aux_data *new_data, *old_data = env->insn_aux_data;
   u32 new_prog_len = 0;
   if (cnt == 1) return 0;
   
   //Validate Input
   if (prog_len == 0 || off > prog_len || cnt > prog_len || (off + cnt) > prog_len) {
      return -EINVAL;
   }
   
   new_prog_len = prog_len + cnt - 1;
   new_data = vzalloc(sizeof(struct bpf_insn_aux_data) * new_prog_len);
   if (!new_data) return -ENOMEM;
   
   memcpy(new_data, old_data, sizeof(struct bpf_insn_aux_data) * off);
   memcpy(new_data + off + cnt - 1, old_data + off, sizeof(struct bpf_insn_aux_data) * (prog_len - off - cnt + 1));
   
   env->insn_aux_data = new_data;
   vfree(old_data);
   return 0;
}",336,-39.25031166014823,-0.11681640375044115
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) {
	if ( prog_len <= 0 || cnt > prog_len || off > prog_len ) {
		return - EINVAL ; 
	}
	struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
	if ( cnt == 1 ) return 0 ; 
	new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
	if ( ! new_data ) return - ENOMEM ; 
	memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
	memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
	env -> insn_aux_data = new_data ; 
	vfree ( old_data ) ; 
	return 0 ; 
}",291,-23.00057810372516,-0.0790397872980246
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 

// Validate input
if (off > prog_len || cnt > prog_len || off + cnt > prog_len) {
  return -EINVAL;
}

if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",271,-14.891942874644007,-0.054951818725623644
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
//added check 
if ( off > prog_len ){ 
return -EINVAL; 
} 
if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",255,-27.13449973945669,-0.10640980289983015
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","

static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
    if (off + cnt > prog_len) {
        return -EINVAL;
    }
    struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
    if ( cnt == 1 ) return 0 ; 
    new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
    if ( ! new_data ) return - ENOMEM ; 
    memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
    memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
    env -> insn_aux_data = new_data ; 
    vfree ( old_data ) ; 
    return 0 ; 
}",281,-12.478457064861098,-0.044407320515519925
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
    if ( off > prog_len ) {
        return -EINVAL;
    }
    struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
    if ( cnt == 1 ) return 0 ; 
    new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
    if ( ! new_data ) return - ENOMEM ; 
    memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
    memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
    env -> insn_aux_data = new_data ; 
    vfree ( old_data ) ; 
    return 0 ; 
}",277,-11.39711812963356,-0.04114483079290094
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 

if ( cnt == 0 || cnt > prog_len || off > prog_len - cnt ) 
    return - EINVAL ; 

struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
if ( cnt == 1 ) 
    return 0 ; 

new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
if ( ! new_data ) 
    return - ENOMEM ; 

memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
env -> insn_aux_data = new_data ; 
vfree ( old_data ) ; 
return 0 ; 
}",290,-18.87724717603548,-0.06509395577943268
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 || prog_len < off + cnt ) return 0 ; //added check for valid input new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",241,-18.036807089610697,-0.07484152319340538
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:"," 
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; // Validate input data if ( ! prog_len || cnt == 0 || off > prog_len || off + cnt > prog_len ) return -EINVAL; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",265,-27.505226920460398,-0.10379330913381282
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 0 || cnt > prog_len || off > prog_len ) return -EINVAL ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",252,-8.090421699016554,-0.03210484801197045
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; // Validate input parameters if ( cnt == 0 || cnt > prog_len || off > prog_len || off + cnt > prog_len ) { return - EINVAL ; } if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",268,-15.575411344327398,-0.05811720650868432
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
  if (cnt == 0 || cnt > prog_len) {
    return -EINVAL;
  }
  struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
  new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
  if ( ! new_data ) return - ENOMEM ; 
  memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
  memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
  env -> insn_aux_data = new_data ; 
  vfree ( old_data ) ; 
  return 0 ; 
}",270,-9.442278980694237,-0.03497140363220088
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
    struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
    if ( cnt == 0 || cnt > prog_len ) return -EINVAL; 
    new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
    if ( ! new_data ) return - ENOMEM ; 
    memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
    memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
    env -> insn_aux_data = new_data ; 
    vfree ( old_data ) ; 
    return 0 ; 
}",265,-9.677239017777257,-0.03651788308595191
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
	//ensure cnt is not larger than prog_len
	if (cnt > prog_len) {
		return -EINVAL;
	}
	struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
	if ( cnt == 1 ) return 0 ; 
	new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
	if ( ! new_data ) return - ENOMEM ; 
	memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
	memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
	env -> insn_aux_data = new_data ; 
	vfree ( old_data ) ; 
	return 0 ; 
}",293,-19.858455449540788,-0.06777629846259654
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 

// check for malicious input
if (cnt == 0 || cnt > prog_len - off || cnt < 0) {
  return -EINVAL;
}

if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",269,-26.02193785262177,-0.09673582844840807
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { if ( cnt == 0 || cnt > prog_len || off > prog_len - cnt ) return - ENOMEM ; struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",245,-12.486624894404901,-0.05096581589553021
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
if (off > prog_len || cnt > prog_len) {
  return -ENOMEM;
}

struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
if ( cnt == 1 ) return 0 ; 
new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
if ( ! new_data ) return - ENOMEM ; 
memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
env -> insn_aux_data = new_data ; 
vfree ( old_data ) ; 
return 0 ; 
}",274,-17.196301158545385,-0.06276022320637002
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
  struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
  if ( cnt == 1 ) {
    return 0 ; 
  }

  if (off >= prog_len || cnt > prog_len - off) {
    return -1;
  }

  new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
  if ( ! new_data ) {
    return - ENOMEM ; 
  }

  memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
  memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
  env -> insn_aux_data = new_data ; 
  vfree ( old_data ) ; 
  return 0 ; 
}",296,-24.502221105129355,-0.08277777400381539
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; if(off + cnt -1 > prog_len) return -EINVAL; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",245,-12.11114559379105,-0.049433247321596124
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
	if (off > prog_len) {
		return -EINVAL;
	}

	struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
	if ( cnt == 1 ) return 0 ; 
	
	new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
	if ( ! new_data ) return - ENOMEM ; 
	memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
	memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
	env -> insn_aux_data = new_data ; 
	vfree ( old_data ) ; 
	return 0 ; 
}",280,-15.525234069454354,-0.05544726453376555
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
    if (prog_len < 1 || cnt == 0 || cnt > prog_len || off > prog_len || off + cnt > prog_len)
        return -EINVAL;

    struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
    if ( cnt == 1 ) return 0 ; 
    new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
    if ( ! new_data ) return - ENOMEM ; 
    memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
    memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
    env -> insn_aux_data = new_data ; 
    vfree ( old_data ) ; 
    return 0 ; }",299,-25.541555099130004,-0.08542326120110369
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 0 || cnt > prog_len)   return -EINVAL; if ( off + cnt > prog_len)   return -EINVAL; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",255,-20.3908628090523,-0.07996416787863647
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:"," 
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
  // Validate cnt
  if (cnt <= 0 || cnt > MAX_ALLOWED_CNT){
    return - EINVAL;
  }

  struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
  if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
  if ( ! new_data ) return - ENOMEM ; 
  memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
  memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
  env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; 
}",286,-33.66374153898788,-0.11770538999646112
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) {
    struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ;
    if (cnt == 0 || cnt > prog_len-off) return -EINVAL;
    
    new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ;
    if ( ! new_data ) return - ENOMEM ;
    memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ;
    memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ;
    env -> insn_aux_data = new_data ;
    vfree ( old_data ) ;
    return 0 ;
}",259,-22.092661468570796,-0.08529985123000307
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
  if ( cnt == 0 || cnt > prog_len ) {
    return -EINVAL;
  }
  
  struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
  
  if ( cnt == 1 ) return 0 ; 
  
  new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
  if ( ! new_data ) return - ENOMEM ; 
  
  memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
  memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
  env -> insn_aux_data = new_data ; 
  vfree ( old_data ) ; 
  
  return 0 ; 
}",293,-15.743195345749603,-0.053731042135664174
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
	if ( cnt == 0 || cnt > prog_len) 
		return -EINVAL; 
	struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
	new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
	if ( ! new_data ) 
		return - ENOMEM ; 
	memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
	memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
	env -> insn_aux_data = new_data ; 
	vfree ( old_data ) ; 
	return 0 ; 
}",273,-15.960538484463083,-0.05846351093209921
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
    struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
    if ( cnt == 0 ) {
        return -EINVAL;
    }
    if ( cnt == 1 ) return 0 ; 
    new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
    if ( ! new_data ) return - ENOMEM ; 
    memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
    memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
    env -> insn_aux_data = new_data ; 
    vfree ( old_data ) ; 
    return 0 ; 
}",276,-10.924804845211154,-0.03958262625076505
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 || off >= prog_len || off + cnt - 1 >= prog_len ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",243,-12.082824034476898,-0.04972355569743579
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data(struct bpf_verifier_env *env, u32 prog_len, u32 off, u32 cnt) {
    struct bpf_insn_aux_data *new_data, *old_data = env->insn_aux_data;
    u32 max_cnt = prog_len - off;
    
    // Validate cnt before proceeding.
    if (cnt == 0 || cnt > max_cnt) {
        return -EINVAL;
    }

    if (cnt == 1) return 0;
    new_data = vzalloc(sizeof(struct bpf_insn_aux_data) * prog_len);
    if (!new_data) return -ENOMEM;
    memcpy(new_data, old_data, sizeof(struct bpf_insn_aux_data) * off);
    memcpy(new_data + off + cnt - 1, old_data + off, sizeof(struct bpf_insn_aux_data) * (prog_len - off - cnt + 1));
    env->insn_aux_data = new_data;
    vfree(old_data);
    return 0;
}",297,-29.818495610735713,-0.10039897512032227
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; // validate input if ( off < 0 || off > prog_len || cnt < 0 || off + cnt > prog_len ) return -EINVAL; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",261,-21.09144248043049,-0.08081012444609384
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 

// Add input validation check
if (off + cnt > prog_len) return -1;

if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",252,-18.191541286721158,-0.07218865589968713
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 0 || cnt > prog_len ) return - EINVAL ; if ( off > prog_len ) return - EINVAL ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",260,-9.216286117724694,-0.03544725429894113
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { if ( cnt == 0 || cnt > prog_len ) return - EINVAL ; struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",246,-6.4641452006278985,-0.026277013010682516
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
  if(cnt == 0 || cnt > prog_len) return -EINVAL;
  struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",251,-14.751463517099596,-0.05877077098446054
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
    if ( cnt == 1 || off < 0 || off >= prog_len || cnt > prog_len)
        return -EINVAL;

    struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
    new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
    if ( ! new_data ) return - ENOMEM ; 
    memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
    memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
    env -> insn_aux_data = new_data ; 
    vfree ( old_data ) ; 
    return 0 ; 
}",276,-21.969515870592257,-0.07959969518330529
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 

if ( cnt == 0 || cnt > prog_len || off > prog_len ){
  return -EINVAL;
} 

if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",263,-17.77092213956117,-0.06757004615802725
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:"," 
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
if (cnt == 0 || cnt > prog_len)
    return -EINVAL; 

struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
if ( cnt == 1 ) return 0 ; 

new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
if ( ! new_data ) return - ENOMEM ; 
memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
env -> insn_aux_data = new_data ; 
vfree ( old_data ) ; 
return 0 ; 
}",273,-20.247624715887586,-0.07416712350141973
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { size_t data_size; struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; data_size = sizeof ( struct bpf_insn_aux_data ) * prog_len; if (data_size < prog_len) { // added check to prevent integer overflow return - EINVAL; } new_data = vzalloc ( data_size ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",266,-30.47900869660006,-0.11458273946090249
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
  if (off > prog_len) {
    return -EINVAL;
  }
  struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ;
  if ( cnt == 1 ) return 0 ;
  new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ;
  if ( ! new_data ) return - ENOMEM ;
  memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ;
  memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ;
  env -> insn_aux_data = new_data ;
  vfree ( old_data ) ;
  return 0 ;
}",268,-14.527167590539516,-0.05420584921843103
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
if ( cnt == 0 || cnt > prog_len ) { // Validate input before proceeding
    return -EINVAL; // Return an error if input is invalid 
} 
if ( cnt == 1 ) return 0 ; 
new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
if ( ! new_data ) return - ENOMEM ; 
memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
env -> insn_aux_data = new_data ; 
vfree ( old_data ) ; 
return 0 ; }",284,-36.319887562239956,-0.12788692803605617
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","

static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
    if ( cnt == 0 && cnt > prog_len ) return -EINVAL;
    struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
    if ( cnt == 1 ) return 0 ; 
    new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
    if ( ! new_data ) return - ENOMEM ; 
    memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
    memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
    env -> insn_aux_data = new_data ; 
    vfree ( old_data ) ; 
    return 0 ; 
}",278,-20.65424346559072,-0.07429583980428317
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
    // Validate input
    if (off > prog_len || cnt <= 0) {
        return -EINVAL;
    }
    struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
    if ( cnt == 1 ) return 0 ; 
    new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
    if ( ! new_data ) return - ENOMEM ; 
    memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
    memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
    env -> insn_aux_data = new_data ; 
    vfree ( old_data ) ; 
    return 0 ; 
}",288,-15.220143206239797,-0.05284771946611041
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 

//Check that the input is valid
if (cnt <= 0 || cnt >= prog_len || off < 0 || off > prog_len) return -EINVAL;

if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",269,-25.429837484745324,-0.09453471183920195
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; 

// Add input validation check
if ( prog_len == 0 || off == 0 || cnt == 0 ) return -EINVAL ;

new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",260,-22.61106269279111,-0.08696562574150427
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 0 || cnt > prog_len || off > prog_len - cnt || off + cnt > prog_len ) return -EINVAL ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }",264,-12.892323008302093,-0.04883455684962914
"The Original Code is vulnerable to CWE-20: Improper Input Validation. Fix the vulnerability.
Original Code:
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; if ( cnt == 1 ) return 0 ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; if ( ! new_data ) return - ENOMEM ; memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ; vfree ( old_data ) ; return 0 ; }
Fixed code:","
static int adjust_insn_aux_data ( struct bpf_verifier_env * env , u32 prog_len , u32 off , u32 cnt ) { 
    if ( cnt == 0 || cnt > prog_len ) return -EINVAL;
    struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; 
    if ( cnt == 1 ) return 0 ; 
    new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * prog_len ) ; 
    if ( ! new_data ) return - ENOMEM ; 
    memcpy ( new_data , old_data , sizeof ( struct bpf_insn_aux_data ) * off ) ; 
    memcpy ( new_data + off + cnt - 1 , old_data + off , sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; 
    env -> insn_aux_data = new_data ; 
    vfree ( old_data ) ; 
    return 0 ; 
}",277,-10.32797899290725,-0.03728512271807671
