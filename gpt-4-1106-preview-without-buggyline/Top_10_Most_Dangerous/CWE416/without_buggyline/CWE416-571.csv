Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = NULL ; RBinInfo * info = NULL ; if ( binfile ) { binobj = binfile -> o ; if ( binobj ) { info = binobj -> info ; } } if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } free ( binobj ) ; free ( info ) ; return false ; }",390,-10.107364011525329,-0.025916317978270074
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env (RCore *r, RBinFile *binfile) { 
    RBinObject *binobj = NULL;
    RBinInfo *info = NULL; 
    
    if (binfile) {
        binobj = binfile->o;
        info = binobj ? binobj->info : NULL; 
    }

    if (info) {
        int va = info->has_va;
        const char *arch = info->arch;
        ut16 bits = info->bits;
        ut64 baseaddr = r_bin_get_baddr(r->bin);
        r_config_set_i(r->config, ""io.Va"", (binobj->info) ? binobj->info->has_va : 0);
        r_config_set_i(r->config, ""bin.baddr"", baseaddr);
        r_config_set(r->config, ""asm.arch"", arch);
        r_config_set_i(r->config, ""asm.bits"", bits);
        r_config_set(r->config, ""anal.arch"", arch);
        
        if (info->cpu && *info->cpu) {
            r_config_set(r->config, ""anal.cpu"", info->cpu);
        } else {
            r_config_set(r->config, ""anal.cpu"", arch);
        }
        r_asm_use(r->assembler, arch);
        r_core_bin_info(r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL);
        r_core_bin_set_cur(r, binfile);
        binfile = NULL;
        return true;
    }

    return false; 
}",429,-33.447570630043295,-0.07796636510499602
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = NULL; if (binfile) binobj = binfile->o; RBinInfo * info = NULL; if (binobj) info = binobj->info; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",375,-10.320711789247063,-0.027521898104658837
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; r_bin_file_free(binfile); return true ; } return false ; }",377,-6.068806100226849,-0.016097628913068564
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = NULL;  RBinInfo * info = NULL; if (binfile) { binobj = binfile -> o;  info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } } return false ; }",379,-15.48616835364413,-0.040860602516211424
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; r_bin_file_free (binfile); return true ; } return false ; }",377,-5.754441431519852,-0.015263770375384221
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; if(binfile) { r_core_bin_set_cur ( r , binfile ) ; binfile->o = NULL; } return true ; } return false ; }",380,-15.428941818975854,-0.04060247847098909
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = NULL ; if ( binobj ) { info = r_bin_object_get_info ( binobj ); } if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; r_bin_object_free ( binobj ); return true ; } return false ; }",391,-11.967880807223427,-0.030608390811313113
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; if (binfile) { r_bin_file_free (binfile); } return true ; } return false ; }",384,-9.325958312283753,-0.024286349771572274
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:"," 
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( r_str_null ( info -> cpu ) ) { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",369,-22.314989110344094,-0.0604742252312848
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; //Fix: Add the following line to free memory allocated to binfile if (binfile) { r_bin_file_free (binfile); } r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",398,-31.7509009096331,-0.07977613293877663
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = NULL; RBinInfo * info = NULL; if (binfile) { binobj = binfile->o; if (binobj) { info = binobj->info; if (info) { int va = info->has_va; const char * arch = info->arch; ut16 bits = info->bits; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } } } return false ; }",379,-9.809451091773381,-0.025882456706526072
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; 
//Clear binfile pointer after use
binfile = NULL;
r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",382,-20.15376004369595,-0.052758534145800916
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; RBinFile* tmp = r_core_bin_cur(r); if (tmp) { r_bin_file_free(tmp); } r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",398,-16.416279140266855,-0.0412469325132333
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env(RCore *r, RBinFile *binfile) {
	RBinObject *binobj = binfile ? binfile->o : NULL;
	RBinInfo *info = binobj ? binobj->info : NULL;
	if (info) {
		int va = info->has_va;
		const char *arch = info->arch;
		ut16 bits = info->bits;
		ut64 baseaddr = r_bin_get_baddr(r->bin);
		r_config_set_i(r->config, ""io.Va"", (binobj->info) ? binobj->info->has_va : 0);
		r_config_set_i(r->config, ""bin.baddr"", baseaddr);
		r_config_set(r->config, ""asm.arch"", arch);
		r_config_set_i(r->config, ""asm.bits"", bits);
		r_config_set(r->config, ""anal.arch"", arch);
		if (info->cpu && *info->cpu) {
			r_config_set(r->config, ""anal.cpu"", info->cpu);
		} else {
			r_config_set(r->config, ""anal.cpu"", arch);
		}
		r_asm_use(r->assembler, arch);
		if (binfile) {
    			r_core_bin_info(r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL);
			r_core_bin_set_cur(r, binfile);
		}
		return true;
	}
	return false;
}",431,-20.17819338502487,-0.04681715402557974
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:"," 
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; binfile->o = NULL; free(binobj); return true ; } return false ; }",379,-12.0973873806748,-0.031919227917347755
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; r_bin_file_free(binfile);  // added line return true ; } return false ; }",381,-13.132530607675204,-0.0344685842721134
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; // Call r_bin_file_free to free the resources allocated to binfile r_bin_file_free ( binfile ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",395,-24.520226993719746,-0.062076524034733536
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = NULL ; RBinInfo * info = NULL ; if ( binfile ) { binobj = binfile -> o ; if ( binobj ) { info = binobj -> info ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } } } return false ; }",379,-6.55027653602728,-0.017283051546246122
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; 
if ( info ) { 
int va = info -> has_va ; 
const char * arch = info -> arch ; 
ut16 bits = info -> bits ; 
ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; 
r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; 
r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; 
r_config_set ( r -> config , ""asm.arch"" , arch ) ; 
r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; 
r_config_set ( r -> config , ""anal.arch"" , arch ) ; 
if ( info -> cpu && * info -> cpu ) { 
r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; 
} else { 
r_config_set ( r -> config , ""anal.cpu"" , arch ) ; 
} 

// Free info after setting configs
r_bin_info_free (info);

r_asm_use ( r -> assembler , arch ) ; 
r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; 
r_core_bin_set_cur ( r , binfile ) ; 
return true ; 
} 
return false ; 
}",431,-32.13028990851853,-0.07454823644667871
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; if (binfile) { r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; } return true ; } return false ; }",373,-7.768658549483883,-0.020827502813629713
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = NULL ; if ( binfile ) { binobj = binfile -> o ; } RBinInfo * info = NULL ; if ( binobj ) { info = binobj -> info ; } if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",379,-6.956086462356955,-0.018353790138145
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; char *cpu = NULL; if ( info -> cpu && * info -> cpu ) { cpu = strdup (info->cpu); r_config_set ( r -> config , ""anal.cpu"" , cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; free (cpu); return true ; } return false ; }",384,-12.755435678620966,-0.03321728041307543
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info->cpu && * info->cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; r_bin_file_free ( binfile ) ; return true ; } return false ; }",378,-15.443037702765938,-0.040854597097264383
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { 
    if (binfile != NULL) {
        RBinObject * binobj = binfile->o;
        if (binobj != NULL) {
            RBinInfo * info = binobj->info;
            if (info != NULL) {
                int va = info->has_va;
                const char * arch = info->arch;
                ut16 bits = info->bits;
                ut64 baseaddr = r_bin_get_baddr (r->bin);
                r_config_set_i (r->config, ""io.Va"", (binobj->info) ? binobj->info->has_va : 0);
                r_config_set_i (r->config, ""bin.baddr"", baseaddr);
                r_config_set (r->config, ""asm.arch"", arch);
                r_config_set_i (r->config, ""asm.bits"", bits);
                r_config_set (r->config, ""anal.arch"", arch);
                if (info->cpu && *info->cpu) {
                    r_config_set (r->config, ""anal.cpu"", info->cpu);
                } else {
                    r_config_set (r->config, ""anal.cpu"", arch);
                }
                r_asm_use (r->assembler, arch);
                r_core_bin_info (r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL);
                r_core_bin_set_cur (r, binfile);
                binfile = NULL;
                return true;
            }
        }
    }
    return false; 
}",422,-19.97587816729587,-0.04733620418790491
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; //free binfile object after use free(binfile); return true ; } return false ; }",378,-13.653084099078203,-0.03611927010338149
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:"," 
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = NULL; if (binfile) { binobj = binfile -> o; } if ( binobj ) { RBinInfo * info = binobj -> info ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } } return false ; }",376,-13.087673125358911,-0.034807641290848165
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; r_bin_file_free ( binfile ) ; return true ; } return false ; }",378,-5.191913001435203,-0.01373521958051641
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; if (info->cpu) { char *cpu = strdup(info->cpu); r_config_set ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; free(cpu); return true ; } return false ; }",385,-16.800081939370482,-0.04363657646589736
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = NULL; RBinInfo * info = NULL; int va; const char * arch; ut16 bits; ut64 baseaddr; if (binfile) { binobj = binfile->o; } if (binobj) { info = binobj->info; } if ( info ) { va = info->has_va; arch = info->arch; bits = info->bits; baseaddr = r_bin_get_baddr ( r->bin ); r_config_set_i ( r->config , ""io.Va"" , ( binobj->info ) ? binobj->info->has_va : 0 ); r_config_set_i ( r->config , ""bin.baddr"" , baseaddr ); r_config_set ( r->config , ""asm.arch"" , arch ); r_config_set_i ( r->config , ""asm.bits"" , bits ); r_config_set ( r->config , ""anal.arch"" , arch ); if ( info->cpu && *info->cpu ) { r_config_set ( r->config , ""anal.cpu"" , info->cpu ); } else { r_config_set ( r->config , ""anal.cpu"" , arch ); } r_asm_use ( r->assembler , arch ); r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ); r_core_bin_set_cur ( r , binfile ); return true; } return false; }",377,-20.350104432614902,-0.053979056850437405
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; r_bin_file_free(binfile); return true ; } return false ; }",377,-6.107124340897751,-0.01619926880874735
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = NULL;  if (binfile) { binobj = binfile -> o; } RBinInfo * info = NULL; if (binobj) { info = binobj -> info; } if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",380,-10.604452979708414,-0.027906455209758985
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; //free the info object free(info); return true ; } return false ; }",375,-13.502013972252602,-0.036005370592673606
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { 
    RBinObject * binobj = binfile ? binfile -> o : NULL ; 
    RBinInfo * info = binobj ? binobj -> info : NULL ; 
    if ( info ) { 
        int va = info -> has_va ; 
        const char * arch = info -> arch ; 
        ut16 bits = info -> bits ; 
        ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; 

        r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; 
        r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; 
        r_config_set ( r -> config , ""asm.arch"" , arch ) ; 
        r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; 
        r_config_set ( r -> config , ""anal.arch"" , arch ) ; 

        if ( info -> cpu && * info -> cpu ) { 
            r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; 
        } else { 
            r_config_set ( r -> config , ""anal.cpu"" , arch ) ; 
        } 

        r_asm_use ( r -> assembler , arch ) ; 
        r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; 
        if (binfile) { 
            r_core_bin_set_cur ( r , binfile ) ; 
        }
        return true ; 
    }
    return false ; 
}",448,-24.25726417434544,-0.054145678960592504
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; 

// added code to fix vulnerability
if (binobj) {
    r_bin_object_free (binobj);
    binobj = NULL;
}

r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",406,-22.333112134438434,-0.05500766535575969
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; //Free binfile if it exists if (binfile != NULL){ r_bin_file_deref ( binfile ) ; binfile = NULL ; } if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; if (binfile != NULL){ r_core_bin_set_cur ( r , binfile ) ; }else{ r_core_bin_set_cur ( r , NULL ) ; } return true ; } return false ; }",426,-42.41271395286103,-0.09956036139169257
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { 
  RBinObject * binobj = binfile ? binfile -> o : NULL ; 
  RBinInfo * info = binobj ? binobj -> info : NULL ; 
  if ( info ) { 
    int va = info -> has_va ; 
    const char * arch = info ? info -> arch : NULL; 
    ut16 bits = info ? info -> bits : 0; 
    ut64 baseaddr = binfile ? r_bin_get_baddr (r->bin) : 0;  
    r_config_set_i ( r -> config , ""io.Va"" , ( binobj && binobj -> info ) ? binobj -> info -> has_va : 0 ) ; 
    r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; 
    r_config_set ( r -> config , ""asm.arch"" , arch ) ; 
    r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; 
    r_config_set ( r -> config , ""anal.arch"" , arch ) ; 
    if ( info -> cpu && * info -> cpu ) { 
      r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; 
    } else { 
      r_config_set ( r -> config , ""anal.cpu"" , arch ) ; 
    } 
    r_asm_use ( r -> assembler , arch ) ; 
    r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; 
    r_core_bin_set_cur ( r , binfile ) ; 
    return true ; 
  } 
  return false ; 
}",453,-32.49524736465419,-0.07173343789106885
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; r_bin_file_free ( binfile ) ; return true ; } return false ; }",378,-5.214441685787603,-0.013794819274570377
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; 
if (info) { 
int va = info->has_va; 
const char * arch = info->arch; 
ut16 bits = info->bits; 
ut64 baseaddr = r_bin_get_baddr (r->bin) ;

if (binobj && binobj->info) {
	r_config_set_i (r->config, ""io.Va"" , binobj->info->has_va);
} else {
	r_config_set_i (r->config, ""io.Va"" , 0);
}

r_config_set_i (r->config, ""bin.baddr"", baseaddr); 
r_config_set (r->config, ""asm.arch"", arch); 
r_config_set_i (r->config, ""asm.bits"", bits); 
r_config_set (r->config, ""anal.arch"", arch); 

if (info->cpu && * info->cpu) { 
	r_config_set (r->config, ""anal.cpu"", info->cpu); 
} else { 
	r_config_set (r->config, ""anal.cpu"", arch); 
} 
r_asm_use (r->assembler, arch); 
r_core_bin_info (r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL); 
r_core_bin_set_cur (r, binfile); 
return true; 
} 
return false;
}",428,-47.4106613924774,-0.11077257334690982
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; /*Free binobj if applicable*/ if (binobj != NULL) { free(binobj); binobj = NULL; } /*Free binfile if applicable*/ if (binfile != NULL) { free(binfile); binfile = NULL; } r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",418,-29.476839082161387,-0.07051875378507509
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = NULL; RBinInfo * info = NULL; if ( binfile ) { binobj = binfile -> o ; if ( binobj ) { info = binobj -> info ; } } if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu ) { if ( * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",383,-16.930659444925116,-0.04420537714079665
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; // Added code to free binobj to fix the vulnerability. if (binobj) { r_bin_object_free(binobj); } r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",396,-27.19580115986426,-0.06867626555521278
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { 
    RBinObject * binobj = NULL; 
    RBinInfo * info = NULL; 
    if (binfile) { 
        binobj = binfile-> o; 
    } 
    if (binobj) { 
        info = binobj-> info; 
    } 
    if (info) { 
        int va = info->has_va; 
        const char * arch = info-> arch; 
        ut16 bits = info-> bits; 
        ut64 baseaddr = r_bin_get_baddr ( r-> bin ) ; 
        r_config_set_i ( r-> config , ""io.Va"" , ( binobj-> info ) ? binobj-> info-> has_va : 0 ) ; 
        r_config_set_i ( r-> config , ""bin.baddr"" , baseaddr ) ; 
        r_config_set ( r-> config , ""asm.arch"" , arch ) ; 
        r_config_set_i ( r-> config , ""asm.bits"" , bits ) ; 
        r_config_set ( r-> config , ""anal.arch"" , arch ) ; 
        if ( info-> cpu && * info-> cpu ) { 
            r_config_set ( r-> config , ""anal.cpu"" , info-> cpu ) ; 
        } else { 
            r_config_set ( r-> config , ""anal.cpu"" , arch ) ; 
        } 
        r_asm_use ( r-> assembler , arch ) ; 
        r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; 
        r_core_bin_set_cur ( r , binfile ) ; 
        binobj = NULL; 
        info = NULL; 
        return true ; 
    } 
    return false ; 
}",483,-25.93713698283878,-0.05370007656902439
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch ; ut16 bits ; ut64 baseaddr ; r_bin_object_free ( binobj ) ; arch = info -> arch ; bits = info -> bits ; baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",385,-13.29808155706403,-0.03454047157678969
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; if ( r-> bin ) { r_bin_free ( r-> bin ) ; r-> bin = NULL; } r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",391,-21.00373341107704,-0.053717988263624145
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { 
RBinObject * binobj = binfile ? binfile -> o : NULL ; 
RBinInfo * info = binobj ? binobj -> info : NULL ;

if ( info ) { 
int va = info -> has_va ; 
const char * arch = info -> arch ; 
ut16 bits = info -> bits ; 
ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; 

r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; 
r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; 
r_config_set ( r -> config , ""asm.arch"" , arch ) ; 
r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; 
r_config_set ( r -> config , ""anal.arch"" , arch ) ; 

// Addition to fix CWE-416 
if (info) {
    free(info);
}

if ( info -> cpu && * info -> cpu ) { 
r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; 
} else {
r_config_set ( r -> config , ""anal.cpu"" , arch ) ; 
}

r_asm_use ( r -> assembler , arch ) ; 
r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; 
r_core_bin_set_cur ( r , binfile ) ; 
return true ; 
} 
return false ; 
}",441,-36.7357519137244,-0.08330102474767438
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; 

r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; 

//free the memory 
if (binfile) { free(binfile); binfile = NULL; }

r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }",397,-24.487726799785086,-0.06168193148560475
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; r_bin_file_free(binfile) ; return true ; } return false ; }",378,-9.958323260072603,-0.026344770529292603
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; 
if (binfile) {
  r_core_bin_set_cur ( r , binfile ) ;
}
return true ; 
} 
return false ; }",383,-14.660116920668543,-0.03827706767798575
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; return true ; } return false ; }
Fixed code:","
R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { RBinObject * binobj = binfile ? binfile -> o : NULL ; RBinInfo * info = binobj ? binobj -> info : NULL ; if ( info ) { int va = info -> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config , ""io.Va"" , ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config , ""bin.baddr"" , baseaddr ) ; r_config_set ( r -> config , ""asm.arch"" , arch ) ; r_config_set_i ( r -> config , ""asm.bits"" , bits ) ; r_config_set ( r -> config , ""anal.arch"" , arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; } else { r_config_set ( r -> config , ""anal.cpu"" , arch ) ; } r_asm_use ( r -> assembler , arch ) ; r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; r_core_bin_set_cur ( r , binfile ) ; r_bin_file_free ( binfile ) ; return true ; } return false ; }",378,-5.229444970492754,-0.013834510503949083
