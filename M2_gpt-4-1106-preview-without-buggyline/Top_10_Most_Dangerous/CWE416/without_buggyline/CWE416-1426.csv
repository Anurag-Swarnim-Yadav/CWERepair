Original code,Plausible Program,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; if ( ! skb ) { return NETDEV_TX_OK ; } ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } skb_free_from_pool ( skb ) ; return ( netdev_tx_t ) ret ; }",209,-20.63233287345389,-0.09871929604523393
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if ( skb ) { priv = netdev_priv ( ndev ) ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; } return 0 ; 
}",194,-16.5420080024453,-0.08526808248683145
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if ( ! skb || ! ndev ) { return NETDEV_TX_OK ; } priv = netdev_priv ( ndev ) ; if ( skb -> queue_mapping >= ndev -> ae_handle -> q_num ) { return NETDEV_TX_OK ; } ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } kfree ( skb ) ; return ( netdev_tx_t ) ret ; }",218,-9.604640650449099,-0.04405798463508761
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; priv = netdev_priv ( ndev ) ; if ( priv ) { ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; } else { return NETDEV_TX_BUSY; } }",200,-8.081979831622697,-0.04040989915811348
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if (!skb || !skb->queue_mapping || !ndev || !ndev->ae_handle || !ndev->ae_handle->q_num) return NETDEV_TX_BUSY; priv = netdev_priv ( ndev ) ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; 
skb_free_frag(skb);
return NETDEV_TX_OK;
}",252,-26.738971450785154,-0.10610702956660775
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if (skb == NULL) { return NETDEV_TX_OK; } priv = netdev_priv ( ndev ) ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } kfree_skb(skb); return ( netdev_tx_t ) ret ; }",208,-10.079931320650438,-0.04846120827235788
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; if(skb != NULL) { assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; } }",189,-9.253152639739206,-0.04895847957533971
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if ( ! skb ) return NETDEV_TX_OK ; priv = netdev_priv ( ndev ) ; if ( skb -> queue_mapping >= ndev -> ae_handle -> q_num ) { kfree_skb ( skb ) ; return NETDEV_TX_OK ; } ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } else kfree_skb ( skb ) ; return ( netdev_tx_t ) ret ; }",226,-8.780307673473109,-0.03885091890917305
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; if (!skb) { return NETDEV_TX_OK; } assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } kfree(skb); return ( netdev_tx_t ) ret ; }",201,-8.415059768667597,-0.04186596899834625
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; kfree ( skb ) ; } return ( netdev_tx_t ) ret ; }",187,-5.166321128951901,-0.027627385716320323
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; if (!skb) return 0; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }",188,-11.444721361622848,-0.06087617745544068
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = NULL ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; priv = netdev_priv ( ndev ) ; 

if(priv != NULL){
	ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; 
	
	if ( ret == NETDEV_TX_OK ) {
		netif_trans_update ( ndev ) ; 
		ndev -> stats . tx_bytes += skb -> len ; 
		ndev -> stats . tx_packets ++ ; 
	} 
	return ( netdev_tx_t ) ret ; 
}

return NETDEV_TX_BUSY;
}",232,-27.01076015625101,-0.11642569032866815
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; // add these two lines if ( ndev == NULL ) { return NETDEV_TX_OK ; } priv = netdev_priv ( ndev ) ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }

The code has been fixed by adding an if statement to check if ndev is NULL before using it. This ensures that ndev is not used after it has been freed, which would lead to a use-after-free vulnerability.",253,-47.095825850911055,-0.18614950929213855
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; skb_free_safe(skb); } return ( netdev_tx_t ) ret ; }",190,-9.521633605622801,-0.05011386108222527
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; 
if(skb != NULL) { ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; } 
return NETDEV_TX_OK; }",201,-15.222354524517428,-0.07573310708715138
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; kfree ( skb ) ; } return ( netdev_tx_t ) ret ; }",187,-5.166321128951901,-0.027627385716320323
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; if (skb != NULL) { ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } } else { ret = NETDEV_TX_BUSY; } return ( netdev_tx_t ) ret ; }",202,-8.40458150118655,-0.0416068391147849
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; priv = netdev_priv ( ndev ) ; if (!priv){ return NETDEV_TX_BUSY; } assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }",196,-10.649637480994553,-0.054334885107115066
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if ( skb == NULL ) return NETDEV_TX_OK ; priv = netdev_priv ( ndev ) ; if ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) { ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } } else { kfree_skb ( skb ) ; } return ( netdev_tx_t ) ret ; }",211,-11.542871201324408,-0.05470555071717729
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; kfree(skb); } return ( netdev_tx_t ) ret ; }",186,-4.8151822476011,-0.025888076600005912
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; priv = netdev_priv ( ndev ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } skb_free ( skb ) ; return ( netdev_tx_t ) ret ; }",191,-9.715910336447696,-0.05086864050496176
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; kfree_skb(skb); } else { kfree_skb(skb); } return ( netdev_tx_t ) ret ; }",201,-8.0697156774116,-0.040147839191102486
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if (!skb || !ndev) { return NETDEV_TX_OK; } priv = netdev_priv ( ndev ) ; if ( skb -> queue_mapping >= ndev -> ae_handle -> q_num ) { return NETDEV_TX_OK; } ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }",210,-10.547100045042503,-0.05022428592877383
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if (!skb) { return NETDEV_TX_OK; } priv = netdev_priv ( ndev ) ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } else if (ret == NETDEV_TX_BUSY) { return NETDEV_TX_BUSY; } else { kfree_skb(skb); } return ( netdev_tx_t ) ret ; }",233,-18.306236712906745,-0.0785675395403723
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if ( ! skb || ! ndev ) { return NETDEV_TX_OK ; } priv = netdev_priv ( ndev ) ; if ( skb -> queue_mapping >= ndev -> ae_handle -> q_num ) { kfree_skb ( skb ) ; return NETDEV_TX_OK ; } ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } else { kfree_skb ( skb ) ; } return ( netdev_tx_t ) ret ; }",234,-8.275393745101809,-0.03536493053462311
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit(struct sk_buff *skb, struct net_device *ndev) { 
    struct hns_nic_priv *priv = netdev_priv(ndev);
    int ret;
    int queue_mapping = skb->queue_mapping;
    if (queue_mapping < ndev->ae_handle->q_num) {
        ret = hns_nic_net_xmit_hw(ndev, skb, &tx_ring_data(priv, queue_mapping));
        if (ret == NETDEV_TX_OK) {
            netif_trans_update(ndev);
            ndev->stats.tx_bytes += skb->len;
            ndev->stats.tx_packets++;
        }
    }
    else {
        ret = NETDEV_TX_BUSY;
    }
    return (netdev_tx_t)ret;
}",228,-23.580014235193,-0.10342111506663597
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if (!ndev) { dev_kfree_skb_any(skb); return NETDEV_TX_OK; } priv = netdev_priv ( ndev ) ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } else { dev_kfree_skb_any(skb); } return ( netdev_tx_t ) ret ; }",226,-8.310927472156095,-0.036774015363522546
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret = 0 ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; if ( ndev ) { priv = netdev_priv ( ndev ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } } return ( netdev_tx_t ) ret ; }
The code has been updated to include a check to ensure that the net_device pointer is not null before it is used. This adds an extra safety check to make sure that the pointer is properly initialized and valid before it is used, which reduces the risk of a use-after-free vulnerability.",252,-61.85272356121848,-0.24544731571912096
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; if (skb) { assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } } return ( netdev_tx_t ) ret ; }",187,-7.296001509419402,-0.03901605085251017
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; if ( skb ) { ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; } else { return NETDEV_TX_OK ; } }",198,-7.789851307438603,-0.039342683370902035
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; if (hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping )) != NETDEV_TX_OK) { kfree_skb(skb); return NETDEV_TX_OK; } netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; return NETDEV_TX_OK; }",189,-17.00304019832379,-0.08996317565250683
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; if (skb != NULL) { ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } } else { kfree_skb(skb); } return ( netdev_tx_t ) ret ; }",201,-11.537985294387353,-0.05740291191237489
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; 
if (!ndev)
    return NETDEV_TX_BUSY;

priv = netdev_priv ( ndev ) ; 
assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; 
ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; 
if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } 
return ( netdev_tx_t ) ret ; 
}",212,-17.921909184966932,-0.08453730747625911
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if ( ! skb || ! ndev ) { return NETDEV_TX_OK ; } priv = netdev_priv ( ndev ) ; if ( ! priv ) { kfree_skb ( skb ) ; return NETDEV_TX_OK ; } assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } else { kfree_skb ( skb ) ; } return ( netdev_tx_t ) ret ; }",240,-11.1971156647049,-0.04665464860293708
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if (!ndev || !ndev->ae_handle) { return NETDEV_TX_OK; } assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; priv = netdev_priv ( ndev ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }",205,-15.224163845369112,-0.07426421387984933
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; kfree ( skb ) ; } return ( netdev_tx_t ) ret ; }",187,-5.195567363861947,-0.027783782694448915
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","

static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; kfree_skb(skb);  //add this line to fix the vulnerability } return ( netdev_tx_t ) ret ; }",199,-18.290391013666103,-0.09191151263148795
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; skb_free(skb); if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }",188,-10.164396530655651,-0.054065938992849207
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; if (skb->queue_mapping >= 0 && skb->queue_mapping < ndev->ae_handle->q_num) { ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; } else { // Dropping packet, since queue mapping is out of range kfree_skb(skb); return NETDEV_TX_OK; } }",222,-34.0170581909538,-0.15322999185114322
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; priv = netdev_priv ( ndev ) ; if (! priv ) { return NETDEV_TX_OK ; } assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }",196,-9.359825160326114,-0.04775421000166385
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = NULL ; int ret ; 
if ( ndev ) {
	priv = netdev_priv ( ndev ) ; 
	assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; 
	ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; 
	if ( ret == NETDEV_TX_OK ) { 
		netif_trans_update ( ndev ) ; 
		ndev -> stats . tx_bytes += skb -> len ; 
		ndev -> stats . tx_packets ++ ; 
	} 
	return ( netdev_tx_t ) ret ; 
}
return NETDEV_TX_OK;
}",234,-18.53174317786661,-0.07919548366609662
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; kfree_skb(skb); } return ( netdev_tx_t ) ret ; }",189,-4.929151792804549,-0.026080168215897086
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; if ( ! skb ) { return NETDEV_TX_OK ; } priv = netdev_priv ( ndev ) ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } skb_free_sec ( skb ) ; return ( netdev_tx_t ) ret ; }",209,-14.367179225011105,-0.06874248433019667
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; priv = netdev_priv ( ndev ) ; if(!priv) return NETDEV_TX_BUSY; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }",196,-8.26512240574289,-0.04216899186603515
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; kfree(skb); } return ( netdev_tx_t ) ret ; }",186,-4.81793455150525,-0.025902873932823922
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; dev_kfree_skb(skb); } return ( netdev_tx_t ) ret ; }",191,-7.0121024025709495,-0.03671257802393167
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv ; int ret ; 

//Add lock to prevent use after free
spin_lock(&lock); 

priv = netdev_priv ( ndev ) ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; 

//Release lock after use
spin_unlock(&lock);

if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }",221,-30.927626427265317,-0.13994401098310097
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; kfree_skb ( skb ) ; } return ( netdev_tx_t ) ret ; }",190,-5.415360602315249,-0.028501897906922362
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:"," 
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; kfree_skb ( skb ) ; // Free the skb after use to prevent Use After Free vulnerability } return ( netdev_tx_t ) ret ; }",204,-18.9931009200298,-0.09310343588249902
"The Original Code is vulnerable to CWE-416: Use After Free. Fix the vulnerability.
Original Code:
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; }
Fixed code:","
static netdev_tx_t hns_nic_net_xmit ( struct sk_buff * skb , struct net_device * ndev ) { struct hns_nic_priv * priv = netdev_priv ( ndev ) ; int ret ; assert ( skb -> queue_mapping < ndev -> ae_handle -> q_num ) ; if (skb != NULL) { ret = hns_nic_net_xmit_hw ( ndev , skb , & tx_ring_data ( priv , skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; } return ( netdev_tx_t ) ret ; } else { return NETDEV_TX_OK; } }",200,-7.071026141098048,-0.03535513070549024
