Original code,Plausible Program,Number of Bugs Present,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; 
<StartBug>char canonicalizedDir [PATH_MAX+1] = { 0 }; 

realpath(dir, canonicalizedDir);
if (canonicalizedDir[0] != '\0') { 
  strcpy ( ( char * ) name , canonicalizedDir ) ; 
  strcat ( ( char * ) name , ""/"" ) ; 
} <EndBug>

if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } 
<StartBug> while ( * fname == sep ) fname ++ ; <EndBug> 
<StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,831,-57.31885271497309,-0.06897575537301215
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; if ( dir ){
        char *real_dir = realpath(dir, NULL);
        if(real_dir) {
            x += strlen ( ( char * ) real_dir ) ;
            if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { 
                fprintf ( stderr , ""out of memory!\\n"" ) ; 
                return NULL ; 
            } 
            * name = '\\0' ; 
            strcpy ( ( char * ) name , ( char * ) real_dir ) ;
            free(real_dir);
            strcat ( ( char * ) name , ""/"" ) ; 
        }
        else{
            fprintf ( stderr , ""could not get realpath!\\n"" ) ; 
            return NULL; 
        }
    }
    else {
        if ( ! ( name = ( unsigned char * ) malloc ( x + 1 ) ) ) { 
            fprintf ( stderr , ""out of memory!\\n"" ) ; 
            return NULL ; 
        } 
        * name = '\\0' ; 
    }
    <EndBug>
    <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> 
    <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> 
    fe = & fname [ strlen ( ( char * ) fname ) ] ; 
    if ( utf8 ) { 
        do { 
            <StartBug> if ( fname >= fe ) { <EndBug> 
                free ( name ) ; 
                return NULL ; 
            } 
            if ( ( c = * fname ++ ) < 0x80 ) x = c ; 
            else { 
                if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { 
                    <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> 
                    x |= * fname ++ & 0x3F ; 
                } 
                else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { 
                    x = ( c & 0xF ) << 12 ; 
                    x |= ( * fname ++ & 0x3F ) << 6 ; 
                    x |= * fname ++ & 0x3F ; 
                } 
                else x = '?' ; 
            } 
            if ( x == sep ) x = '/' ; 
            else if ( x == slash ) x = '\\\\' ; 
            else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; 
            if ( x < 0x80 ) { 
                * p ++ = ( unsigned char ) x ; 
            } 
            else if ( x < 0x800 ) { 
                * p ++ = 0xC0 | ( x >> 6 ) ; 
                * p ++ = 0x80 | ( x & 0x3F ) ; 
            } 
            else { 
                * p ++ = 0xE0 | ( x >> 12 ) ; 
                * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; 
                * p ++ = 0x80 | ( x & 0x3F ) ; 
            } 
            <StartBug> } while ( x ) ; <EndBug> 
    } 
    else { 
        do { 
            c = * fname ++ ; 
            if ( c == sep ) c = '/' ; 
            else if ( c == slash ) c = '\\\\' ; 
            else if ( lower ) c = ( unsigned char ) to",8,1000,-62.77867238896534,-0.06277867238896534
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; if ( dir ) x += strlen ( ( char * ) dir ) + 1; <EndBug> if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> p = & name [ strlen ( ( char * ) dir ) + 1] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,719,-14.690132043912298,-0.020431338030476077
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; if ( utf8 ) x *= 3 ; if ( dir ) { x += strlen ( ( char * ) dir ) ; x += 2; } <StartBug> if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <EndBug> fprintf ( stderr , ""out of memory!\\n"" ) ; return NULL ; } <StartBug> memset(name, 0, x + 2); <EndBug> if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,744,-23.711366625093497,-0.03187011643157728
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug>
static char * create_output_name ( unsigned char * fname , unsigned char * dir , int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ;
if ( utf8 ) x *= 3 ; 
if ( dir ) x += strlen ( ( char * ) dir ) + 1;
if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { 
fprintf ( stderr , ""out of memory!\\n"" ) ; 
return NULL ;
}
* name = '\\0' ;
if ( dir ) { 
strncpy ( ( char * ) name , ( char * ) dir , x + 1 );
strcat ( ( char * ) name , ""/"" ) ; 
} 
p = & name [ strlen ( ( char * ) name ) ] ; 
fe = & fname [ strlen ( ( char * ) fname ) ] ;
if ( utf8 ) { 
do { 
if ( fname >= fe ) { 
free ( name ) ; 
return NULL ; 
}
if ( ( c = * fname ++ ) < 0x80 ) x = c ; 
else { 
if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { 
x = ( c & 0x1F ) << 6 ; 
x |= * fname ++ & 0x3F ; 
} 
else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { 
x = ( c & 0xF ) << 12 ; 
x |= ( * fname ++ & 0x3F ) << 6 ; 
x |= * fname ++ & 0x3F ; 
} 
else x = '?' ; 
}
if ( x == sep ) x = '/' ; 
else if ( x == slash ) x = '\\\\' ; 
else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; 
if ( x < 0x80 ) { 
* p ++ = ( unsigned char ) x ; 
} 
else if ( x < 0x800 ) { 
* p ++ = 0xC0 | ( x >> 6 ) ; 
* p ++ = 0x80 | ( x & 0x3F ) ; 
} 
else { 
* p ++ = 0xE0 | ( x >> 12 ) ; 
* p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; 
* p ++ = 0x80 | ( x & 0x3F ) ; 
} 
} while ( x ) ; 
} 
else { 
do { 
c = * fname ++ ;
if ( c == sep ) c = '/' ; 
else if ( c == slash ) c = '\\\\' ; 
else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; 
} while ( ( * p ++ = c ) ) ; 
} 
return ( char * ) name ; 
}
<EndBug>",8,782,-40.58208371918668,-0.05189524772274511
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) + 2; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) - 2] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe || strlen(name) > x-3) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,749,-31.84154469252386,-0.04251207569095308
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug><StartFix> fprintf ( stderr , ""out of memory!\\n"" ) ; free(name); <EndFix><EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { <StartBug><StartFix> // Ensure the directory is valid, otherwise return NULL if (strstr(dir, "".."")) { fprintf(stderr, ""Invalid directory!\n""); free(name); return NULL; } <EndFix><EndBug> strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug><StartFix> // Ensure the file name does not contain any "".."" paths if (strstr(fname, "".."")) { fprintf(stderr, ""Invalid file name!\n""); free(name); return NULL; } if ( fname >= fe ) { <EndBug><EndFix> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,856,-59.323872883299146,-0.06930358981693825
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; if ( strncmp(fname, "".."", 3) == 0 || strncmp(fname, ""."", 2) == 0 ) return NULL; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,769,-20.913095452661846,-0.027195182643253376
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) + 1; if ( ! ( name = ( unsigned char * ) malloc ( x + 1 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> strncat(name, fname, x); <EndBug> p = & name [ strlen ( ( char * ) name ) ] ; fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,748,-19.460190481276296,-0.02601629743486136
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug>
static char * create_output_name ( unsigned char * fname , unsigned char * dir , int lower , int isunix , int utf8 ) {
    unsigned char * p , * name , c , * fe , sep , slash ;
    unsigned int x ;
    sep = ( isunix ) ? '/' : '\\\\' ;
    slash = ( isunix ) ? '\\\\' : '/' ;
    x = strlen ( ( char * ) fname ) ;
    if ( utf8 ) x *= 3 ;
    if ( dir ) x += strlen ( ( char * ) dir ) ;
    if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) {
        fprintf ( stderr , ""out of memory!\\n"" ) ;
        return NULL ;
    }
    * name = '\\0' ;
    if ( dir ) {
		// Ensure the directory path does not begin with the separator
		if (dir[strlen((char *) dir) - 1] != sep) {
			strcpy ( ( char * ) name , ( char * ) dir ) ;
			strcat ( ( char * ) name , ""/"" ) ;
		}
    }

    // Skip any leading separators
	while ( * fname == sep ) fname ++ ;

    // Set the pointer to the end of the name
    p = & name [ strlen ( ( char * ) name ) ] ;
    fe = &fname [ strlen ( ( char * ) fname ) ] ;
    if ( utf8 ) {
        do {
            // Ensure the file name does not go past the end
            if ( fname >= fe ) {
                free ( name ) ;
                return NULL ;
            }
            if ( ( c = * fname ++ ) < 0x80 ) x = c ;
            else {
                if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) {
                    x = ( c & 0x1F ) << 6 ;
                    x |= * fname ++ & 0x3F ;
                } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) {
                    x = ( c & 0xF ) << 12 ;
                    x |= ( * fname ++ & 0x3F ) << 6 ;
                    x |= * fname ++ & 0x3F ;
                } else x = '?' ;
            }
            if ( x == sep ) x = '/' ;
            else if ( x == slash ) x = '\\\\' ;
            else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ;
            if ( x < 0x80 ) {
                * p ++ = ( unsigned char ) x ;
            } else if ( x < 0x800 ) {
                * p ++ = 0xC0 | ( x >> 6 ) ;
                * p ++ = 0x80 | ( x & 0x3F ) ;
            } else {
                * p ++ = 0xE0 | ( x >> 12 ) ;
                * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ;
                * p ++ = 0x80 | ( x & 0x3F ) ;
            }
        } while ( x ) ;
    } else {
        do {
            c = * fname ++ ;
            if ( c == sep ) c = '/' ;
            else if ( c == slash ) c = '\\\\' ;
            else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ;
        } while ( ( * p ++ = c ) ) ;
    }
    return ( char * ) name ;
}
<EndBug>",8,877,-79.05552814094592,-0.09014313357006377
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> // Strip off any leading directory traversal characters while ( * fname == sep ) fname ++ ; // Strip any ../ from the input fname to avoid directory traversal while (strstr(fname, ""../"")) { int i; for (i = 0; i < 3; i++) fname++; } <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,791,-57.28949096473062,-0.07242666367222582
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
static char * create_output_name ( unsigned char * fname , unsigned char * dir , int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; if ( utf8 ) x *= 3 ; if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr , ""out of memory!\\n"" ) ; return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> char * canonicalPath = realpath(fname, NULL); 
if (canonicalPath == NULL) {
    free(name);
    return NULL;
}

strncat(name, canonicalPath, x);
free(canonicalPath); <EndBug> p = & name [ strlen ( ( char * ) name ) ] ; fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0x1F ) << 6 ; x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } } while ( x ) ; } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,724,-32.04068999272534,-0.044255096675035
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) { x += strlen ( ( char * ) dir ) ; // added <StartBug> x += 1; // added <EndBug> } // added <StartBug> if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <EndBug> fprintf ( stderr , ""out of memory!\\n"" ) ; return NULL ; } * name = '\\0' ; if ( dir ) { <StartBug> strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; <EndBug> } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> if (x == '/') { // added break; // added } // added <EndBug> } while ( x ) ; } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,779,-32.15391396366402,-0.04127588442062133
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { <StartBug> strcpy ( ( char * ) name , ( char * ) dir ) ; <EndBug> <StartBug> strcat ( ( char * ) name , (char*) realpath((char* ) dir, NULL)); <EndBug> } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,760,-27.940548879348484,-0.0367638801044059
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) + 1; //Add one for the directory separator if ( ! ( name = ( unsigned char * ) malloc ( x + 1) ) ) { //Add one for the null terminator <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> //Check that the directory separator is not present at the start of the filename //If it is, then shift the filename by one character while ( * fname == sep ) fname ++; //Ensure that the filename does not contain any directory separators by looping through it //Once a directory separator is found, replace it with a regular slash for (int i = 0; i < strlen((char *)fname); i++) { if (fname[i] == sep || fname[i] == slash) { fname[i] = '/'; } } <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,863,-87.23416607177408,-0.10108246358258874
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
static char * create_output_name ( unsigned char * fname , unsigned char * dir , 
int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\' ; slash = ( isunix ) ? '\\' : '/' ; x = strlen ( ( char * ) fname ) ; 
if ( utf8 ) 
x *= 3 ; 
if ( dir )
x += strlen ( ( char * ) dir ) ; 
if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { 
fprintf ( stderr , ""out of memory!\n"" ) ; 
return NULL ; 
} 
* name = '\0' ; 
if ( dir ) { 
strcpy ( ( char * ) name , ( char * ) dir ) ; 
strcat ( ( char * ) name , ""/"" ) ; 
} 
while ( * fname == sep ) 
fname ++ ; 
p = & name [ strlen ( ( char * ) name ) ] ; 
fe = & fname [ strlen ( ( char * ) fname ) ] ; 
if ( utf8 ) { 
do { 
if ( fname >= fe ) { 
free ( name ) ; 
return NULL ; 
} 
if ( ( c = * fname ++ ) < 0x80 ) 
x = c ; 
else { 
if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { 
x = ( c & 0x1F ) << 6 ; 
x |= * fname ++ & 0x3F ; 
} 
else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { 
x = ( c & 0xF ) << 12 ; 
x |= ( * fname ++ & 0x3F ) << 6 ; 
x |= * fname ++ & 0x3F ; 
} 
else 
x = '?' ; 
} 
if ( x == sep ) 
x = '/' ; 
else if ( x == slash ) 
x = '\\' ; 
else if ( lower ) 
x = ( unsigned int ) tolower ( ( int ) x ) ; 
if ( x < 0x80 ) { 
* p ++ = ( unsigned char ) x ; 
} 
else if ( x < 0x800 ) { 
* p ++ = 0xC0 | ( x >> 6 ) ; 
* p ++ = 0x80 | ( x & 0x3F ) ; 
} 
else { 
* p ++ = 0xE0 | ( x >> 12 ) ; 
* p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; 
* p ++ = 0x80 | ( x & 0x3F ) ; 
} 
} while ( x && x != '\0' ) ; 
} 
else { 
do { 
c = * fname ++ ; 
if ( c == sep ) 
c = '/' ; 
else if ( c == slash ) 
c = '\\' ; 
else if ( lower ) 
c = ( unsigned char ) tolower ( ( int ) c ) ; 
} while ( ( * p ++ = c ) && c != '\0' ) ; 
} 
return ( char * ) name ; 
}",8,828,-37.53181426268291,-0.045328278095027666
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> while ( fname [ 0 ] == sep ) { fname ++ ; } <StartBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; <EndBug> if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,739,-18.91447895797438,-0.02559469412445789
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname_orig , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname_orig ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> 
if ( dir ) x += strlen ( ( char * ) dir ) ; 
if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } 
* name = '\\0' ; 
if ( dir ) { 
    unsigned char fname[x+2];
    strncpy(fname, fname_orig, x+2);
    strcpy ( ( char * ) name , ( char * ) dir ) ; 
    strcat ( ( char * ) name , ""/"" ) ; 
} else {
    strcpy((char*)name, (char*)fname_orig);
} 
<StartBug> 
// Remove leading path separator
if (name[0] == sep) {
    memmove(name, name + 1, x);
}

// Remove relative paths
if (strstr((char*)name, "".."") != NULL) {
    char* result = realpath((char*)name, NULL);
    if (result == NULL) {
        free(name);
        return NULL;
    }
    strcpy((char*)name, result);
    free(result);
}

p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> 
fe = & name [ strlen ( ( char * ) name ) ] ; 
if ( utf8 ) { 
    do { <StartBug> 
    if ( name >= fe ) { <EndBug> 
        free ( name ) ; 
        return NULL ; 
    } 
    if ( ( c = * name ++ ) < 0x80 ) x = c ; else { 
        if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> 
        x = ( c & 0x1F ) << 6 ; <EndBug> 
        x |= * name ++ & 0x3F ; 
    } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { 
        x = ( c & 0xF ) << 12 ; 
        x |= ( * name ++ & 0x3F ) << 6 ; 
        x |= * name ++ & 0x3F ; 
    } else x = '?' ; 
    } 
    if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; 
    if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } 
    else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } 
    else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } 
    <StartBug> } while ( x ) ; <EndBug> 
    } 
    else { 
        do { c = * name ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; 
    } 
    return ( char * ) name ; 
}",8,978,-113.08011825515928,-0.11562384279668637
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug>
static char * create_output_name ( unsigned char * fname , unsigned char * dir ,
int lower , int isunix , int utf8 ) {
unsigned char * p , * name , c , * fe , sep , slash ;
unsigned int x ;
sep = ( isunix ) ? '/' : '\\\\' ;
slash = ( isunix ) ? '\\\\' : '/' ;
x = strlen ( ( char * ) fname ) ;
if ( utf8 ) x *= 3 ;
if ( dir ) x += strlen ( ( char * ) dir ) + 1;
if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) {
fprintf ( stderr , ""out of memory!\\n"" ) ;
return NULL ;
}
* name = '\\0' ;
if ( dir ) {
strcpy ( ( char * ) name , ( char * ) dir ) ;
strcat ( ( char * ) name , ""/"" ) ;
}
p = & name [ strlen ( ( char * ) name ) ] ;
fe = & fname [ strlen ( ( char * ) fname ) ] ;
if ( utf8 ) {
do {
if ( fname >= fe ) {
free ( name ) ;
return NULL ;
}
if ( ( c = * fname ++ ) < 0x80 ) x = c ;
else {
if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) {
x = ( c & 0x1F ) << 6 ;
x |= * fname ++ & 0x3F ;
} else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) {
x = ( c & 0xF ) << 12 ;
x |= ( * fname ++ & 0x3F ) << 6 ;
x |= * fname ++ & 0x3F ;
} else x = '?' ;
}
if ( x == sep ) x = '/' ;
else if ( x == slash ) x = '\\\\' ;
else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ;
if ( x < 0x80 ) {
* p ++ = ( unsigned char ) x ;
} else if ( x < 0x800 ) {
* p ++ = 0xC0 | ( x >> 6 ) ;
* p ++ = 0x80 | ( x & 0x3F ) ;
} else {
* p ++ = 0xE0 | ( x >> 12 ) ;
* p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ;
* p ++ = 0x80 | ( x & 0x3F ) ;
}
} while ( x && fname < fe ) ;
} else {
do {
c = * fname ++ ;
if ( c == sep ) c = '/' ;
else if ( c == slash ) c = '\\\\' ;
else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ;
} while ( ( * p ++ = c ) && fname < fe ) ;
}
return ( char * ) name ;
}
<EndBug>",8,743,-19.45997479143006,-0.026191083164778008
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) { x += strlen ( ( char * ) dir ) ; <StartBug> if ( dir[strlen((char *)dir)-1] != sep ) x += 1; <EndBug> } if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; <StartBug> if ( dir[strlen((char *)dir)-1] != sep ) strcat ( ( char * ) name , ""/"" ) ; <EndBug> } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,789,-20.24243013418988,-0.025655804986298963
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { <StartBug> if ( * dir == '/') { <EndBug> strcpy ( ( char * ) name , ( char * ) dir ) ; } else { <StartBug> char absolute_path[strlen(dir)+2]; absolute_path[0] = '/'; strcpy(absolute_path+1, dir); strcpy((char *)name, absolute_path); <EndBug> } <StartBug> strcat ( ( char * ) name , ""/"" ) ; <EndBug> } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,816,-33.33464801371733,-0.04085128433053594
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; <StartBug> x += 2; <EndBug> if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; }  if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { <StartBug> *p++ = '.'; *p++ = '.'; <EndBug> do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,750,-35.175794094882086,-0.04690105879317612
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; <StartBug> if ( dir ) { //added check for dir being NULL if ( ( dir [ 0 ] != '.' ) && ( dir [ 0 ] != '/' ) ) { fprintf ( stderr , ""Invalid directory!\n"" ) ; return NULL ; } } <EndBug> if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,795,-47.21854336056681,-0.05939439416423498
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> // Added line to ensure that the given pathname is limited to the given directory 
if (strstr((char *)name, (char *)fname) == NULL) {
    free(name);
    return NULL;
} 
while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,787,-37.7813350036756,-0.04800677891191309
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) { 
   // Added code to ensure dir is absolute 
   if (dir[0] != '/') { 
      fprintf(stderr, ""Error: directory must be absolute\n""); 
      return NULL; 
   } 
   x += strlen ( ( char * ) dir ) ; 
} 
if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } 
// Added code to prevent path traversal 
if (strstr(name, "".."") != NULL) { 
   free(name); 
   fprintf(stderr, ""Error: path traversal\n""); 
   return NULL; 
} if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,859,-62.30960905639257,-0.07253737957670846
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { <StartBug> char path[strlen(dir) + 1]; realpath(dir, path); strcpy ( ( char * ) name , path ) ; <EndBug> strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,757,-13.718735876557204,-0.018122504460445447
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) + 2; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> 

fname = realpath(fname, NULL);
if (fname == NULL) {
    fprintf(stderr, ""Error getting the absolute path\n"");
    return NULL;
} 
<EndBug>

<StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } 

<StartBug> free(fname); <EndBug>

return ( char * ) name ; }",8,795,-37.76864141380728,-0.04750772504881419
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; <StartBug> strcat ( ( char * ) name , ""/"" ) ; <EndBug> } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> p = & name [ strlen ( ( char * ) name ) ] ; <StartBug> int pathLength = strlen(( char * ) name); if (pathLength > 0) { char *lastChar = &name[pathLength-1]; if (*lastChar != '/') { strcat ( ( char * ) name , ""/"" ) ; } } <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,799,-40.27940651880029,-0.05041227349036332
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> 
static char * create_output_name ( unsigned char * fname , unsigned char * dir , 
int lower , int isunix , int utf8 ) {
unsigned char * p , * name , c , * fe , sep , slash ; 
unsigned int x ; 
sep = ( isunix ) ? '/' : '\\\\' ; 
slash = ( isunix ) ? '\\\\' : '/' ; 
x = strlen ( ( char * ) fname ) ; 
if ( utf8 ) x *= 3 ; 

if ( dir ) {
  x += strlen ( ( char * ) dir ) ; 
  x += 2; //Add 2 spaces to handle the '/' and '\0' 
}

if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { 
  fprintf ( stderr , ""out of memory!\\n"" ) ; 
  return NULL ; 
} 

* name = '\\0' ; 
if ( dir ) { 
  strcpy ( ( char * ) name , ( char * ) dir ) ; 
  strcat ( ( char * ) name , ""/"" ) ; 
} 

//Ensure the pathname is within the restricted directory
while ( * fname == sep ) {
  if (strncmp(fname, dir, strlen(dir)) != 0) {
    free(name);
    fprintf(stderr, ""Unauthorized directory traversal attempted\n"");
    return NULL;
  }
  fname ++ ; 
} 

p = & name [ strlen ( ( char * ) name ) ] ; 
fe = & fname [ strlen ( ( char * ) fname ) ] ; 
if ( utf8 ) { 
  do { 
    if ( fname >= fe ) { 
      free ( name ) ; 
      return NULL ; 
    } 
    if ( ( c = * fname ++ ) < 0x80 ) x = c ; 
    else { 
      if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { 
        x = ( c & 0x1F ) << 6 ; 
        x |= * fname ++ & 0x3F ; 
      } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { 
        x = ( c & 0xF ) << 12 ; 
        x |= ( * fname ++ & 0x3F ) << 6 ; 
        x |= * fname ++ & 0x3F ; 
      } else x = '?' ; 
    } 
    if ( x == sep ) x = '/' ; 
    else if ( x == slash ) x = '\\\\' ; 
    else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; 
    if ( x < 0x80 ) { 
      * p ++ = ( unsigned char ) x ; 
    } else if ( x < 0x800 ) { 
      * p ++ = 0xC0 | ( x >> 6 ) ; 
      * p ++ = 0x80 | ( x & 0x3F ) ; 
    } else { 
      * p ++ = 0xE0 | ( x >> 12 ) ; 
      * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; 
      * p ++ = 0x80 | ( x & 0x3F ) ; 
    } 
  } while ( x ) ; 
} else { 
  do { 
    c = * fname ++ ; 
    if ( c == sep ) c = '/' ; 
    else if ( c == slash ) c = '\\\\' ; 
    else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; 
  } while ( ( * p ++ = c ) ) ; 
} 
return ( char * ) name ; 
}
<EndBug>",8,951,-87.06678204119704,-0.0915528728088297
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> 
static char * create_output_name ( unsigned char * fname , unsigned char * dir , 
int lower , int isunix , int utf8 ) { 
    unsigned char * p , * name , c , * fe , sep , slash ; 
    unsigned int x ; 
    sep = ( isunix ) ? '/' : '\\\\' ; 
    slash = ( isunix ) ? '\\\\' : '/' ; 
    x = strlen ( ( char * ) fname ) ; 
    if ( utf8 ) {
		x *= 3 ; 
	}
	if ( dir ) {
		x += strlen ( ( char * ) dir ) ; 
		// check for a slash at the end of the directory, add it if its not present
		if ( dir[strlen( ( char * ) dir ) - 1] != '/' ) {
			x++;
		}
	}
    if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { 
        fprintf ( stderr , ""out of memory!\\n"" ) ; 
        return NULL ; 
    } 
    * name = '\\0' ; 
    if ( dir ) { 
		// add the slash at the end of the directory if not present
		if ( dir[strlen( ( char * ) dir ) - 1] != '/' ) {
			strcat ( ( char * ) dir , ""/"" ) ;
		}
		strcpy ( ( char * ) name , ( char * ) dir ) ; 
    } 
	while ( * fname == sep ) fname ++ ; 
    p = & name [ strlen ( ( char * ) name ) ] ; 
    fe = & fname [ strlen ( ( char * ) fname ) ] ; 
    if ( utf8 ) { 
        do { 
            if ( fname >= fe ) { 
                free ( name ) ; 
                return NULL ; 
            } 
            if ( ( c = * fname ++ ) < 0x80 ) x = c ; 
            else { 
                if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { 
                    x = ( c & 0x1F ) << 6 ; 
                    x |= * fname ++ & 0x3F ; 
                } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { 
                    x = ( c & 0xF ) << 12 ; 
                    x |= ( * fname ++ & 0x3F ) << 6 ; 
                    x |= * fname ++ & 0x3F ; 
                } else x = '?' ; 
            } 
            if ( x == sep ) x = '/' ; 
            else if ( x == slash ) x = '\\\\' ; 
            else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; 
            if ( x < 0x80 ) { 
                * p ++ = ( unsigned char ) x ; 
            } else if ( x < 0x800 ) { 
                * p ++ = 0xC0 | ( x >> 6 ) ; 
                * p ++ = 0x80 | ( x & 0x3F ) ; 
            } else { 
                * p ++ = 0xE0 | ( x >> 12 ) ; 
                * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; 
                * p ++ = 0x80 | ( x & 0x3F ) ; 
            } 
        } while ( x ) ; 
    } else { 
        do { 
            c = * fname ++ ; 
            if ( c == sep ) c = '/' ; 
            else if ( c == slash ) c = '\\\\' ; 
            else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; 
        } while ( ( * p ++ = c ) ) ; 
    } 
    return ( char * ) name ; 
}
<EndBug>",8,978,-78.42281668304003,-0.08018692912376281
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> if (strcmp(dir, fname) == 0) { free(name); return NULL; } <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,745,-16.290523125388667,-0.021866473993810292
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) + 2; <StartBug> if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { 
fprintf ( stderr , ""out of memory!\\n"" ) ; 
return NULL ; 
}
strcpy ( ( char * ) name , ( char * ) dir ) ; 
strcat ( ( char * ) name , ""/"" ); <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { 
free ( name ) ; 
return NULL ; 
} 
if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,715,-30.52700143149246,-0.042695106897192255
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; if ( dir ) x += strlen ( ( char * ) dir ) + 2; <EndBug> if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; fname = realpath(fname, NULL); <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,728,-16.052020778443023,-0.02204947909126789
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; if ( utf8 ) x *= 3 ; <StartBug>if ( dir ) { 
  char *new_dir = realpath(dir, NULL);
  if (new_dir == NULL) {
    fprintf ( stderr , ""Invalid path!\\n"" ) ; 
    return NULL;
  }
  x += strlen (new_dir) ;
  if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <EndBug> fprintf ( stderr , ""out of memory!\\n"" ) ; return NULL ; } * name = '\\0' ; <StartBug> strcpy ( ( char * ) name , new_dir ) ; free(new_dir); 
  strcat ( ( char * ) name , ""/"" ) ; <EndBug> while ( * fname == sep ) fname ++ ; p = & name [ strlen ( ( char * ) name ) ] ; fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0x1F ) << 6 ; x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,761,-46.42744059159095,-0.061008463326663535
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> // Add check to ensure path is within the directory  if ( strncmp(dir, fname, strlen(dir)) != 0) { fprintf(stderr, ""Invalid path!\n""); free(name); return NULL; } <EndBug> while ( * fname == sep ) fname ++ ; <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,788,-35.1697101989258,-0.04463161192757081
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while (*fname == sep || *fname == slash) fname ++ ; <EndBug> <StartBug> if (*fname == '.') fname ++; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,760,-27.11421191936373,-0.03567659463074175
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; <StartBug> x = realpath(fname, NULL); <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> fname = realpath(fname, NULL); <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,720,-11.6021469860122,-0.016114093036128055
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; //Validate that the directory is not being traversed <EndBug> <StartBug> if (strstr(fname, "".."") != NULL) { //If directory traversal detected, return NULL free(name); return NULL; } p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,778,-36.90337846064115,-0.04743364840699377
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
static char * create_output_name ( unsigned char * fname , unsigned char * dir , int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; if ( utf8 ) x *= 3 ; if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr , ""out of memory!\\n"" ) ; return NULL ; } * name = '\\0' ; if ( dir ) { <StartBug> char buf[1024] = {0}; if (strlen(dir) > sizeof(buf)) { fprintf ( stderr , ""directory name too long!\\n"" ) ; free (name); return NULL; } strncpy (buf, ( char * ) dir , sizeof(buf) - 1 ); strcat ( ( char * ) name , buf ) ; <EndBug> strcat ( ( char * ) name , ""/"" ) ; } p = & name [ strlen ( ( char * ) name ) ] ; fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0x1F ) << 6 ; x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; <StartBug> if (x == 0) break; <EndBug> if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } } while ( x ) ; } else { do { c = * fname ++ ; <StartBug> if (c == 0) break; <EndBug> if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,761,-57.457723177686084,-0.07550292138986345
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> strcpy ( ( char * ) name , normalize_path(dir) ) ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; } 

static char* normalize_path(char* dir) {
    char* output_name = malloc(strlen(dir) + 2);
    int i;
    int j = 0;
    for (i = 0; i < strlen(dir); i++) {
        if (dir[i] != '\\' || dir[i] != '/') {
            output_name[j] = dir[i];
            j++;
        }
    }
    return output_name;
}",8,860,-56.30785108716036,-0.06547424545018646
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) {
  x += strlen ( ( char * ) dir ) ;
  // Escape backslash characters
  char *escapedDir = (char *) malloc(x + 1);
  int i;
  for (i = 0; i < x; i++) {
    if (dir[i] == '\\')
      escapedDir[i] = '\\';
    else
      escapedDir[i] = dir[i];
  }
  escapedDir[i] = '\0';

  x += 2; // for null character and trailing slash
}

if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) escapedDir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } free (escapedDir); return ( char * ) name ; }",8,861,-68.63464507042369,-0.07971503492499847
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> 
static char * create_output_name ( unsigned char * fname , unsigned char * dir , 
int lower , int isunix , int utf8 ) { 
unsigned char * p , * name , c , * fe , sep , slash ; 
unsigned int x ; 
sep = ( isunix ) ? '/' : '\\\\' ; 
slash = ( isunix ) ? '\\\\' : '/' ; 
x = strlen ( ( char * ) fname ) ; 

//Added these lines to fix the vulnerability
if(strstr((char*)fname, "".."") != NULL)
{
   fprintf ( stderr , ""invalid pathname!\\n"" ) ; 
   return NULL ;
}

if ( utf8 ) x *= 3 ; 

if ( dir ) x += strlen ( ( char * ) dir ) ; 

if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { 
   fprintf ( stderr , ""out of memory!\\n"" ) ; 
   return NULL ; 
} 

* name = '\\0' ; 

if ( dir ) { 
   strcpy ( ( char * ) name , ( char * ) dir ) ; 
   strcat ( ( char * ) name , ""/"" ) ; 
} 

while ( * fname == sep ) fname ++ ; 

p = & name [ strlen ( ( char * ) name ) ] ; 

fe = & fname [ strlen ( ( char * ) fname ) ] ; 

if ( utf8 ) { 
   do { 
      if ( fname >= fe ) { 
         free ( name ) ; 
         return NULL ; 
      } 
      if ( ( c = * fname ++ ) < 0x80 ) x = c ; 
      else { 
         if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { 
            x = ( c & 0x1F ) << 6 ; 
            x |= * fname ++ & 0x3F ; 
         } 
         else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { 
            x = ( c & 0xF ) << 12 ; 
            x |= ( * fname ++ & 0x3F ) << 6 ; 
            x |= * fname ++ & 0x3F ; 
         } 
         else x = '?' ; 
      } 
      if ( x == sep ) x = '/' ; 
      else if ( x == slash ) x = '\\\\' ; 
      else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; 
      if ( x < 0x80 ) { 
         * p ++ = ( unsigned char ) x ; 
      } 
      else if ( x < 0x800 ) { 
         * p ++ = 0xC0 | ( x >> 6 ) ; 
         * p ++ = 0x80 | ( x & 0x3F ) ; 
      } 
      else { 
         * p ++ = 0xE0 | ( x >> 12 ) ; 
         * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; 
         * p ++ = 0x80 | ( x & 0x3F ) ; 
      } 
   } while ( x ) ; 
} 
else { 
   do { 
      c = * fname ++ ; 
      if ( c == sep ) c = '/' ; 
      else if ( c == slash ) c = '\\\\' ; 
      else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; 
   } while ( ( * p ++ = c ) ) ; 
} 

return ( char * ) name ; 
}
<EndBug>",8,927,-51.61176641266827,-0.05567612342251162
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> 
<StartBug> //Prevent path traversal
if(strstr(fname,"".."") != NULL || strstr(fname, ""/"") != NULL)
	return NULL;<EndBug>

<StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,783,-39.67369482194004,-0.050668831190217166
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) + 1; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> char *fnamePath = realpath(fname, NULL); 
if(fnamePath != NULL) { 
    fname = fnamePath; 
} else { 
    fprintf(stderr, ""realpath failed: %s\n"", strerror(errno)); 
    return NULL;
} 
while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> 
free(fnamePath); 
} else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,824,-48.71085343133691,-0.05911511338754479
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) { x += strlen ( ( char * ) dir ) ; x += 1 ; // For the directory seperator '/' } <StartBug> if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <EndBug> fprintf ( stderr , ""out of memory!\\n"" ) ; return NULL ; } * name = '\\0' ; <StartBug> if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { <StartBug> if (name[0] != '/') { // Check that the output name is not a relative path * p ++ = ( unsigned char ) x ; } else { // If the output name is a relative path, ignore the character. continue; } <EndBug> } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; <StartBug> if (name[0] != '/') { // Check that the output name is not a relative path * p ++ = c ; } else { // If the output name is a relative path, ignore the character. continue; } <EndBug> } while ( ( * p ) ) ; } return ( char * ) name ; }",8,839,-67.69918773433969,-0.08069033103020225
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; <StartBug> char * clean_fname = realpath(fname, NULL); <EndBug> x = strlen ( ( char * ) clean_fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & clean_fname [ strlen ( ( char * ) clean_fname ) ] ; if ( utf8 ) { do { <StartBug> if ( clean_fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * clean_fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * clean_fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * clean_fname ++ & 0x3F ) << 6 ; x |= * clean_fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * clean_fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } <StartBug> free(clean_fname); <EndBug> return ( char * ) name ; }",8,771,-15.783319021188209,-0.020471230896482763
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) + 1; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> 

// Add boundary checking 
if (strlen(fname) + strlen(name) > x) { 
	fprintf ( stderr , ""Path name too long!\\n"" ) ; 
	free (name); 
	return NULL; 
} 

// Strip leading slash or backslash 
while ( * fname == sep ) fname ++ ; 

<EndBug> 

<StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,820,-60.00044219200438,-0.073171270965859
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug>
static char * create_output_name ( unsigned char * fname , unsigned char * dir , int lower , int isunix , int utf8 ) { 
	unsigned char * p , * name , c , * fe , sep , slash ; 
	unsigned int x ; 
	sep = ( isunix ) ? '/' : '\\\\' ; 
	slash = ( isunix ) ? '\\\\' : '/' ; 
	x = strlen ( ( char * ) fname ) ; 
	if ( utf8 ) x *= 3 ; 
	if ( dir ) x += strlen ( ( char * ) dir ) ; 
	if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { 
		fprintf ( stderr , ""out of memory!\\n"" ) ; 
		return NULL ; 
	} 
	* name = '\\0' ; 
	if ( dir ) { 
		strcpy ( ( char * ) name , ( char * ) dir ) ; 
		strcat ( ( char * ) name , ""/"" ) ; 
		p = & name [ strlen ( ( char * ) name ) ] ; 
		while ( * fname == sep ) fname ++ ;
		fe = & fname [ strlen ( ( char * ) fname ) ] ;
		if ( utf8 ) { 
			do { 
				if ( fname >= fe ) { 
					free ( name ) ; 
					return NULL ; 
				} 
				if ( ( c = * fname ++ ) < 0x80 ) x = c ; 
				else { 
					if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { 
						x = ( c & 0x1F ) << 6 ; 
						x |= * fname ++ & 0x3F ; 
					} 
					else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { 
						x = ( c & 0xF ) << 12 ; 
						x |= ( * fname ++ & 0x3F ) << 6 ; 
						x |= * fname ++ & 0x3F ; 
					} 
					else x = '?' ; 
				} 
				if ( x == sep ) x = '/' ; 
				else if ( x == slash ) x = '\\\\' ; 
				else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; 
				if ( x < 0x80 ) { 
					* p ++ = ( unsigned char ) x ; 
				} 
				else if ( x < 0x800 ) { 
					* p ++ = 0xC0 | ( x >> 6 ) ; 
					* p ++ = 0x80 | ( x & 0x3F ) ; 
				} 
				else { 
					* p ++ = 0xE0 | ( x >> 12 ) ; 
					* p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; 
					* p ++ = 0x80 | ( x & 0x3F ) ; 
				} 
			} while ( x && fname <= fe ) ; 
		} 
		else { 
			do { 
				c = * fname ++ ; 
				if ( c == sep ) c = '/' ; 
				else if ( c == slash ) c = '\\\\' ; 
				else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; 
			} while ( ( * p ++ = c",8,1000,-32.83905559088009,-0.032839055590880094
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) + 1; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; <StartBug> // Check if fname starts with the directory separator 
	while ( * fname == sep ) fname ++ ; <EndBug> if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }",8,751,-35.8952585772613,-0.04779661594841718
"The Original Code is vulnerable to CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } return ( char * ) name ; }
Fixed code:","
<StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <EndBug> int lower , int isunix , int utf8 ) { unsigned char * p , * name , c , * fe , sep , slash ; unsigned int x ; sep = ( isunix ) ? '/' : '\\\\' ; slash = ( isunix ) ? '\\\\' : '/' ; x = strlen ( ( char * ) fname ) ; <StartBug> if ( utf8 ) x *= 3 ; <EndBug> if ( dir ) x += strlen ( ( char * ) dir ) ; if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { <StartBug> fprintf ( stderr , ""out of memory!\\n"" ) ; <EndBug> return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name , ( char * ) dir ) ; strcat ( ( char * ) name , ""/"" ) ; } <StartBug> // Added code start 
char *sanitizedName = malloc(strlen(fname) + 1);
memcpy(sanitizedName, fname, strlen(fname) + 1);
clean_path(sanitizedName);
fname = sanitizedName;
// Added code end
while ( * fname == sep ) fname ++ ; <EndBug> <StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <EndBug> fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { <StartBug> if ( fname >= fe ) { <EndBug> free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { <StartBug> x = ( c & 0x1F ) << 6 ; <EndBug> x |= * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '/' ; else if ( x == slash ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x80 ) { * p ++ = ( unsigned char ) x ; } else if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } else { * p ++ = 0xE0 | ( x >> 12 ) ; * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; * p ++ = 0x80 | ( x & 0x3F ) ; } <StartBug> } while ( x ) ; <EndBug> } else { do { c = * fname ++ ; if ( c == sep ) c = '/' ; else if ( c == slash ) c = '\\\\' ; else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; } while ( ( * p ++ = c ) ) ; } <StartBug> free(sanitizedName); // Added code <EndBug> return ( char * ) name ; }",8,820,-45.11309440801169,-0.055015968790258156
