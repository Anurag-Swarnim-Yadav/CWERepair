Original code,Plausible Program,Number of Bugs Present,Total Tokens,Sum Entropy,Mean Entropy
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; cmap_entry_size = get_ushort ( & tga [ 7 ] ) ; <EndBug> # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,639,-5.150430931466787,-0.008060142302764925
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort_safe ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort_safe ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort_safe ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort_safe ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort_safe ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }

//A safe version of the get_ushort function to prevent out-of-bounds writes
static unsigned short get_ushort_safe ( const unsigned char * ptr ) { if ( ! ptr ) { return 0 ; } return ( ( ptr [ 1 ] << 8 ) | ptr [ 0 ] ) ; }",5,726,-32.37777484573365,-0.044597486013407225
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-1.8140500873790792,-0.002799460011387468
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-1.78495628484937,-0.002754562167977423
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = ( unsigned short ) ( tga [ 5 ] << 8 ) | tga [ 4 ] ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = ( unsigned short ) ( tga [ 8 ] << 8 ) | tga [ 7 ] ; <EndBug> <StartBug> y_origin = ( unsigned short ) ( tga [ 10 ] << 8 ) | tga [ 9 ] ; <EndBug> # endif <StartBug> image_w = ( unsigned short ) ( tga [ 12 ] << 8 ) | tga [ 11 ] ; <EndBug> <StartBug> image_h = ( unsigned short ) ( tga [ 14 ] << 8 ) | tga [ 13 ] ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,683,-10.770223456840139,-0.01576899481235745
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; if (cmap_len > TGA_HEADER_SIZE) { return 0; } <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; if (x_origin > TGA_HEADER_SIZE) { return 0; } <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; if (y_origin > TGA_HEADER_SIZE) { return 0; } <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; if (image_w > TGA_HEADER_SIZE) { return 0; } <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; if (image_h > TGA_HEADER_SIZE) { return 0; } <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,744,-6.55981580687539,-0.008816956729671224
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-1.8140500873790792,-0.002799460011387468
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = (unsigned short) get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = (unsigned short) get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = (unsigned short) get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = (unsigned short) get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = (unsigned short) get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,668,-4.5122669351646145,-0.006754890621503914
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-1.8140500873790792,-0.002799460011387468
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( &tga [ 5 ] ) ; if( cmap_len > TGA_HEADER_SIZE ) return 0; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; if( x_origin > TGA_HEADER_SIZE ) return 0; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; if( y_origin > TGA_HEADER_SIZE ) return 0; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; if( image_w > TGA_HEADER_SIZE ) return 0; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; if( image_h > TGA_HEADER_SIZE ) return 0; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,734,-18.899480854170218,-0.025748611517943075
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; 
<StartBug> cmap_len = get_ushort_safe ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort_safe ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort_safe ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort_safe ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort_safe ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,660,-5.72145124869572,-0.008668865528326849
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] , TGA_HEADER_SIZE ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] , TGA_HEADER_SIZE ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] , TGA_HEADER_SIZE ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] , TGA_HEADER_SIZE ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] , TGA_HEADER_SIZE ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,688,-6.477588705490733,-0.00941509986263188
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-1.8140500873790792,-0.002799460011387468
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-1.78495628484937,-0.002754562167977423
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; cmap_entry_size = get_ushort ( & tga [ 7 ] ); <EndBug> # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,654,-5.704212808501065,-0.008722037933487867
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:"," 
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort_safe ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort_safe ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort_safe ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort_safe ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort_safe ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }

// The get_ushort() function has been replaced with get_ushort_safe() to prevent out of bounds writes.",5,687,-18.976058179414984,-0.027621627626513805
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-1.8217913027346484,-0.00281140633138063
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-1.8217913027346484,-0.00281140633138063
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-1.8217913027346484,-0.00281140633138063
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = (unsigned short) tga[5] | tga[6] << 8; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = (unsigned short) tga[8] | tga[9] << 8; <EndBug> <StartBug> y_origin = (unsigned short) tga[10] | tga[11] << 8; <EndBug> # endif <StartBug> image_w = (unsigned short) tga[12] | tga[13] << 8; <EndBug> <StartBug> image_h = (unsigned short) tga[14] | tga[15] << 8; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,673,-9.734237664239622,-0.014463948981039558
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-4.635653081734632,-0.007153785619960852
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; if (cmap_len > TGA_HEADER_SIZE) { return 0; } <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,668,-7.942638842430252,-0.01189017790782972
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; cmap_entry_size = get_ushort ( & tga [ 7 ] ) ; <EndBug> # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,655,-5.4329515881172545,-0.008294582577278251
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-1.8409408593537278,-0.002840958116286617
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 3 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 9 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 11 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 13 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 15 ] ) ; <EndBug> pixel_depth = tga [ 17 ] ; image_desc = tga [ 18 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-6.206074759543924,-0.00957727586349371
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = (unsigned short)(tga[4] << 8) | (unsigned short)(tga[5]); <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = (unsigned short)(tga[8] << 8) | (unsigned short)(tga[9]); <EndBug> <StartBug> y_origin = (unsigned short)(tga[10] << 8) | (unsigned short)(tga[11]); <EndBug> # endif <StartBug> image_w = (unsigned short)(tga[12] << 8) | (unsigned short)(tga[13]); <EndBug> <StartBug> image_h = (unsigned short)(tga[14] << 8) | (unsigned short)(tga[15]); <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,693,-11.854166905435465,-0.017105579950123326
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; if (cmap_len > TGA_HEADER_SIZE) { cmap_len = 0; } <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; if (x_origin > TGA_HEADER_SIZE) { x_origin = 0; } <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; if (y_origin > TGA_HEADER_SIZE) { y_origin = 0; } <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; if (image_w > TGA_HEADER_SIZE) { image_w = 0; } <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; if (image_h > TGA_HEADER_SIZE) { image_h = 0; } <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,760,-8.691806533839193,-0.011436587544525255
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; cmap_entry_size = get_ushort ( & tga [ 7 ] ) ; <EndBug> # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,655,-5.738265099796673,-0.008760710076025455
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; cmap_len = get_ushort ( & tga [ 5 ] ) ; cmap_entry_size = tga [ 7 ] ; # if 0 x_origin = get_ushort ( & tga [ 8 ] ) ; <StartBug> if (x_origin + cmap_len > TGA_HEADER_SIZE) { fprintf(stderr, ""Error: Out of bounds write\n""); return 0; } <EndBug> y_origin = get_ushort ( & tga [ 10 ] ) ; # endif image_w = get_ushort ( & tga [ 12 ] ) ; image_h = get_ushort ( & tga [ 14 ] ) ; pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,657,-15.734523175466633,-0.023949045929172956
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-1.8409408593537278,-0.002840958116286617
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = (unsigned short) get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = (unsigned short) get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = (unsigned short) get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = (unsigned short) get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = (unsigned short) get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,668,-4.5851108856101055,-0.006863938451512134
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; cmap_entry_size = get_ushort ( & tga [ 7 ] ) ; <EndBug> # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,655,-5.738265099796673,-0.008760710076025455
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-2.0436211344504294,-0.0031537363185963414
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort_safe ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort_safe ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort_safe ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort_safe ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort_safe ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }

static unsigned short get_ushort_safe(unsigned char *buf) {
    unsigned short val;
    if(buf == NULL) {
        return 0;
    }
    val = (buf[1] << 8) | buf[0];
    return val;
}",5,723,-17.903059623427044,-0.024762184818018042
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-2.0436211344504294,-0.0031537363185963414
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( tga + 5 ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( tga + 8 ) ; <EndBug> <StartBug> y_origin = get_ushort ( tga + 10 ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( tga + 12 ) ; <EndBug> <StartBug> image_h = get_ushort ( tga + 14 ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,638,-4.411858619257233,-0.006915138901657104
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = (unsigned short) get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = (unsigned short) get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = (unsigned short) get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = (unsigned short) get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = (unsigned short) get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,668,-4.3719746170194735,-0.006544872181166877
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort_checked ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort_checked ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort_checked ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort_checked ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort_checked ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }

// Function to check out-of-bounds writes
unsigned short get_ushort_checked(unsigned char* tga) {
	if (tga) {
		return get_ushort(tga);
	}
	return 0;
}",5,718,-27.365299524550615,-0.03811323053558582
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; <StartBug> unsigned short cmap_len , cmap_entry_size ; <EndBug> unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; cmap_entry_size = get_ushort ( & tga [ 7 ] ) ; <EndBug> # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,647,-10.870371790289726,-0.016801192875254597
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> if (tga[5] == 0) { cmap_len = 0; } else { cmap_len = get_ushort ( & tga [ 5 ] ) ; } <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> if (tga[8] == 0) { x_origin = 0; } else { x_origin = get_ushort ( & tga [ 8 ] ) ; } <EndBug> <StartBug> if (tga[10] == 0) { y_origin = 0; } else { y_origin = get_ushort ( & tga [ 10 ] ) ; } <EndBug> # endif <StartBug> if (tga[12] == 0) { image_w = 0; } else { image_w = get_ushort ( & tga [ 12 ] ) ; } <EndBug> <StartBug> if (tga[14] == 0) { image_h = 0; } else { image_h = get_ushort ( & tga [ 14 ] ) ; } <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,754,-11.18935094069695,-0.014839987985009219
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-2.0436211344504294,-0.0031537363185963414
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort_safe ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort_safe ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort_safe ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort_safe ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort_safe ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; } 

/* Added function to ensure safe array indexing */
unsigned short get_ushort_safe (unsigned char* tga)
{ 
   unsigned short cmap_len; 
   if (tga[5] < TGA_HEADER_SIZE) //Checking for array index out of bound error
   {
      cmap_len = get_ushort(&tga[5]);
   }
   else 
   {
      cmap_len = 0;
   }
   return cmap_len;
}",5,780,-68.26744292530103,-0.08752236272474491
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = (tga[5] << 8) | tga[6]; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = (tga[8] << 8) | tga[9]; <EndBug> <StartBug> y_origin = (tga[10] << 8) | tga[11]; <EndBug> # endif <StartBug> image_w = (tga[12] << 8) | tga[13]; <EndBug> <StartBug> image_h = (tga[14] << 8) | tga[15]; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,658,-7.820251685938336,-0.011884880981669205
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-2.0011596770919513,-0.00308820937822832
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = (unsigned short) get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = (unsigned short) get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = (unsigned short) get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = (unsigned short) get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = (unsigned short) get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,668,-4.3719746170194735,-0.006544872181166877
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; if ( cmap_len > TGA_HEADER_SIZE ) { return 0 ; } <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; if ( x_origin > TGA_HEADER_SIZE ) { return 0 ; } <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; if ( y_origin > TGA_HEADER_SIZE ) { return 0 ; } <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; if ( image_w > TGA_HEADER_SIZE ) { return 0 ; } <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; if ( image_h > TGA_HEADER_SIZE ) { return 0 ; } <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,744,-7.7704240575285715,-0.010444118356893241
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = (unsigned short) get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = (unsigned short) get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = (unsigned short) get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = (unsigned short) get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = (unsigned short) get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,668,-4.3719746170194735,-0.006544872181166877
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-2.0011596770919513,-0.00308820937822832
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","

static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,649,-4.830914364563115,-0.007443627680374599
"The Original Code is vulnerable to CWE-787: Out-of-Bounds Write. Fix the code between <StartBug> and <EndBug> to fix the vulnerability.
Original Code:
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <EndBug> cmap_entry_size = tga [ 7 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }
Fixed code:","
static int tga_readheader ( FILE * fp , unsigned int * bits_per_pixel , unsigned int * width , unsigned int * height , int * flip_image ) { int palette_size ; unsigned char tga [ TGA_HEADER_SIZE ] ; unsigned char id_len , image_type ; unsigned char pixel_depth , image_desc ; unsigned short cmap_len , cmap_entry_size ; unsigned short image_w , image_h ; if ( ! bits_per_pixel || ! width || ! height || ! flip_image ) { return 0 ; } if ( fread ( tga , TGA_HEADER_SIZE , 1 , fp ) != 1 ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; return 0 ; } id_len = tga [ 0 ] ; image_type = tga [ 2 ] ; <StartBug> cmap_len = get_ushort ( & tga [ 4 ] ) ; <EndBug> cmap_entry_size = tga [ 6 ] ; # if 0 <StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <EndBug> <StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <EndBug> # endif <StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <EndBug> <StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <EndBug> pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr , ""tga_readheader: memory out\\n"" ) ; return 0 ; } if ( ! fread ( id , id_len , 1 , fp ) ) { fprintf ( stderr , ""\\nError: fread return a number of element different from the expected.\\n"" ) ; free ( id ) ; return 0 ; } free ( id ) ; } if ( image_type > 8 ) { fprintf ( stderr , ""Sorry, compressed tga files are not currently supported.\\n"" ) ; return 0 ; } * flip_image = ! ( image_desc & 32 ) ; palette_size = cmap_len * ( cmap_entry_size / 8 ) ; if ( palette_size > 0 ) { fprintf ( stderr , ""File contains a palette - not yet supported."" ) ; fseek ( fp , palette_size , SEEK_CUR ) ; } return 1 ; }",5,648,-1.9007576816225313,-0.0029332680271952644
